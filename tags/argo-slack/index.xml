<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>argo slack - Tag - Dokyung&#39;s DevOoOps</title>
        <link>https://huntedhappy.github.io/tags/argo-slack/</link>
        <description>argo slack - Tag - Dokyung&#39;s DevOoOps</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>huntedhappy@gmail.com (Dokyung)</managingEditor>
            <webMaster>huntedhappy@gmail.com (Dokyung)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 31 Dec 2021 20:05:51 &#43;0900</lastBuildDate><atom:link href="https://huntedhappy.github.io/tags/argo-slack/" rel="self" type="application/rss+xml" /><item>
    <title>The Documentation Argo-CD</title>
    <link>https://huntedhappy.github.io/argo/</link>
    <pubDate>Fri, 31 Dec 2021 20:05:51 &#43;0900</pubDate>
    <author>Dokyung</author>
    <guid>https://huntedhappy.github.io/argo/</guid>
    <description><![CDATA[<h2 id="gitops-explain-ing">gitops explain ing&hellip;..</h2>
<h2 id="argo">ARGO?</h2>
<p>CI/CD에서 CD를 아르고로 선택한 이유는 인프라 변경 사항에 대한 추적이 좀 가능 하기도 하며 또한 구성 및 배포가 쉽다라고 생각 했다.</p>
<p>설치 환경은 Tanzu 1.4 버전으로 진행</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>CI/CD<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>CI/CD는 애플리케이션 개발 단계를 자동화하여 애플리케이션을 보다 짧은 주기로 고객에게 제공한다.
CI (Continuous Integration) CI를 통해 개발자들은 코드 변경사항을 공유 브랜치로 다시 병합하는 작업을 더욱 수월하게 자주 수행 할 수 있다.
CD (Continuous Delivery || Continuous Deploy) 두용어는 상호 교환적으로 사용됨.</p>
<ul>
<li>Continuous Deliver의 경우 코드 변경 , 병합으로부터 Prodcution에 적합한 빌드를 제공하여 모든 단계에 테스트 및 릴리스를 자동화한다.</li>
<li>Continuous Deploy는 어플리케이션을 프로덕션으로 릴리스 작업을 자동화</li>
</ul>
</div>
        </div>
    </div>
<figure><figcaption>
            <h4>CICD</h4>
        </figcaption>
</figure>

<p>참고 문헌 <a href="https://www.redhat.com/ko/topics/devops/what-is-ci-cd" target="_blank" rel="noopener noreffer "><i class="fas fa-link"></i> Redhat </a></p>
<h2 id="1-requirements">1. Requirements</h2>
<p>helm 설치, <a href="https://github.com/helm/helm/releases" target="_blank" rel="noopener noreffer "><i class="far fa-file-archive fa-fw" aria-hidden="true"></i>&nbsp;Helm</a>.</p>
<h2 id="2-환경">2. 환경</h2>
<p>vSphere : 7.0</p>
<p>vSAN</p>
<p>NSX : 3.2</p>
<p>AVI : 21.1.1</p>
<p>Tanzu 1.4</p>
<h2 id="3-설치">3. 설치</h2>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>ARGO Install<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p><a href="https://github.com/dillonzq/LoveIt/releases/tag/v0.2.0" rel="noopener noreffer" target="_blank"></a></p>
<p>Namespace 생성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl create ns argocd
</span></span></code></pre></td></tr></table>
</div>
</div><p>Helm Repo 등록</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">helm repo add argo https://argoproj.github.io/argo-helm
</span></span><span class="line"><span class="cl">helm repo update
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Optional : Helm 에서 value 값을 수정 하고 싶으면 별도로 다운로드</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">helm show values argo/argo-cd &gt; argocd.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Optional : HTTPS로 구성을 하려고 한다면 인증서 등록을 해준다.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl create secret tls argo-tls --cert<span class="o">=</span>/data/cert/yourdomain.com.crt --key<span class="o">=</span>/data/cert/yourdomain.com.key -n argocd
</span></span></code></pre></td></tr></table>
</div>
</div><p>수정이 필요 없으면 바로 시작 하면 된다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">helm install argocd argo/argo-cd -n argo
</span></span></code></pre></td></tr></table>
</div>
</div><p>접속 하기 위해 Portfoward를 하자</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl port-forward service/argocd-server -n argo 8080:443
</span></span></code></pre></td></tr></table>
</div>
</div><p>ID는 admin 이며, PW는 별도의 명령으로 알아 낼수 있다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl -n argo get secret argocd-initial-admin-secret -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">&#34;{.data.password}&#34;</span> <span class="p">|</span> base64 -d
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p><figure><a class="lightgallery" href="/images/ARGO/3-1.png" title="접속 페이지" data-thumbnail="/images/ARGO/3-1.png" data-sub-html="<h2>접속 페이지</h2><p>접속 페이지</p>">
        
    </a><figcaption class="image-caption">접속 페이지</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/ARGO/3-2.png" title="User Info" data-thumbnail="/images/ARGO/3-2.png" data-sub-html="<h2>User Info</h2><p>User Info</p>">
        
    </a><figcaption class="image-caption">User Info</figcaption>
    </figure></p>
<h2 id="4-auth---ldap-integration">4. Auth - LDAP Integration</h2>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>LDAP Integration<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>LDAP을 연동 하기 위해선 values 값을 다운로드 하는 것이 좋다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">helm show values argo/argo-cd &gt; argocd.yaml
</span></span><span class="line"><span class="cl">vi argocd.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>다운로드 받은 Yaml파일중에 dex부분을 수정한다, 없으면 추가 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">    dex.config: <span class="p">|</span>
</span></span><span class="line"><span class="cl">      connectors:
</span></span><span class="line"><span class="cl">      - type: ldap
</span></span><span class="line"><span class="cl">        name: Ldap
</span></span><span class="line"><span class="cl">        id: ldap
</span></span><span class="line"><span class="cl">        config:
</span></span><span class="line"><span class="cl">          <span class="c1"># Ldap server address</span>
</span></span><span class="line"><span class="cl">          host: tanzu-dns.tkg.io:389
</span></span><span class="line"><span class="cl">          insecureNoSSL: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">          insecureSkipVerify: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">          startTLS: <span class="nb">false</span>
</span></span><span class="line"><span class="cl">          bindDN: <span class="s2">&#34;</span><span class="nv">$dex</span><span class="s2">.ldap.bindDN&#34;</span>
</span></span><span class="line"><span class="cl">          bindPW: <span class="s2">&#34;</span><span class="nv">$dex</span><span class="s2">.ldap.bindPW&#34;</span>
</span></span><span class="line"><span class="cl">          usernamePrompt: Username
</span></span><span class="line"><span class="cl">          userSearch:
</span></span><span class="line"><span class="cl">            baseDN: <span class="s2">&#34;ou=tanzu,dc=tkg,dc=io&#34;</span>
</span></span><span class="line"><span class="cl">            filter: <span class="o">(</span><span class="nv">objectClass</span><span class="o">=</span>person<span class="o">)</span>
</span></span><span class="line"><span class="cl">            username: sAMAccountName
</span></span><span class="line"><span class="cl">            idAttr: DN
</span></span><span class="line"><span class="cl">            emailAttr: mail
</span></span><span class="line"><span class="cl">            nameAttr: sAMAccountName
</span></span><span class="line"><span class="cl">          groupSearch:
</span></span><span class="line"><span class="cl">            baseDN: <span class="s2">&#34;ou=tanzu,dc=tkg,dc=io&#34;</span>
</span></span><span class="line"><span class="cl">            filter: <span class="o">(</span><span class="nv">objectClass</span><span class="o">=</span>person<span class="o">)</span>
</span></span><span class="line"><span class="cl">            userAttr: DN
</span></span><span class="line"><span class="cl">            groupAttr: member
</span></span><span class="line"><span class="cl">            nameAttr: name
</span></span></code></pre></td></tr></table>
</div>
</div><p>그리고 Secret을 생성 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl -n argo patch secrets argocd-secret --patch <span class="s2">&#34;{\&#34;data\&#34;:{\&#34;dex.ldap.bindPW\&#34;:\&#34;</span><span class="k">$(</span><span class="nb">echo</span> <span class="s1">&#39;Passw0rd&#39;</span> <span class="p">|</span> base64 -w 0<span class="k">)</span><span class="s2">\&#34;}}&#34;</span>
</span></span><span class="line"><span class="cl">kubectl -n argo patch secrets argocd-secret --patch <span class="s2">&#34;{\&#34;data\&#34;:{\&#34;dex.ldap.bindDN\&#34;:\&#34;</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">cn</span><span class="o">=</span>administrator,cn<span class="o">=</span>users,dc<span class="o">=</span>tanzu,dc<span class="o">=</span>io <span class="p">|</span> base64 -w 0<span class="k">)</span><span class="s2">\&#34;}}&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>HELM 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">helm install argocd argo/argo-cd -n argo <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--set server.extraArgs<span class="o">[</span>0<span class="o">]=</span>--insecure <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-f argocd.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>접속 하기 위해 Portfoward를 하자</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl port-forward service/argocd-server -n argo 8080:443
</span></span></code></pre></td></tr></table>
</div>
</div><p>ID는 admin 이며, PW는 별도의 명령으로 알아 낼수 있다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl -n argo get secret argocd-initial-admin-secret -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">&#34;{.data.password}&#34;</span> <span class="p">|</span> base64 -d
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h3 id="41-rbac-적용">4.1. RBAC 적용</h3>
<p>RBAC을 적용 해주어 Admin 권한으로 접속이 되는지 확인
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>LDAP Integration<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>confimap을 수정 해서 RBAC의 대한 설정을 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl edit cm argocd-rbac-cm -n argo
</span></span></code></pre></td></tr></table>
</div>
</div><p>configmap을 수정 하면 아래 내용이 있으면 수정 하고 없으면 추가 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">apiVersion: v1
</span></span><span class="line"><span class="cl">data:
</span></span><span class="line"><span class="cl">  policy.csv: <span class="p">|</span>
</span></span><span class="line"><span class="cl">    p, role:my1208, applications, *, my1208/*, allow
</span></span><span class="line"><span class="cl">    p, role:my1208, projects, get, my1208, allow
</span></span><span class="line"><span class="cl">    p, role:my1208, repositories, get, *, allow
</span></span><span class="line"><span class="cl">    p, role:my1208, clusters, get, *, allow
</span></span><span class="line"><span class="cl">    g, my1208, role:admin
</span></span><span class="line"><span class="cl">    p, role:none, *, *, */*, deny
</span></span><span class="line"><span class="cl">    g, tkg, role:readonly
</span></span><span class="line"><span class="cl">    g, my1208@openbase.co.kr, role:admin
</span></span><span class="line"><span class="cl">  policy.default: role:none
</span></span><span class="line"><span class="cl">  scopes: <span class="s1">&#39;[groups,email]&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Pod를 재 실행 해 준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">delete</span><span class="o">=</span><span class="sb">`</span>kubectl get pod -n argo <span class="p">|</span> grep -v  repo <span class="p">|</span> egrep  <span class="s1">&#39;server|dex&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span> <span class="p">|</span> xargs <span class="nb">echo</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">kubectl delete pod <span class="nv">$delete</span> -n argo
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div></p>
<figure><figcaption>
            <h4>접속 화면</h4>
        </figcaption>
</figure>

<h2 id="5-slack-연동">5. SLACK 연동</h2>
<p>메시지를 SLACK으로 받기 위해 연동</p>
<h3 id="51-slack-설정">5.1. SLACK 설정</h3>
<p><a href="https://api.slack.com/apps?new_app=1" target="_blank" rel="noopener noreffer "><i class="fas fa-link"></i> SLACK APP 등록 </a>
<figure><figcaption>
            <h4>APP 추가#1</h4>
        </figcaption>
</figure>
</p>
<figure><figcaption>
            <h4>APP 추가#2</h4>
        </figcaption>
</figure>

<p>APP을 추가하기 위해 APP의 Name 설정 및 workspace를 선택 한다.
<figure><figcaption>
            <h4>APP 추가#3</h4>
        </figcaption>
</figure>

OAuth &amp; Permmissions을 클릭 하면 아래처럼 화면이 나온다.
<figure><figcaption>
            <h4>APP 추가#4</h4>
        </figcaption>
</figure>

Scopes를 찾아서 chat을 찾은후 적용
<figure><figcaption>
            <h4>APP 추가#5</h4>
        </figcaption>
</figure>

그러면 OAuth Tokens for Your Workspace가 활성화 되는 것을 확인 할 수 있다 그리고 Install to Workspaces를 클릭
<figure><figcaption>
            <h4>APP 추가#6</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>APP 추가#7</h4>
        </figcaption>
</figure>

TOKEN을 복사 한다.
<figure><figcaption>
            <h4>APP 추가#8</h4>
        </figcaption>
</figure>

APP을 추가 해준다.
<figure><figcaption>
            <h4>APP 추가#9</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>APP 추가#10</h4>
        </figcaption>
</figure>

새로 만든 APP이 나오는 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>APP 추가#11</h4>
        </figcaption>
</figure>
</p>
<p>솔직히 여기 잘 나와 있다. <a href="https://argocd-notifications.readthedocs.io/en/stable/services/slack/" target="_blank" rel="noopener noreffer "><i class="fas fa-link"></i> SLACK APP 등록 </a></p>
<h3 id="52-argo-설정">5.2. ARGO 설정</h3>
<p>ARGO 설정은 별도로 UI에서 제공을 하지 않기 때문에 ConfigMap을 좀 수정 해야 한다. Helm에서 제공을 하긴 하는대 현재는 버그가 있는지 배포가 되지 않아 별도의 방법으로 구성한다.</p>
<p><div class="details admonition example open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-list-ol fa-fw" aria-hidden="true"></i>Slack 연동<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>해당 파일을 다운 로드 받은 후 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">wget -O argo-noty-secret.yaml https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/v1.2.1/manifests/install.yaml
</span></span><span class="line"><span class="cl">wget -O argo-noty-config.yaml https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/v1.2.1/catalog/install.yaml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl apply -f argo-noty-secret.yaml -n argo
</span></span><span class="line"><span class="cl">kubectl apply -f argo-noty-config.yaml -n argo
</span></span></code></pre></td></tr></table>
</div>
</div><p>그리고 secret 과 configmap을 수정한다. 사전에 변경해도 상관은 없다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl edit secret argocd-notifications-secret -n argo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">apiVersion: v1
</span></span><span class="line"><span class="cl">kind: Secret
</span></span><span class="line"><span class="cl">metadata:
</span></span><span class="line"><span class="cl">  name: argocd-notifications-secret
</span></span><span class="line"><span class="cl">stringData:
</span></span><span class="line"><span class="cl">  slack-token: xoxb-xxxxxxxxxx-xxxxxxxxxx-xxxxxxx
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl edit cm argocd-notifications-cm -n argo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">apiVersion: v1
</span></span><span class="line"><span class="cl">kind: ConfigMap
</span></span><span class="line"><span class="cl">metadata:
</span></span><span class="line"><span class="cl">  name: argocd-notifications-cm
</span></span><span class="line"><span class="cl">data:
</span></span><span class="line"><span class="cl">  service.slack: <span class="p">|</span>
</span></span><span class="line"><span class="cl">    <span class="c1">## apiURL: &lt;url&gt;                 # optional URL, e.g. https://example.com/api</span>
</span></span><span class="line"><span class="cl">    token: <span class="nv">$slack</span>-token              <span class="c1"># 위에 secret을 참고 함 </span>
</span></span><span class="line"><span class="cl">    <span class="c1">## username: &lt;override-username&gt; # optional username</span>
</span></span><span class="line"><span class="cl">    <span class="c1">## icon: &lt;override-icon&gt; # optional icon for the message (supports both emoij and url notation)</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
Default Definition 참고. <a href="https://argocd-notifications.readthedocs.io/en/stable/services/slack/" target="_blank" rel="noopener noreffer "><i class="fas fa-link"></i> SLACK으로 보낼 내용 정리 </a></p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Slack 연동<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>테스트를 위해 Application을 배포 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat <span class="s">&lt;&lt; EOF | tee guestbook.yaml
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: argoproj.io/v1alpha1
</span></span></span><span class="line"><span class="cl"><span class="s">kind: Application
</span></span></span><span class="line"><span class="cl"><span class="s">metadata:
</span></span></span><span class="line"><span class="cl"><span class="s">  name: guestbook
</span></span></span><span class="line"><span class="cl"><span class="s">  annotations:
</span></span></span><span class="line"><span class="cl"><span class="s">    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: dk-devops
</span></span></span><span class="line"><span class="cl"><span class="s">    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: dk-devops
</span></span></span><span class="line"><span class="cl"><span class="s">    notifications.argoproj.io/subscribe.on-sync-failed.slack: dk-devops
</span></span></span><span class="line"><span class="cl"><span class="s">    notifications.argoproj.io/subscribe.on-sync-running.slack: dk-devops
</span></span></span><span class="line"><span class="cl"><span class="s">    notifications.argoproj.io/subscribe.on-sync-status-unknown.slack: dev-ops
</span></span></span><span class="line"><span class="cl"><span class="s">    notifications.argoproj.io/subscribe.on-deployed.slack: dk-devops
</span></span></span><span class="line"><span class="cl"><span class="s">    notifications.argoproj.io/subscribe.on-health-degraded.slack: dk-devops
</span></span></span><span class="line"><span class="cl"><span class="s">spec:
</span></span></span><span class="line"><span class="cl"><span class="s">  destination:
</span></span></span><span class="line"><span class="cl"><span class="s">    namespace: default
</span></span></span><span class="line"><span class="cl"><span class="s">    server: https://kubernetes.default.svc
</span></span></span><span class="line"><span class="cl"><span class="s">  project: default
</span></span></span><span class="line"><span class="cl"><span class="s">  source:
</span></span></span><span class="line"><span class="cl"><span class="s">    path: kustomize-guestbook
</span></span></span><span class="line"><span class="cl"><span class="s">    repoURL: https://github.com/argoproj/argocd-example-apps.git
</span></span></span><span class="line"><span class="cl"><span class="s">    targetRevision: HEAD
</span></span></span><span class="line"><span class="cl"><span class="s">  syncPolicy:
</span></span></span><span class="line"><span class="cl"><span class="s">    automated: {}
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p>그럼 아래와 같이 Slack으로 메시지가 오는 것을 확인 할 수 있다.</p>
<figure><figcaption>
            <h4>SLACK 확인</h4>
        </figcaption>
</figure>

<p>또는 UI에서 Application에 Annotation을 설정해서 확인 할 수 있다.
<figure><figcaption>
            <h4>GUI에서 Annotation 설정#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>GUI에서 Annotation 설정#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>GUI에서 Annotation 설정#3</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item>
</channel>
</rss>
