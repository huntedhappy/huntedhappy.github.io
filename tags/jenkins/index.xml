<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>jenkins - Tag - Dokyung&#39;s DevOoOps</title>
        <link>https://huntedhappy.github.io/tags/jenkins/</link>
        <description>jenkins - Tag - Dokyung&#39;s DevOoOps</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>huntedhappy@gmail.com (Dokyung)</managingEditor>
            <webMaster>huntedhappy@gmail.com (Dokyung)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 25 Jun 2023 11:12:22 &#43;0900</lastBuildDate><atom:link href="https://huntedhappy.github.io/tags/jenkins/" rel="self" type="application/rss+xml" /><item>
    <title>The Documentation TAP &amp; JENKINS</title>
    <link>https://huntedhappy.github.io/tap-jenkins/</link>
    <pubDate>Sun, 25 Jun 2023 11:12:22 &#43;0900</pubDate>
    <author>Dokyung</author>
    <guid>https://huntedhappy.github.io/tap-jenkins/</guid>
    <description><![CDATA[<h2 id="out-of-the-box-supply-chain-with-testing-on-jenkins-for-supply-chain-choreographer">Out of the Box Supply Chain with testing on Jenkins for Supply Chain Choreographer</h2>
<p>기본적으로 TAP에서는 TEKTON을 사용하여 Source Testing을 제공 하고 있다. 하지만 별도로 Jenkins를 연동 해서 Source Testing을 진행 해보고 싶어 할 수 도 있을 거 같다.</p>
<p>그래서 TAP에서는 Jenkins와 연동을 제공 하고 있다.</p>
<p><a href="https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.5/tap/scc-ootb-supply-chain-testing-with-jenkins.html" target="_blank" rel="noopener noreffer "><i class="fas fa-link"></i> with jenkins</a></p>
<p>사전구성으로 Build Cluster에 Out of the Box Supply Chain With Testing or Out of the Box Supply Chain With Testing and Scanning로 supply_chain 구성이 필요 하다.</p>
<p>사전에 Jenkins의 정보를 넣기 위해 Secret을 생성 해 준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat <span class="s">&lt;&lt; EOF | kubectl apply -f - -n tap-install
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: v1
</span></span></span><span class="line"><span class="cl"><span class="s">kind: Secret
</span></span></span><span class="line"><span class="cl"><span class="s">metadata:
</span></span></span><span class="line"><span class="cl"><span class="s">  name: MY-SECRET # secret name that will be referenced by the workload
</span></span></span><span class="line"><span class="cl"><span class="s">type: Opaque
</span></span></span><span class="line"><span class="cl"><span class="s">stringData:
</span></span></span><span class="line"><span class="cl"><span class="s">  url: JENKINS-URL # target jenkins instance url
</span></span></span><span class="line"><span class="cl"><span class="s">  username: USERNAME # jenkins username
</span></span></span><span class="line"><span class="cl"><span class="s">  password: PASSWORD # jenkins password
</span></span></span><span class="line"><span class="cl"><span class="s">  ca-cert: (Optional) PEM-CA-CERT # PEM encoded certificate
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>그리고 Out of the Box Jenkins를 사용하기 위해 Jenkin pipeline을 설정이 필요 합니다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | kubectl apply -f -
</span></span></span><span class="line"><span class="cl"><span class="s">---
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: tekton.dev/v1beta1
</span></span></span><span class="line"><span class="cl"><span class="s">kind: Pipeline
</span></span></span><span class="line"><span class="cl"><span class="s">metadata:
</span></span></span><span class="line"><span class="cl"><span class="s">  name: developer-defined-jenkins-tekton-pipeline
</span></span></span><span class="line"><span class="cl"><span class="s">  namespace: developer-namespace
</span></span></span><span class="line"><span class="cl"><span class="s">  labels:
</span></span></span><span class="line"><span class="cl"><span class="s">    #! This label should be provided to the Workload so that
</span></span></span><span class="line"><span class="cl"><span class="s">    #! the supply chain can find this pipeline
</span></span></span><span class="line"><span class="cl"><span class="s">    apps.tanzu.vmware.com/pipeline: jenkins-pipeline
</span></span></span><span class="line"><span class="cl"><span class="s">spec:
</span></span></span><span class="line"><span class="cl"><span class="s">  results:
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: jenkins-job-url   #! To show the job URL on the
</span></span></span><span class="line"><span class="cl"><span class="s">    #! Tanzu Application Platform GUI
</span></span></span><span class="line"><span class="cl"><span class="s">    value: $(tasks.jenkins-task.results.jenkins-job-url)
</span></span></span><span class="line"><span class="cl"><span class="s">  params:
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: source-url        #! Required
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: source-revision   #! Required
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: secret-name       #! Required
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: job-name          #! Required
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: job-params        #! Required
</span></span></span><span class="line"><span class="cl"><span class="s">  tasks:
</span></span></span><span class="line"><span class="cl"><span class="s">  #! Required: Include the built-in task that triggers the
</span></span></span><span class="line"><span class="cl"><span class="s">  #! given job in Jenkins
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: jenkins-task
</span></span></span><span class="line"><span class="cl"><span class="s">    taskRef:
</span></span></span><span class="line"><span class="cl"><span class="s">      name: jenkins-task
</span></span></span><span class="line"><span class="cl"><span class="s">      kind: ClusterTask
</span></span></span><span class="line"><span class="cl"><span class="s">    params:
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: source-url
</span></span></span><span class="line"><span class="cl"><span class="s">        value: $(params.source-url)
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: source-revision
</span></span></span><span class="line"><span class="cl"><span class="s">        value: $(params.source-revision)
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: secret-name
</span></span></span><span class="line"><span class="cl"><span class="s">        value: $(params.secret-name)
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: job-name
</span></span></span><span class="line"><span class="cl"><span class="s">        value: $(params.job-name)
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: job-params
</span></span></span><span class="line"><span class="cl"><span class="s">        value: $(params.job-params)
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>Tekton pipeline은 아래와 같이 이루어 져 있다.</p>
<p>개발자는 아래와 같이 매개변수를 사용하여 Tekton pipeline을 생성 해야 합니다.</p>
<ul>
<li>source-url, required: 테스트 중인 모든 소스 코드가 포함된 소스 형상관리의 주소를 작성</li>
<li>source-revision, required: Branch명을 넣어 주면 된다.</li>
<li>secret-name, required: Jenkins의 사용자 이름, 암호, 인증서(선택사항)가 포함된 Secret Name</li>
<li>job-name, required: Jenkins에 설정한 Pipeline의 이름과 일치</li>
<li>job-params, required: Workload에 작성 한 JSON 문자열로 인코딩된 키-값 쌍 목록
** 여기에 작성 한 값이 JENKINS에 전달해야 되는거 같은대 안되는 거 같다. 개인적인 생각. 이렇게 동작하라고 사용 하는거 같은대.. 실제로 동작하지 않아 보임.
Tasks:</li>
<li>jenkins-task, required: 설정된 ClusterTask중 Jenkins작업을 트리거 하기 위해 실행, kubeclt get clustertask로 이름을 확인 할 수 있다.</li>
</ul>
<p>그리고 아래와 같이 Jenkinsfile을 생성 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | kubectl apply -f -
</span></span></span><span class="line"><span class="cl"><span class="s">#!/bin/env groovy
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">pipeline {
</span></span></span><span class="line"><span class="cl"><span class="s">  agent {
</span></span></span><span class="line"><span class="cl"><span class="s">    // Use an agent that is appropriate 
</span></span></span><span class="line"><span class="cl"><span class="s">    // for your Jenkins installation. 
</span></span></span><span class="line"><span class="cl"><span class="s">    // This is only an example
</span></span></span><span class="line"><span class="cl"><span class="s">    kubernetes { 
</span></span></span><span class="line"><span class="cl"><span class="s">      label &#39;maven&#39;
</span></span></span><span class="line"><span class="cl"><span class="s">    }
</span></span></span><span class="line"><span class="cl"><span class="s">  }
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">  stages {
</span></span></span><span class="line"><span class="cl"><span class="s">    stage(&#39;Checkout code&#39;) {
</span></span></span><span class="line"><span class="cl"><span class="s">      steps {
</span></span></span><span class="line"><span class="cl"><span class="s">        script {
</span></span></span><span class="line"><span class="cl"><span class="s">          sourceUrl = params.SOURCE_REVISION
</span></span></span><span class="line"><span class="cl"><span class="s">          indexSlash = sourceUrl.indexOf(&#34;/&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s">          revision = sourceUrl.substring(indexSlash + 1)
</span></span></span><span class="line"><span class="cl"><span class="s">        }
</span></span></span><span class="line"><span class="cl"><span class="s">        sh &#34;git clone ${params.GIT_URL} target&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">        dir(&#34;target&#34;) {
</span></span></span><span class="line"><span class="cl"><span class="s">          sh &#34;git checkout ${revision}&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">        }
</span></span></span><span class="line"><span class="cl"><span class="s">      }
</span></span></span><span class="line"><span class="cl"><span class="s">    }
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">    stage(&#39;Maven test&#39;) {
</span></span></span><span class="line"><span class="cl"><span class="s">      steps {
</span></span></span><span class="line"><span class="cl"><span class="s">        container(&#39;maven&#39;) {
</span></span></span><span class="line"><span class="cl"><span class="s">          dir(&#34;target&#34;) {
</span></span></span><span class="line"><span class="cl"><span class="s">            // Example tests with maven
</span></span></span><span class="line"><span class="cl"><span class="s">            sh &#34;mvn clean test --no-transfer-progress&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">          }
</span></span></span><span class="line"><span class="cl"><span class="s">        }
</span></span></span><span class="line"><span class="cl"><span class="s">      }
</span></span></span><span class="line"><span class="cl"><span class="s">    }
</span></span></span><span class="line"><span class="cl"><span class="s">  }
</span></span></span><span class="line"><span class="cl"><span class="s">}
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>다음 필드는 Jenkins 작업 정의에도 필요합니다.</p>
<ul>
<li>SOURCE_REVISION string</li>
<li>GIT_URL string</li>
</ul>
<p>Jenkins에 파라미터를 제공하기 위해 GIT_URL을 작성 해준다.</p>
<p>** 현재 1.5.2 까지 GIT_URL 및 GIT_REVISION이 JENKINS로 전달 되지 않는 것으로 보인다. 하여 Jenkins파일에 파라미터를 추가를 해주어야 한다.</p>
<p>이렇게 설정 한 후에 Workload를 실행을 하게 되면 실제적으로 Jenkins를 통해 소스테스트가 이루어지는 것을 확인 할 수 있다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat <span class="s">&lt;&lt; &#39;EOF&#39; | kubectl -n tap-install apply -f - --context $b
</span></span></span><span class="line"><span class="cl"><span class="s">kind: Workload
</span></span></span><span class="line"><span class="cl"><span class="s">metadata:
</span></span></span><span class="line"><span class="cl"><span class="s">  labels:
</span></span></span><span class="line"><span class="cl"><span class="s">    app.kubernetes.io/part-of: jenkins-tanzu-java-web-app
</span></span></span><span class="line"><span class="cl"><span class="s">    apps.tanzu.vmware.com/has-tests: &#34;true&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">    apps.tanzu.vmware.com/workload-type: web
</span></span></span><span class="line"><span class="cl"><span class="s">    tanzu.app.live.view: &#34;true&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">    tanzu.app.live.view.application.name: jenkins-tanzu-java-web-app
</span></span></span><span class="line"><span class="cl"><span class="s">  name: jenkins-tanzu-java-web-app
</span></span></span><span class="line"><span class="cl"><span class="s">spec:
</span></span></span><span class="line"><span class="cl"><span class="s">  build:
</span></span></span><span class="line"><span class="cl"><span class="s">    env:
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: BP_JVM_VERSION
</span></span></span><span class="line"><span class="cl"><span class="s">      value: 17.*
</span></span></span><span class="line"><span class="cl"><span class="s">  env:
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: JAVA_TOOL_OPTIONS
</span></span></span><span class="line"><span class="cl"><span class="s">    value: &gt;-
</span></span></span><span class="line"><span class="cl"><span class="s">      -Dserver.port=8080
</span></span></span><span class="line"><span class="cl"><span class="s">      -XX:MaxMetaspaceSize=589794K
</span></span></span><span class="line"><span class="cl"><span class="s">      -XX:MaxDirectMemorySize=400M
</span></span></span><span class="line"><span class="cl"><span class="s">      -XX:ReservedCodeCacheSize=240M
</span></span></span><span class="line"><span class="cl"><span class="s">      -Dmanagement.endpoints.web.exposure.include=*
</span></span></span><span class="line"><span class="cl"><span class="s">      -Dmanagement.endpoint.health.show-details=always
</span></span></span><span class="line"><span class="cl"><span class="s">  params:
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: testing_pipeline_matching_labels
</span></span></span><span class="line"><span class="cl"><span class="s">    value:
</span></span></span><span class="line"><span class="cl"><span class="s">      apps.tanzu.vmware.com/pipeline: jenkins-pipeline
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: testing_pipeline_params
</span></span></span><span class="line"><span class="cl"><span class="s">    value:
</span></span></span><span class="line"><span class="cl"><span class="s">      job-name: tap-jenkins
</span></span></span><span class="line"><span class="cl"><span class="s">#      job-params: &#34;[{\&#34;name\&#34;:\&#34;GIT_URL\&#34;, \&#34;value\&#34;:\&#34;https://gitlab.huntedhappy.kro.kr/tanzu/jenkins-tanzu-java-web-app/\&#34;}, {\&#34;name\&#34;:\&#34;GIT_BRANCH\&#34;, \&#34;value\&#34;:\&#34;main\&#34;}]&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">      job-params:
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: GIT_URL
</span></span></span><span class="line"><span class="cl"><span class="s">        value: https://gitlab.huntedhappy.kro.kr/tanzu/jenkins-tanzu-java-web-app
</span></span></span><span class="line"><span class="cl"><span class="s">        name: GIT_BRANCH
</span></span></span><span class="line"><span class="cl"><span class="s">        value: main
</span></span></span><span class="line"><span class="cl"><span class="s">      secret-name: jenkins
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: scanning_source_policy
</span></span></span><span class="line"><span class="cl"><span class="s">    value: sample-scan-policy
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: scanning_image_policy
</span></span></span><span class="line"><span class="cl"><span class="s">    value: sample-scan-policy
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_server_address
</span></span></span><span class="line"><span class="cl"><span class="s">    value: https://gitlab.huntedhappy.kro.kr
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_repository_name
</span></span></span><span class="line"><span class="cl"><span class="s">    value: jenkins-tanzu-java-web-app-gitops
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_repository_owner
</span></span></span><span class="line"><span class="cl"><span class="s">    value: tanzu
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_branch
</span></span></span><span class="line"><span class="cl"><span class="s">    value: main
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_user_name
</span></span></span><span class="line"><span class="cl"><span class="s">    value: tanzu
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_user_email
</span></span></span><span class="line"><span class="cl"><span class="s">    value: my1208@openbase.co.kr
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_commit_message
</span></span></span><span class="line"><span class="cl"><span class="s">    value: test_giops
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_ssh_secret
</span></span></span><span class="line"><span class="cl"><span class="s">    value: git-https
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_server_kind
</span></span></span><span class="line"><span class="cl"><span class="s">    value: gitlab
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_commit_branch
</span></span></span><span class="line"><span class="cl"><span class="s">    value: &#34;staging&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_pull_request_title
</span></span></span><span class="line"><span class="cl"><span class="s">    value: &#34;ready for review&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: gitops_pull_request_body
</span></span></span><span class="line"><span class="cl"><span class="s">    value: &#34;generated by supply chain&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: debug
</span></span></span><span class="line"><span class="cl"><span class="s">    value: &#34;true&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">  resources:
</span></span></span><span class="line"><span class="cl"><span class="s">    requests:
</span></span></span><span class="line"><span class="cl"><span class="s">      cpu: 300m
</span></span></span><span class="line"><span class="cl"><span class="s">      memory: 500Mi
</span></span></span><span class="line"><span class="cl"><span class="s">  source:
</span></span></span><span class="line"><span class="cl"><span class="s">    git:
</span></span></span><span class="line"><span class="cl"><span class="s">      ref:
</span></span></span><span class="line"><span class="cl"><span class="s">       branch: main
</span></span></span><span class="line"><span class="cl"><span class="s">      url: https://gitlab.huntedhappy.kro.kr/tanzu/jenkins-tanzu-java-web-app
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="result">RESULT</h2>
<p><figure><figcaption>
            <h4>Jenkins에서 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>TAP에서 Jenkins를 통해 배포 확인</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item>
<item>
    <title>The Documentation SupplyChain on TAP</title>
    <link>https://huntedhappy.github.io/cicd/</link>
    <pubDate>Fri, 24 Mar 2023 19:46:06 &#43;0900</pubDate>
    <author>Dokyung</author>
    <guid>https://huntedhappy.github.io/cicd/</guid>
    <description><![CDATA[<h2 id="tanzu-supplychain">TANZU SUPPLYCHAIN</h2>
<blockquote>
<p>아래 내용은 기본적으로 VMWARE의 TAP솔루션을 알고 있다는 가정하에 작성을 하였습니다.</p>
</blockquote>
<p>CI/CD는 (Continuous Integration/Continuous Delivery) 지속적인 통합 및 지속적인 배포입니다.</p>
<p>예를 들어:</p>
<ol>
<li>사용자는 IDE 환경 (IntelliJ or visual studio or eclipse)에서 소스코드를 수정 및 디버깅을 합니다.</li>
<li>이 후에 수정된 소스코드를 GIT에 PUSH를 합니다.</li>
<li>JENKINS에서는 GIT에 수정된 소스를 Webhook 또는 Polling을 통해 변경을 감지 합니다.</li>
<li>JENKINS에서 수정된 코드를 통해 Docker Image를 생성을 합니다.</li>
<li>생성된 Docker Image를 이미지 레포지토리에 업로드 합니다.</li>
<li>Docker Image가 변경이 되었기 때문에 CD를 위해 별도의 GIT Project에 변경된 이미지를 수정 합니다.</li>
<li>CD 솔루션을 통해 (ARGO 등) GIT이 변경이 되었으므로 컨테이너이미지를 업데이트 합니다.</li>
</ol>
<ul>
<li>MANIFEST의 경우 HELM or KUSTOMIZATION or 각각 생성 할 수도 있습니다.</li>
</ul>
<blockquote>
<ol>
<li>JENKINS의 PIPELINE figure 1-1 와 같이 구성 할 수 있습니다.</li>
<li>SLACK을 연동 후 원하는 문자로 알림을 받을 수 있습니다. figure 1-2</li>
</ol>
</blockquote>
<figure><figcaption>
            <h4>1-1 JENKINS PIPELINE</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>1-2 SLACK ALERT</h4>
        </figcaption>
</figure>

<p>위와 같이 JENKINS와 ARGO 를 통해 CI/CD를 구성 할 수 있습니다. 하지만 각각 구성하기 위해서는 JENKINS 그리고 ARGO의 대해서도 이해가 필요 합니다. 또한 K8S에 배포를 하기 위해서는 MANIFEST의 대해서도 이해가 필요 합니다. 가령 Deployment, statfulset, ingress 등등의 대해서도, 이해가 필요 하며 HELM 또는 KUSTOMIZAION을 사용한다면 해당 오픈소스의 대해서도 이해가 필요 합니다.</p>
<p>TANZU APPLICATION PLATFORM은 여러 이해가 필요 한부분을 workload.yaml을 구성하면 SUPPLYCHAIN을 통해 CI/CD 구성을 사용자가 각각 구성 할 필요 없이 제공을 하고 있습니다.</p>
<p><a href="https://huntedhappy.github.io/tanzu-application-platform/" target="_blank" rel="noopener noreffer "><i class="fas fa-link"></i> TANZU APPLICATION PLATFORM?</a></p>
<p><a href="https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/overview.html" target="_blank" rel="noopener noreffer "><i class="fas fa-link"></i> VMWARE TANZU TAP</a></p>
<figure><figcaption>
            <h4>1-3 SUPPLYCHAIN</h4>
        </figcaption>
</figure>

<p>기본적으로 하나의 클러스터에 3가지중 하나의 SUPPLYCHAIN을 제공 하고 있습니다. DEFULAT의 경우 위의 설명 드린 대로 사용자는 workload.yaml을 적절하게 작성을 하게 되면 CI/CD가 동작 합니다.</p>
<p>아래 그림과 같이 workload.yaml 실행을 통해 supplychain이 순차적으로 동작을 하게 됩니다.
<figure><figcaption>
            <h4>1-4 SUPPLYCHAIN</h4>
        </figcaption>
</figure>
</p>
<p>GUI에서 확인을 해보면 아래와 같습니다.
<figure><figcaption>
            <h4>1-5 SUPPLYCHAIN</h4>
        </figcaption>
</figure>
</p>
<p>그리고 두번째의 경우는 추가적으로 TEKTON을 통해 소스코드를 테스팅 할 수 있습니다.
그리고 마지막의 경우는 GRYPE을 통해 소스 및 이미지에 보안 취약점이 있는지 확인을 합니다.</p>
<p>GUI에서 확인을 해보면 아래와 같이 취약점에 대해서 확인 할 수 있습니다.
<figure><figcaption>
            <h4>1-6 SUPPLYCHAIN</h4>
        </figcaption>
</figure>
</p>
<blockquote>
<p>하지만 위에서 설명 드린 대로 하나의 클러스터에는 3가지중 하나만 사용을 할 수 있습니다. 추가적인 supplychain을 구성 하고 싶을수도 있을 것입니다. 동일한 서비스의 대해서 빠르게 개발을 위해 BASIC으로 구성을 하고 싶을 것이며, QA/STAGING은 소스/이미지에 보안취약점이 있는지 잘 생성을 했는지 확인을 하고 싶을 것입니다. 물론 클러스터를 분리해서 구성 할 수도 있을 것입니다. 하지만 리소스 부족으로 분리를 할 수 없을 경우 하나의 클러스터에 모두 구성이 필요할수도 있을수 있습니다. 만약 그런 상황이 발생하면 3개중에 하나의 supplychain만 사용이 가능하기 때문에 한가지를 선택 해야 합니다. 그렇기 때문에 supplychain을 추가 하는 방법이 필요 할 수 있습니다.</p>
</blockquote>
<p>아래와 같이 기본적으로 제공 하고 있습니다.
<figure><figcaption>
            <h4>1-7 SUPPLYCHAIN</h4>
        </figcaption>
</figure>
</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>SUPPLYCHAIN ADD<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat <span class="s">&lt;&lt; &#39;EOF&#39; &gt; basic_supply_chain.yaml
</span></span></span><span class="line"><span class="cl"><span class="s">#@ load(&#34;@ytt:data&#34;, &#34;data&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s">#@ load(&#34;@ytt:assert&#34;, &#34;assert&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">#@ data.values.registry.server or assert.fail(&#34;missing registry.server&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s">#@ data.values.registry.repository or assert.fail(&#34;missing registry.repository&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">---
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: carto.run/v1alpha1
</span></span></span><span class="line"><span class="cl"><span class="s">kind: ClusterSupplyChain
</span></span></span><span class="line"><span class="cl"><span class="s">metadata:
</span></span></span><span class="line"><span class="cl"><span class="s">  name: source-to-url-with-custom-support
</span></span></span><span class="line"><span class="cl"><span class="s">spec:
</span></span></span><span class="line"><span class="cl"><span class="s">  resources:
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: source-provider
</span></span></span><span class="line"><span class="cl"><span class="s">    params:
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: serviceAccount
</span></span></span><span class="line"><span class="cl"><span class="s">        value: #@ data.values.service_account
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: gitImplementation
</span></span></span><span class="line"><span class="cl"><span class="s">        value: #@ data.values.git_implementation
</span></span></span><span class="line"><span class="cl"><span class="s">    templateRef:
</span></span></span><span class="line"><span class="cl"><span class="s">      kind: ClusterSourceTemplate
</span></span></span><span class="line"><span class="cl"><span class="s">      name: source-template
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: image-provider
</span></span></span><span class="line"><span class="cl"><span class="s">    params:
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: serviceAccount
</span></span></span><span class="line"><span class="cl"><span class="s">      value: #@ data.values.service_account
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: registry
</span></span></span><span class="line"><span class="cl"><span class="s">      value:
</span></span></span><span class="line"><span class="cl"><span class="s">        ca_cert_data: &#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">        repository: #@ data.values.registry.repository
</span></span></span><span class="line"><span class="cl"><span class="s">        server: #@ data.values.registry.server
</span></span></span><span class="line"><span class="cl"><span class="s">    - default: default
</span></span></span><span class="line"><span class="cl"><span class="s">      name: clusterBuilder
</span></span></span><span class="line"><span class="cl"><span class="s">    - default: ./Dockerfile
</span></span></span><span class="line"><span class="cl"><span class="s">      name: dockerfile
</span></span></span><span class="line"><span class="cl"><span class="s">    - default: ./
</span></span></span><span class="line"><span class="cl"><span class="s">      name: docker_build_context
</span></span></span><span class="line"><span class="cl"><span class="s">    sources:
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: source
</span></span></span><span class="line"><span class="cl"><span class="s">      resource: source-provider
</span></span></span><span class="line"><span class="cl"><span class="s">    templateRef:
</span></span></span><span class="line"><span class="cl"><span class="s">      kind: ClusterImageTemplate
</span></span></span><span class="line"><span class="cl"><span class="s">      options:
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: kpack-template
</span></span></span><span class="line"><span class="cl"><span class="s">        selector:
</span></span></span><span class="line"><span class="cl"><span class="s">          matchFields:
</span></span></span><span class="line"><span class="cl"><span class="s">          - key: spec.params[?(@.name==&#34;dockerfile&#34;)]
</span></span></span><span class="line"><span class="cl"><span class="s">            operator: DoesNotExist
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: kaniko-template
</span></span></span><span class="line"><span class="cl"><span class="s">        selector:
</span></span></span><span class="line"><span class="cl"><span class="s">          matchFields:
</span></span></span><span class="line"><span class="cl"><span class="s">          - key: spec.params[?(@.name==&#34;dockerfile&#34;)]
</span></span></span><span class="line"><span class="cl"><span class="s">            operator: Exists
</span></span></span><span class="line"><span class="cl"><span class="s">  - images:
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: image
</span></span></span><span class="line"><span class="cl"><span class="s">      resource: image-provider
</span></span></span><span class="line"><span class="cl"><span class="s">    name: config-provider
</span></span></span><span class="line"><span class="cl"><span class="s">    params:
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: serviceAccount
</span></span></span><span class="line"><span class="cl"><span class="s">      value: #@ data.values.service_account
</span></span></span><span class="line"><span class="cl"><span class="s">    templateRef:
</span></span></span><span class="line"><span class="cl"><span class="s">      kind: ClusterConfigTemplate
</span></span></span><span class="line"><span class="cl"><span class="s">      name: convention-template
</span></span></span><span class="line"><span class="cl"><span class="s">  - configs:
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: config
</span></span></span><span class="line"><span class="cl"><span class="s">      resource: config-provider
</span></span></span><span class="line"><span class="cl"><span class="s">    name: app-config
</span></span></span><span class="line"><span class="cl"><span class="s">    templateRef:
</span></span></span><span class="line"><span class="cl"><span class="s">      kind: ClusterConfigTemplate
</span></span></span><span class="line"><span class="cl"><span class="s">      options:
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: config-template
</span></span></span><span class="line"><span class="cl"><span class="s">        selector:
</span></span></span><span class="line"><span class="cl"><span class="s">          matchLabels:
</span></span></span><span class="line"><span class="cl"><span class="s">            apps.tanzu.vmware.com/workload-type: web
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: server-template
</span></span></span><span class="line"><span class="cl"><span class="s">        selector:
</span></span></span><span class="line"><span class="cl"><span class="s">          matchLabels:
</span></span></span><span class="line"><span class="cl"><span class="s">            apps.tanzu.vmware.com/workload-type: server
</span></span></span><span class="line"><span class="cl"><span class="s">      - name: worker-template
</span></span></span><span class="line"><span class="cl"><span class="s">        selector:
</span></span></span><span class="line"><span class="cl"><span class="s">          matchLabels:
</span></span></span><span class="line"><span class="cl"><span class="s">            apps.tanzu.vmware.com/workload-type: worker
</span></span></span><span class="line"><span class="cl"><span class="s">  - configs:
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: app_def
</span></span></span><span class="line"><span class="cl"><span class="s">      resource: app-config
</span></span></span><span class="line"><span class="cl"><span class="s">    name: service-bindings
</span></span></span><span class="line"><span class="cl"><span class="s">    templateRef:
</span></span></span><span class="line"><span class="cl"><span class="s">      kind: ClusterConfigTemplate
</span></span></span><span class="line"><span class="cl"><span class="s">      name: service-bindings
</span></span></span><span class="line"><span class="cl"><span class="s">  - configs:
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: app_def
</span></span></span><span class="line"><span class="cl"><span class="s">      resource: service-bindings
</span></span></span><span class="line"><span class="cl"><span class="s">    name: api-descriptors
</span></span></span><span class="line"><span class="cl"><span class="s">    templateRef:
</span></span></span><span class="line"><span class="cl"><span class="s">      kind: ClusterConfigTemplate
</span></span></span><span class="line"><span class="cl"><span class="s">      name: api-descriptors
</span></span></span><span class="line"><span class="cl"><span class="s">  - configs:
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: config
</span></span></span><span class="line"><span class="cl"><span class="s">      resource: api-descriptors
</span></span></span><span class="line"><span class="cl"><span class="s">    name: config-writer
</span></span></span><span class="line"><span class="cl"><span class="s">    params:
</span></span></span><span class="line"><span class="cl"><span class="s">    - default: default
</span></span></span><span class="line"><span class="cl"><span class="s">      name: serviceAccount
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: registry
</span></span></span><span class="line"><span class="cl"><span class="s">      value:
</span></span></span><span class="line"><span class="cl"><span class="s">        ca_cert_data: &#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">        repository: #@ data.values.registry.repository
</span></span></span><span class="line"><span class="cl"><span class="s">        server: #@ data.values.registry.server
</span></span></span><span class="line"><span class="cl"><span class="s">    templateRef:
</span></span></span><span class="line"><span class="cl"><span class="s">      kind: ClusterTemplate
</span></span></span><span class="line"><span class="cl"><span class="s">      name: config-writer-template
</span></span></span><span class="line"><span class="cl"><span class="s">  - name: deliverable
</span></span></span><span class="line"><span class="cl"><span class="s">    params:
</span></span></span><span class="line"><span class="cl"><span class="s">    - name: registry
</span></span></span><span class="line"><span class="cl"><span class="s">      value:
</span></span></span><span class="line"><span class="cl"><span class="s">        ca_cert_data: &#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">        repository: #@ data.values.registry.repository
</span></span></span><span class="line"><span class="cl"><span class="s">        server: #@ data.values.registry.server
</span></span></span><span class="line"><span class="cl"><span class="s">    templateRef:
</span></span></span><span class="line"><span class="cl"><span class="s">      kind: ClusterTemplate
</span></span></span><span class="line"><span class="cl"><span class="s">      name: external-deliverable-template
</span></span></span><span class="line"><span class="cl"><span class="s">  selector:
</span></span></span><span class="line"><span class="cl"><span class="s">    apps.tanzu.vmware.com/custom: &#34;true&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">  selectorMatchExpressions:
</span></span></span><span class="line"><span class="cl"><span class="s">  - key: apps.tanzu.vmware.com/workload-type
</span></span></span><span class="line"><span class="cl"><span class="s">    operator: In
</span></span></span><span class="line"><span class="cl"><span class="s">    values:
</span></span></span><span class="line"><span class="cl"><span class="s">    - web
</span></span></span><span class="line"><span class="cl"><span class="s">    - server
</span></span></span><span class="line"><span class="cl"><span class="s">    - worker
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> ytt -f basic_supply_chain.yaml -v registry.repository<span class="o">=</span>tap/supply_chain -v registry.server<span class="o">=</span>harbor-infra.huntedhappy.kro.kr -v <span class="nv">service_account</span><span class="o">=</span>default -v <span class="nv">git_implementation</span><span class="o">=</span>go-git <span class="p">|</span> kubectl apply -f -
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p>위와 같이 추가하게 되면 별도로 SUPPLYCHAIN이 추가 된 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>1-8 SUPPLYCHAIN</h4>
        </figcaption>
</figure>
</p>
<p>그리고 아래와 같이 다른 workload.yaml과는 다른 SUPPLYCHAIN이 등록 된 것을 확인 할 수 있습니다.
<figure><figcaption>
            <h4>1-9 SUPPLYCHAIN</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item>
<item>
    <title>The Documentation Jenkins</title>
    <link>https://huntedhappy.github.io/jenkins/</link>
    <pubDate>Fri, 31 Dec 2021 20:49:23 &#43;0900</pubDate>
    <author>Dokyung</author>
    <guid>https://huntedhappy.github.io/jenkins/</guid>
    <description><![CDATA[<h2 id="jenkins">Jenkins?</h2>
<p>Jenkins는 아무래도 많이 사용하는 CI/CD 일것이다. 우선 컨테이너 환경에서 CI를 구성하기 위해서 Jenkins를 구성 하였고, 클러스터가 많은 환경에서도 접근을 할 수 있게 (물론 컨테이너로 구성을 해도 되나. 굳이 컨테이너로 구성할 필요성이 있나 싶어 별도의 VM으로 구성)
VM형태로 설치를 하였다.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>CI/CD<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>CI/CD는 애플리케이션 개발 단계를 자동화하여 애플리케이션을 보다 짧은 주기로 고객에게 제공한다.
CI (Continuous Integration) CI를 통해 개발자들은 코드 변경사항을 공유 브랜치로 다시 병합하는 작업을 더욱 수월하게 자주 수행 할 수 있다.
CD (Continuous Delivery || Continuous Deploy) 두용어는 상호 교환적으로 사용됨.</p>
<ul>
<li>Continuous Deliver의 경우 코드 변경 , 병합으로부터 Prodcution에 적합한 빌드를 제공하여 모든 단계에 테스트 및 릴리스를 자동화한다.</li>
<li>Continuous Deploy는 어플리케이션을 프로덕션으로 릴리스 작업을 자동화</li>
</ul></div>
        </div>
    </div>
<figure><figcaption>
            <h4>CICD</h4>
        </figcaption>
</figure>

<p>참고 문헌 <a href="https://www.redhat.com/ko/topics/devops/what-is-ci-cd" target="_blank" rel="noopener noreffer "><i class="fas fa-link"></i> Redhat </a></p>
<h2 id="1-설치">1. 설치</h2>
<div class="details admonition example open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-list-ol fa-fw" aria-hidden="true"></i>Jenkins Install<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>JAVA Install</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">apt update <span class="o">&amp;&amp;</span> apt upgrade 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt search openjdk
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt install openjdk-11-jdk -y
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">java --version
</span></span></code></pre></td></tr></table>
</div>
</div><p>Jenkins Install</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key <span class="p">|</span> sudo apt-key add -
</span></span><span class="line"><span class="cl">sudo sh -c <span class="s1">&#39;echo deb https://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt update -y
</span></span><span class="line"><span class="cl">sudo apt install jenkins -y
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl restart jenkins
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> jenkins
</span></span></code></pre></td></tr></table>
</div>
</div><p>패스워드 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat /var/lib/jenkins/secrets/initialAdminPassword
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h3 id="11-설치-완료">1.1. 설치 완료</h3>
<p><figure><figcaption>
            <h4>접속 화면 #1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>접속 화면 #2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>접속 화면 #3</h4>
        </figcaption>
</figure>
</p>
<h2 id="2-https-설정">2. HTTPS 설정</h2>
<p>내부에서 사용하기 때문에 HTTP로 구성을 해도 되나 보안상 HTTPS를 구성이 필요할 경우가 있을 수 있기 때문에 2가지 경우로 HTTPS 구성의 대해서 설명하고자 하자. 하나는 자체적으로 구성을 하는 것이고 다른 하나는 NGINX를 구성해요 HTTPS를 구성 하는 것이다. 물론 L4를 사용해서 구성 할 수 도 있으나, 굳이 L4 장비까지 사용할 이유가 없으니 간단하게 NGINX를 사용하기로 한다.</p>
<h3 id="21-https-구성">2.1. HTTPS 구성</h3>
<p>인증서 설치, <a href="/jenkins/root.sh" rel=""><i class="far fa-file-archive fa-fw" aria-hidden="true"></i>&nbsp;root.sh</a>.</p>
<div class="details admonition example open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-list-ol fa-fw" aria-hidden="true"></i>Jenkins SSL 구성<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>인증서 생성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">domain</span><span class="o">=</span>jenkins.tkg.io
</span></span></code></pre></td></tr></table>
</div>
</div><p>root.sh에 있는 파일 내용을 복사해서 shell 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">. root.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>인증서 권한 변경</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">chmod <span class="m">700</span> /data/cert
</span></span><span class="line"><span class="cl">chmod <span class="m">600</span> /data/cert/yourdomain.com.cert
</span></span><span class="line"><span class="cl">chmod <span class="m">600</span> /data/cert/yourdomain.com.key
</span></span></code></pre></td></tr></table>
</div>
</div><p>Jenkins 파일 변경</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vi /etc/default/jenkins
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">HTTP_PORT</span><span class="o">=</span><span class="m">8080</span>             <span class="c1">### ---&gt; 이부분을 찾아서 아래 부분을 채워 넣어주자.</span>
</span></span><span class="line"><span class="cl"><span class="nv">HTTP_PORT_DISABLE</span><span class="o">=</span>-1       <span class="c1">### HTTP DISABLE</span>
</span></span><span class="line"><span class="cl"><span class="nv">HTTPS_CERT</span><span class="o">=</span>/data/cert/yourdomain.com.cert      <span class="c1">### 인증서</span>
</span></span><span class="line"><span class="cl"><span class="nv">HTTPS_KEY</span><span class="o">=</span>/data/cert/yourdomain.com.key        <span class="c1">### KEY</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">### args 마지막 줄에 빨간 부분을 채워서 넣어준다.</span>
</span></span><span class="line"><span class="cl"><span class="nv">JENKINS_ARGS</span><span class="o">=</span><span class="s2">&#34;--webroot=/var/cache/</span><span class="nv">$NAME</span><span class="s2">/war --httpPort=</span><span class="nv">$HTTP_PORT</span><span class="s2"> --httpPort=</span><span class="nv">$HTTP_PORT_DISABLE</span><span class="s2"> --httpsPort=</span><span class="nv">$HTTP_PORT</span><span class="s2"> --httpsCertificate=</span><span class="nv">$HTTPS_CERT</span><span class="s2"> --httpsPrivateKey=</span><span class="nv">$HTTPS_KEY</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">### jenkins restart</span>
</span></span><span class="line"><span class="cl">systemctl restart jenkins
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<figure><figcaption>
            <h4>HTTPS 접속 화면 #1</h4>
        </figcaption>
</figure>

<h3 id="22-nginx로-https-구성">2.2. NGINX로 HTTPS 구성</h3>
<p>NGINX를 구성하기 위해 Jenkins 설정은 그냥 HTTP로 구성을 해도 무방하다. 여기서는 위에서 설정을 했기 때문에 별도로 설정을 변경하지 않고했기 때문에 뒷단의 Jenkins를 HTTPS로 그대로 놔둔것이라고 봐도 된다.
만약에 Jenkins Server는 HTTP로 구성을 하려면 그냥 두고 NGINX에서 Reverse Proxy 구성을 하면 된다.
용어가 나와서 헷갈릴수도 있지만. Proxy_pass 부분만 http:// 로 바꾸면 된다.</p>
<p><div class="details admonition example open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-list-ol fa-fw" aria-hidden="true"></i>NGINX PROXY 구성<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>NGINX 가상 서버 구성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vi  /etc/nginx/sites-available/jenkins
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">server <span class="o">{</span>
</span></span><span class="line"><span class="cl">    server_name jenkins.tkg.io<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    location / <span class="o">{</span>
</span></span><span class="line"><span class="cl">        proxy_redirect off<span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_pass_header Server<span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_set_header X-Forwarded-Proto <span class="nv">$scheme</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        proxy_pass https://127.0.0.1:8080/<span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    listen <span class="m">443</span> ssl<span class="p">;</span>
</span></span><span class="line"><span class="cl">    ssl_certificate /data/cert/yourdomain.com.crt<span class="p">;</span>
</span></span><span class="line"><span class="cl">    ssl_certificate_key /data/cert/yourdomain.com.key<span class="p">;</span>
</span></span><span class="line"><span class="cl">    ssl_client_certificate /data/cert/ca.crt<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">server <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="nv">$host</span> <span class="o">=</span> jenkins.tkg.io<span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="m">301</span> https://<span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="c1"># managed by Certbot</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    listen 80<span class="p">;</span>
</span></span><span class="line"><span class="cl">    server_name jenkins.tkg.io<span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> 404<span class="p">;</span> <span class="c1"># managed by Certbot</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>symbolic link 연결</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> <span class="nb">cd</span> /etc/nginx/sites-enabled
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> ln -s  /etc/nginx/sites-available/jenkins .
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<figure><figcaption>
            <h4>NGINX로 연결 후 HTTPS 접속 화면 #1</h4>
        </figcaption>
</figure>
</p>
<h2 id="3-slack-연동">3. SLACK 연동</h2>
<p>SLACK을 연동하여 메시지를 받을 수 있게 구성을 한다.</p>
<h3 id="31-slcak-설정">3.1. SLCAK 설정</h3>
<figure><figcaption>
            <h4>SLACK 접속</h4>
        </figcaption>
</figure>

<p>APP 등록
<figure><figcaption>
            <h4>SLACK APP 추가#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>SLACK APP 추가#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>SLACK APP 추가#3</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>SLACK APP 추가#4</h4>
        </figcaption>
</figure>
</p>
<p>위에 내용까지 설정을 하면 Jenkins를 어떻게 설정하라고 나오는대 좀 오래 되었나보다. 요즘에 변경된 부분의 대해서 설정 하는 방법을 나열한다.</p>
<h3 id="32-jenkins-설정">3.2. JENKINS 설정</h3>
<p><figure><figcaption>
            <h4>Jenkins Slack Plugin 설치#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack Plugin 설치#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack Plugin 설치#3</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack 설정#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack 설정#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack Credentials 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack 설정 테스트</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item>
</channel>
</rss>
