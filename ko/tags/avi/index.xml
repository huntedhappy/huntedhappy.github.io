<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>avi - Tag - Dokyung&#39;s DevOoOps</title>
        <link>https://huntedhappy.github.io/ko/tags/avi/</link>
        <description>avi - Tag - Dokyung&#39;s DevOoOps</description>
        <generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>huntedhappy@gmail.com (Dokyung)</managingEditor>
            <webMaster>huntedhappy@gmail.com (Dokyung)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 05 Apr 2022 21:51:24 &#43;0900</lastBuildDate><atom:link href="https://huntedhappy.github.io/ko/tags/avi/" rel="self" type="application/rss+xml" /><item>
    <title>The Documentation vSphere Tanzu with AVI Load Balancer</title>
    <link>https://huntedhappy.github.io/ko/avi/</link>
    <pubDate>Tue, 05 Apr 2022 21:51:24 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/avi/</guid>
    <description><![CDATA[<h2 id="1-tanzu에서-cluster-servicetype-변경">1. TANZU에서 Cluster ServiceType 변경</h2>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>serviceType<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>ManageMent Cluster로 Context 변경</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">### NodePort 변경</span>
kubectl apply -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: networking.tkg.tanzu.vmware.com/v1alpha1
</span><span class="s">kind: AKODeploymentConfig
</span><span class="s">metadata:
</span><span class="s">  name: nodeport01
</span><span class="s">spec:
</span><span class="s">  adminCredentialRef:
</span><span class="s">    name: avi-controller-credentials
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  certificateAuthorityRef:
</span><span class="s">    name: avi-controller-ca
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  cloudName: Default-Cloud
</span><span class="s">  clusterSelector:
</span><span class="s">    matchLabels:
</span><span class="s">      ako-l7-nodeport-01: &#34;true&#34;
</span><span class="s">  controller: avi.tkg.io
</span><span class="s">  dataNetwork:
</span><span class="s">    cidr: 10.253.127.0/24
</span><span class="s">    name: LS_TKGM_10.253.127.x
</span><span class="s">  extraConfigs:
</span><span class="s">    cniPlugin: antrea
</span><span class="s">    disableStaticRouteSync: false
</span><span class="s">    l4Config:
</span><span class="s">      autoFQDN: disabled
</span><span class="s">    ingress:
</span><span class="s">      defaultIngressController: true
</span><span class="s">      disableIngressClass: false  
</span><span class="s">      nodeNetworkList:
</span><span class="s">        - cidrs:
</span><span class="s">            - 10.253.127.0/24
</span><span class="s">          networkName: LS_TKGM_10.253.127.x
</span><span class="s">      serviceType: NodePort
</span><span class="s">      shardVSSize: SMALL
</span><span class="s">  serviceEngineGroup: Default-Group
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">### ClusterIP 변경</span>
kubectl apply -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: networking.tkg.tanzu.vmware.com/v1alpha1
</span><span class="s">kind: AKODeploymentConfig
</span><span class="s">metadata:
</span><span class="s">  name: clusterip01
</span><span class="s">spec:
</span><span class="s">  adminCredentialRef:
</span><span class="s">    name: avi-controller-credentials
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  certificateAuthorityRef:
</span><span class="s">    name: avi-controller-ca
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  cloudName: Default-Cloud
</span><span class="s">  clusterSelector:
</span><span class="s">    matchLabels:
</span><span class="s">      ako-l7-clusterip-01: &#34;true&#34;
</span><span class="s">  controller: avi.tkg.io
</span><span class="s">  dataNetwork:
</span><span class="s">    cidr: 10.253.127.0/24
</span><span class="s">    name: LS_TKGM_10.253.127.x
</span><span class="s">  extraConfigs:
</span><span class="s">    cniPlugin: antrea
</span><span class="s">    disableStaticRouteSync: false                               # required
</span><span class="s">    l4Config:
</span><span class="s">      autoFQDN: disabled
</span><span class="s">    ingress:
</span><span class="s">      defaultIngressController: true
</span><span class="s">      disableIngressClass: false                                # required
</span><span class="s">      nodeNetworkList:                                          # required
</span><span class="s">        - cidrs:
</span><span class="s">            - 10.253.127.0/24
</span><span class="s">          networkName: LS_TKGM_10.253.127.x
</span><span class="s">      serviceType: ClusterIP                                    # required
</span><span class="s">      shardVSSize: SMALL                                       # required
</span><span class="s">  serviceEngineGroup: Default-Group
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">### NodePortLocal 변경</span>
kubectl apply -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: networking.tkg.tanzu.vmware.com/v1alpha1
</span><span class="s">kind: AKODeploymentConfig
</span><span class="s">metadata:
</span><span class="s">  name: npl-enabled
</span><span class="s">spec:
</span><span class="s">  adminCredentialRef:
</span><span class="s">    name: avi-controller-credentials
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  certificateAuthorityRef:
</span><span class="s">    name: avi-controller-ca
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  cloudName: Default-Cloud
</span><span class="s">  clusterSelector:
</span><span class="s">    matchLabels:
</span><span class="s">      npl-enabled: &#34;true&#34;
</span><span class="s">  controlPlaneNetwork:
</span><span class="s">    cidr: 10.253.127.0/24
</span><span class="s">    name: LS_TKGM_10.253.127.x
</span><span class="s">  controller: avi.tkg.io
</span><span class="s">  dataNetwork:
</span><span class="s">    cidr: 10.253.127.0/24
</span><span class="s">    name: LS_TKGM_10.253.127.x
</span><span class="s">  extraConfigs:
</span><span class="s">    cniPlugin: antrea
</span><span class="s">    disableStaticRouteSync: false                               # required
</span><span class="s">    l4Config:
</span><span class="s">      autoFQDN: disabled
</span><span class="s">    ingress:
</span><span class="s">      defaultIngressController: true
</span><span class="s">      disableIngressClass: false                               
</span><span class="s">      nodeNetworkList:                                          
</span><span class="s">        - cidrs:
</span><span class="s">            - 10.253.127.0/24
</span><span class="s">          networkName: LS_TKGM_10.253.127.x
</span><span class="s">      serviceType: NodePortLocal                                     # required
</span><span class="s">      shardVSSize: SMALL                                       
</span><span class="s">  serviceEngineGroup: Default-Group
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p>NodePort 테스트</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl config use-context <span class="o">{</span>Management Cluster<span class="o">}</span>

kubectl get cluster --show-labels

kubectl label cluster tkgm01-tkc-dev01 ako-l7-nodeport-01<span class="o">=</span><span class="nb">true</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl config use-context <span class="o">{</span>TKC<span class="o">}</span>

kubectl create deploy hello --image<span class="o">=</span>paulbouwer/hello-kubernetes:1.7 --replicas<span class="o">=</span><span class="m">3</span> --port<span class="o">=</span><span class="m">8080</span>

kubectl expose deployment hello --type<span class="o">=</span>NodePort --port<span class="o">=</span><span class="m">80</span> --target-port<span class="o">=</span><span class="m">8080</span>

kubectl create ingress hello --class<span class="o">=</span>avi-lb --rule<span class="o">=</span><span class="s2">&#34;hello.avi.tkg.io/=hello:8080&#34;</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>접속 화면</h4>
        </figcaption>
</figure>

<p>NodePort로 구성이 되어 있기 때문에 아래와 같이 NodeIP와 30000번대의 Port로 서버풀이 지정되는 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>AVI VS 상태 확인</h4>
        </figcaption>
</figure>
</p>
<p>ClusterIP 테스트</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl config use-context <span class="o">{</span>Management Cluster<span class="o">}</span>

kubectl get cluster --show-labels

kubectl label cluster tkgm01-tkc-dev01 ako-l7-clusterip-01<span class="o">=</span><span class="nb">true</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl config use-context <span class="o">{</span>TKC<span class="o">}</span>

kubectl get cm avi-k8s-config -n avi-system -o <span class="nv">jsonpath</span><span class="o">={</span>.data.serviceType<span class="o">}</span>

kubectl create deploy hello --image<span class="o">=</span>paulbouwer/hello-kubernetes:1.7 --replicas<span class="o">=</span><span class="m">3</span> --port<span class="o">=</span><span class="m">8080</span>

kubectl expose deployment hello --type<span class="o">=</span>ClusterIP --port<span class="o">=</span><span class="m">80</span> --target-port<span class="o">=</span><span class="m">8080</span>

kubectl create ingress hello --class<span class="o">=</span>avi-lb --rule<span class="o">=</span><span class="s2">&#34;hello.avi.tkg.io/=hello:8080&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>ServiceType 변경 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>AVI Routing 확인</h4>
        </figcaption>
</figure>

ClusterIP로 구성이 되어 있기 때문에 아래와 같이 실제 Pod와 실제 Port로 서버풀이 지정되는 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>AVI VS 상태 확인</h4>
        </figcaption>
</figure>
</p>
<h2 id="2-avi-infra-settings">2. AVI Infra Settings</h2>
<p>만약에 하나의 클러스터에서 VS별 SE-GROUP을 분리 하거나, 또는 VS의 IP 대역을 분리 하고 싶을 경우 AVIINFRASETTING을 사용하여 구성을 할 수 있다.
<figure><figcaption>
            <h4>구성</h4>
        </figcaption>
</figure>
</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: ako.vmware.com/v1alpha1
</span><span class="s">kind: AviInfraSetting
</span><span class="s">metadata:
</span><span class="s">  name: other-infra
</span><span class="s">spec:
</span><span class="s">  seGroup:
</span><span class="s">    name: Default-Group
</span><span class="s">  network:
</span><span class="s">    vipNetworks:
</span><span class="s">      - networkName: pg-dk-10.253.107.x
</span><span class="s">        cidr: 10.253.107.0/24
</span><span class="s">    enableRhi: false
</span><span class="s">  l7Settings:
</span><span class="s">    shardSize: MEDIUM
</span><span class="s">EOF</span>

kubectl apply -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: networking.k8s.io/v1
</span><span class="s">kind: IngressClass
</span><span class="s">metadata:
</span><span class="s">  name: other-infra
</span><span class="s">spec:
</span><span class="s">  controller: ako.vmware.com/avi-lb
</span><span class="s">  parameters:
</span><span class="s">    apiGroup: ako.vmware.com
</span><span class="s">    kind: AviInfraSetting
</span><span class="s">    name: other-infra
</span><span class="s">EOF</span>

</code></pre></td></tr></table>
</div>
</div><p>테스트</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create deploy hello --image<span class="o">=</span>paulbouwer/hello-kubernetes:1.7 --replicas<span class="o">=</span><span class="m">3</span> --port<span class="o">=</span><span class="m">8080</span>

kubectl expose deployment hello --type<span class="o">=</span>ClusterIP --port<span class="o">=</span><span class="m">80</span> --target-port<span class="o">=</span><span class="m">8080</span>

kubectl create ingress hello --class<span class="o">=</span>other-infra --rule<span class="o">=</span><span class="s2">&#34;hello.avi.tkg.io/=hello:8080&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>VS IP 변경 전</h4>
        </figcaption>
</figure>

아래와 같이 VS IP가 변경 된 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>VS IP 변경 후</h4>
        </figcaption>
</figure>
</p>
<p>기존의 하나의 SE그룹에 모두 VS가 구성이 되어 있다.
<figure><figcaption>
            <h4>SE Group 생성</h4>
        </figcaption>
</figure>
</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## SEGROUP을 변경</span>
kubectl patch aviinfrasettings other-infra --type <span class="s1">&#39;json&#39;</span> -p <span class="s1">&#39;[{&#34;op&#34;:&#34;replace&#34;,&#34;path&#34;:&#34;/spec/seGroup/name&#34;,&#34;value&#34;:&#34;tkgm01&#34;}]&#39;</span>

kubectl patch ing hello --patch <span class="s1">&#39;{&#34;spec&#34;: {&#34;ingressClassName&#34;: &#34;other-infra&#34;}}&#39;</span>

</code></pre></td></tr></table>
</div>
</div><p>현재는 SE가 기존의 
<figure><figcaption>
            <h4>기존 SE 배포 전</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>다른 SE 그룹으로 변경 후 </h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>다른 SE 그룹으로 변경 후 </h4>
        </figcaption>
</figure>
</p>
<p>위와 같은 방법으로 동일한 클러스터 내에서 FQDN별로 SE-GROUP 또는 IP 대역을 분리 할 수 있다.</p>
<h2 id="3-avi-autoscalling">3. AVI AutoScalling</h2>
<figure><figcaption>
            <h4>AVI Autoscalling 기본 동작 </h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">switchto tenant admin
switchto cloud Default-Cloud
auto_rebalance
save
</code></pre></td></tr></table>
</div>
</div><h2 id="4-bgp-연동-후-rhiroute-health-injection">4. BGP 연동 후 Rhi(Route Health Injection)</h2>
<p>BGP ECMP를 구성 하여 SE를 탄력적으로 확장을 할 수 있습니다.</p>
]]></description>
</item><item>
    <title>The Documentation K8s</title>
    <link>https://huntedhappy.github.io/ko/k8s/</link>
    <pubDate>Sat, 08 Jan 2022 14:32:33 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/k8s/</guid>
    <description><![CDATA[<p>아래 내용을 작성 하는 이유
같이 일했던 동료가 다른 곳으로 회사를 이직 하고 나서 컨테이너를 해야 되는거 같았다. 같이 일을 했기 때문에 L4 / L7을 잘 했던 친구 였다. 그런대 뜬금없이 L4를 연동 하면 어떻게 컨테이너로 트래픽을 전달하냐라고 물어본적이 있었다. 
그래서 혹시 모르는 사람을 위해서 간략하게 적어 내려 간다.</p>
<h2 id="1-service-type">1. Service Type</h2>
<p>컨테이너를 하기 위해서는 우선 Deploy , STS등으로 Pod를 생성한다. 그럼 일반적으로 테스트를 하기 위해서 아래와 같이 명령어를 칠 것이다.</p>
<ul>
<li>kubectl create deploy nginx &ndash;image=nginx -n nginx</li>
</ul>
<p>그러면 deploy를 통해 pod가 생성 된 것을 확인 할 수 있다. 그리고 나서 서비스를 연동 할 것이다. 그럼 아래와 같은 명령어를 칠 것이다.</p>
<ul>
<li>kubectl expose deploy nginx &ndash;port=80 &ndash;target-port=80 &ndash;type=ClusterIP -n nginx</li>
</ul>
<p>ClusterIP는 그럼 아래와 같은 정보를 보게 될 것이다.</p>
<figure><figcaption>
            <h4>svc ClusterIP상태</h4>
        </figcaption>
</figure>

<p>NodePort는 아래처럼 정보를 보게 된다.</p>
<ul>
<li>kubectl expose deploy nginx &ndash;port=80 &ndash;target-port=80 &ndash;type=NodePort -n nginx</li>
</ul>
<figure><figcaption>
            <h4>svc NodePort상태</h4>
        </figcaption>
</figure>

<p>그럼 보는바와 같이 차이가 좀 있는 것을 알 수 있다.
NodePort를 하게 될 경우 아래와 같이 30000대의 Port를 확인 할 수 있을 것이다.</p>
<h2 id="l4연동-후-nodeport">L4연동 후 NodePort</h2>
<p>그럼 만약에 L4장비와 연결을 하게 되면 어떻게 보이게 될까? 아래 그림으로 한번 확인을 해보자</p>
<ul>
<li>kubectl expose deploy nginx &ndash;port=80 &ndash;target-port=80 &ndash;type=LoadBalancer -n nginx</li>
</ul>
<figure><figcaption>
            <h4>svc LoadBalancer상태#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>svc LoadBalancer상태#2</h4>
        </figcaption>
</figure>

<p>위에 AVI에 설정된 서버가 실제적인 K8S의 Node인것을 확인 할 수 있다.</p>
<figure><figcaption>
            <h4>svc LoadBalancer상태#3</h4>
        </figcaption>
</figure>

<p>보는 것과 같이 실제 노드IP에 32676번 (30000번대의 포트를 할당 받음) 포트가 연동 되어 있는것을 확인 할 수 있다.</p>
<p>그럼 실제적으로 클라이언트가 접속을 하게 되면 Node:Port(32767)의 연결된 노드로 트래픽이 가게 되고 노드는 트래픽이 들어오면 해당하는 EndPoint로 접속 하게 되는 것이다.</p>
<ul>
<li>Source &gt; L4 &gt; Node:Port &gt; Container</li>
</ul>
<p>그럼 아래와 같이 SVC와 그의 대한 Endpoint가 어떻게 연결되어 있는지 알 수 있다.
<figure><figcaption>
            <h4>svc LoadBalancer상태#4</h4>
        </figcaption>
</figure>
</p>
<p>아래와 같이 접속이 되는 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>svc LoadBalancer상태#5</h4>
        </figcaption>
</figure>
</p>
<h2 id="l4연동-후-clusterip">L4연동 후 ClusterIP</h2>
<p>그런대 여기서 의문점이 들 것이다. 그럼 ClusterIP는 지원이 안되는건가? 그건 연동하는 L4에서 지원을 하면 가능 하다. 그럼 어떻게 나오는지 한번 확인 해보자.</p>
<p>특별하게 설정 할 것은 없고, AVI를 NodePort를 지원하는 것에서 ClusterIP로 변경 후 상태를 확인 해보면 실제 Pod의 IP로 맵핑이 된 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>svc LoadBalancer상태#6</h4>
        </figcaption>
</figure>
</p>
<h2 id="결과">결과</h2>
<p>위에서 보듯이 NodePort와 ClusterIP의 차이점을 확인해 볼 수 있을 거 같다.</p>
]]></description>
</item></channel>
</rss>
