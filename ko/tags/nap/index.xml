<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>nap - Tag - Dokyung&#39;s DevOoOps</title>
        <link>https://huntedhappy.github.io/ko/tags/nap/</link>
        <description>nap - Tag - Dokyung&#39;s DevOoOps</description>
        <generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>huntedhappy@gmail.com (Dokyung)</managingEditor>
            <webMaster>huntedhappy@gmail.com (Dokyung)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 10 Apr 2022 18:32:52 &#43;0900</lastBuildDate><atom:link href="https://huntedhappy.github.io/ko/tags/nap/" rel="self" type="application/rss+xml" /><item>
    <title>The Documentation Networks</title>
    <link>https://huntedhappy.github.io/ko/networks/</link>
    <pubDate>Sun, 10 Apr 2022 18:32:52 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/networks/</guid>
    <description><![CDATA[<figure><figcaption>
            <h4>OSI 7Layer</h4>
        </figcaption>
</figure>

<h2 id="1-l2">1. L2</h2>
<h3 id="11-mac주소">1.1. MAC주소</h3>
<p>MAC은 일반적으로 OSI 7 Layer중에서 2 Layer에 속한다. 확인하는 방법은 윈두우에서 CMD창을 연 후 ipconfig /all명령어를 사용하면 확인할 수 있다. 나오는 부분중에 물리적 주소라고 나오는 것을 확인 할 수 있다. 리눅스의 경우는 ifconfig라고 치면 바로 확인을 할 수 있을 것이다.</p>
<ul>
<li>물론 H/W 주소이지만 변경은 가능하다. 그러므르 보안적으로 이슈가 될 수 있다.</li>
</ul>
<figure><figcaption>
            <h4>MAC 주소 확인</h4>
        </figcaption>
</figure>

<p>확인을 하게 되면
E0-3F-49-AB-C8-AD
위와 같이 표시가 되며 절반으로 나누어 앞의 세부분은 생산자를 나타내고, 뒤의 세 부분은 장치의 일련번호(Host Identifier)을 나타낸다.</p>
<p><a href="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> MAC 제조회사 찾는 곳 </a>
<figure><figcaption>
            <h4>제조회사 찾는 방법</h4>
        </figcaption>
</figure>
</p>
<h3 id="12-arp--rarp--garp">1.2. ARP &amp; RARP &amp; GARP</h3>
<p>ARP(Address Resolution Protofcol)는 IP주소를 MAC주소와 대응(Bind)시키기 위해 사용되는 프로토콜이다.
IP주소는 알지만 MAC주소를 모르는 경우 사용 할 수 있다.</p>
<p>윈도우에서 arp -a {IP} 로 확인 할 수 있다.
<figure><figcaption>
            <h4>ARP 확인</h4>
        </figcaption>
</figure>
</p>
<p>RARP(Reverse Address Resolution Protocol)는 그 반대로 MAC주소로 IP를 대응(Bind)시키기 위해 사용되는 프로토콜이다.
MAC주소는 알지만 IP주소를 모르는 경우 사용 할 수 있다.</p>
<p>GARP(Gratuitous ARP)는 PC를 스위치에 연결을 하게 되면 나의 IP와 MAC은 이거라고 알리는대 사용한다. 3번정도 GARP를 보낸다. 그래서 IP 주소 충돌을 감지 할 수 있으며, GARP를 수신한 모든 호스트/라우터는 ARP Table을 갱신할 수 있다. 또 다른 목적은 VRRP/HSRP프로토콜에서 사용된다(VRRP/HSRP의 설명은 패스한다).</p>
<h3 id="13-l2-통신">1.3. L2 통신</h3>
<table>
<thead>
<tr>
<th>기능</th>
<th>설명</th>
<th>기술</th>
</tr>
</thead>
<tbody>
<tr>
<td>learning</td>
<td>출발지 주소가 MAC 테이블에 주소가 없으면 MAC 주소를 저장</td>
<td>MAC table</td>
</tr>
<tr>
<td>flooding</td>
<td>목적지 주소가 MAC 테이블에 없으면 전체 포트로 전달</td>
<td>Broadcast</td>
</tr>
<tr>
<td>filtering</td>
<td>출발지/목적지가 동일 네트워크에 있으면 다른 네트워크로 전파 차단</td>
<td>Collision Domain</td>
</tr>
<tr>
<td>aging</td>
<td>MAC 테이블 캐쉬</td>
<td>Aging Time</td>
</tr>
</tbody>
</table>
<ol>
<li>PC를 연결 하면 PC에서 GARP를 3번 정도 보내면서 스위치 및 PC에서는 ARP를 Learning한다.</li>
<li>만약 스위치 및 PC에서 arp table이 없으면 aging Time이 끝났거나 또는 GARP를 받지 못했을 경우 또는 ARP테이블이 갱신이 안될 경우, PC 1에서 PC 2로 통신을 할 때 Broadcast(flooding)를 보낸다. 이 때 스위치에서는 동일한 VLAN의 모든 포트로 (목적지 IP:ff:ff:ff:ff:ff) 브로드캐스트를 보낸다.</li>
<li>PC2는 해당 브로드캐스트를 받고 반대로 PC1에게 전달을 하게 된다.</li>
<li>스위치 및 PC는 해당 MAC Table에 저장한다. 그리고 스위치에서 연결된 PC에서 트래픽을 전달 한다.(Forwarding)</li>
</ol>
<figure><figcaption>
            <h4>L2 통신</h4>
        </figcaption>
</figure>

]]></description>
</item><item>
    <title>The Documentation NAP</title>
    <link>https://huntedhappy.github.io/ko/nap/</link>
    <pubDate>Thu, 13 Jan 2022 18:10:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/nap/</guid>
    <description><![CDATA[<h2 id="1-nap">1. NAP?</h2>
<p>NAP(NGINX App Protect)은 WAF and DoS Protection을 제공 한다. NGINX Plus에서 제공을 하며 컨테이너 환경에서 App을 보호 하기 위한 솔루션이다. 대부분 컨테이너 환경에서 Ingress를 NGINX로 많이 사용 할 것이다. NGINX PLUS 라이센스를 구매 하면 NAP을 사용 할 수 있다.</p>
<h2 id="2-사전-구성">2. 사전 구성</h2>
<ul>
<li>Docker v18.09+</li>
<li>GNU Make</li>
<li>git</li>
<li>Helm3</li>
<li>OpenSSL</li>
<li><a href="https://github.com/OpenVPN/easy-rsa.git" target="_blank" rel="noopener noreffer">https://github.com/OpenVPN/easy-rsa.git</a></li>
<li>apt install git \  make \ make-guile</li>
</ul>
<h2 id="3-설치">3. 설치</h2>
<p>Namespace 생성 후 easy-rsa git clone</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create ns ingress-nginx

git clone https://github.com/OpenVPN/easy-rsa.git
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>easy rsa</h4>
        </figcaption>
</figure>

<p>인증서 생성 (인증서 생성은 반드시 이렇게 하지 않아도 된다.)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> easy-rsa/easyrsa3/

./easyrsa init-pki
./easyrsa build-ca
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>easy rsa 구성#1</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">./easyrsa gen-req wildcard

./easyrsa sign-req server wildcard
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>easy rsa 구성#2</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">openssl rsa -in /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard.key -out /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard-unencrypted.key

<span class="c1">## 인증서 Secret 생성</span>
kubectl create -n ingress-nginx secret tls wildcard-tls --key /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard-unencrypted.key --cert /var/tmp/easy-rsa/easyrsa3/pki/issued/wildcard.crt

<span class="c1">## 안지워도된다.</span>
rm /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard-unencrypted.key
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>ssl 인증서 secret 생성</h4>
        </figcaption>
</figure>

<p>secret 인증서 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl get secret -n ingress-nginx
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>secret 확인</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp

<span class="c1">## nap을 위한 yaml파일 다운로드</span>
git clone https://github.com/nginxinc/kubernetes-ingress/

<span class="c1">## nap을 위한 helm repo 주소 추가</span>
helm repo add nginx-stable https://helm.nginx.com/stable
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>git clone</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp/kubernetes-ingress/deployments/helm-chart
git checkout v1.11.3
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>git checkout</h4>
        </figcaption>
</figure>

<p>라이센스 발급 30일 trial을 받을 수 있다. 가입 필요
<a href="https://www.nginx.com/free-trial-request-nginx-ingress-controller/" target="_blank" rel="noopener noreffer"><i class="far fa-file-archive fa-fw"></i>&nbsp;NAP 발급 링크</a></p>
<p>미리 Harbor에 ingress-nginx project 생성이 되어 있어야함</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">REGISTRY</span><span class="o">=</span>&lt;registry IP or FQDN&gt;
<span class="nv">NS</span><span class="o">=</span>&lt;your namespace&gt;
<span class="nv">REGISTRY</span><span class="o">=</span>10.253.110.4
<span class="nv">NS</span><span class="o">=</span>ingress-nginx
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Harbor 확인</h4>
        </figcaption>
</figure>

<p>발급 받은 라이센스를 복사</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mkdir -p /var/tmp/kubernetes-ingress
cp nginx-repo.key nginx-repo.crt  /var/tmp/kubernetes-ingress
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>라이센스 복사</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp/kubernetes-ingress

make debian-image-nap-plus <span class="nv">PREFIX</span><span class="o">=</span><span class="nv">$REGISTRY</span>/<span class="nv">$NS</span>/nginx-plus-ingress <span class="nv">TARGET</span><span class="o">=</span>container
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Docker Pull</h4>
        </figcaption>
</figure>

<p>docker image 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">docker images
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Docker Image 확인</h4>
        </figcaption>
</figure>

<p>Harbor에 Push</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">docker image tag 18a49497920c <span class="nv">$REGISTRY</span>/<span class="nv">$NS</span>/nginx-plus-ingress:1.11.3

docker login &lt;harbor IP&gt;
make push <span class="nv">PREFIX</span><span class="o">=</span><span class="nv">$REGISTRY</span>/<span class="nv">$NS</span>/nginx-plus-ingress
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>Harbor push#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Harbor push#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Harbor push#3</h4>
        </figcaption>
</figure>
</p>
<p>Helm Value 복사 (원본을 건드리지 않게 하기 위해 별도로 복사를 한다.)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> deployments/helm-chart
cp values-plus.yaml values-plus.yaml.orig
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Helm Value 복사</h4>
        </figcaption>
</figure>

<p>복사한 파일을 열어 보면 아래와 같이 되어 있는대 수정해줘야 하는 부분을 수정 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## vi 편집</span>
vi values-plus.yaml 

<span class="c1">## 내용 (imagePullSecretName의 경우 Harbor에 Public으로 만들었으면 상관 없음)</span>
controller:
  replicaCount: <span class="m">1</span>
  nginxplus: <span class="nb">true</span>
  image:
    repository: 10.253.106.46/ingress-nginx/nginx-plus-ingress
    tag: <span class="s2">&#34;1.11.3&#34;</span>
  service:
    externalTrafficPolicy: Cluster
  appprotect:
    <span class="c1">## Enable the App Protect module in the Ingress Controller.</span>
    enable: <span class="nb">true</span>
  wildcardTLS:
    <span class="c1">## The base64-encoded TLS certificate for every Ingress host that has TLS enabled but no secret specified.</span>
    <span class="c1">## If the parameter is not set, for such Ingress hosts NGINX will break any attempt to establish a TLS connection.</span>
    cert: <span class="s2">&#34;&#34;</span>

    <span class="c1">## The base64-encoded TLS key for every Ingress host that has TLS enabled but no secret specified.</span>
    <span class="c1">## If the parameter is not set, for such Ingress hosts NGINX will break any attempt to establish a TLS connection.</span>
    key: <span class="s2">&#34;&#34;</span>

    <span class="c1">## The secret with a TLS certificate and key for every Ingress host that has TLS enabled but no secret specified.</span>
    <span class="c1">## The value must follow the following format: `&lt;namespace&gt;/&lt;name&gt;`.</span>
    <span class="c1">## Used as an alternative to specifying a certificate and key using `controller.wildcardTLS.cert` and `controller.wildcardTLS.key` parameters.</span>
    <span class="c1">## Format: &lt;namespace&gt;/&lt;secret_name&gt;</span>
    secret: ingress-nginx/wildcard-tls
  serviceAccount:
    <span class="c1">## The name of the service account of the Ingress controller pods. Used for RBAC.</span>
    <span class="c1">## Autogenerated if not set or set to &#34;&#34;.</span>
    name: ingress-nginx
    <span class="c1">## The name of the secret containing docker registry credentials.</span>
    <span class="c1">## Secret must exist in the same namespace as the helm release.</span>
    imagePullSecretName: <span class="s2">&#34;regcred&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>PSP를 혀용하기 위해 해당 파일을 실행 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/nginx-psp.yaml
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>psp 허용</h4>
        </figcaption>
</figure>

<p>HELM 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create secret generic regcred --from-file<span class="o">=</span>.dockerconfigjson<span class="o">=</span><span class="nv">$HOME</span>/.docker/config.json --type<span class="o">=</span>kubernetes.io/dockerconfigjson -n ingress-nginx

helm install nap nginx-stable/nginx-ingress -f values-plus.yaml -n ingress-nginx
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>helm으로 nap 설치</h4>
        </figcaption>
</figure>

<p>설치 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">watch -n <span class="m">1</span> kubectl -n ingress-nginx get all
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>설치 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>L4 확인</h4>
        </figcaption>
</figure>
</p>
<h2 id="4-waf">4. WAF</h2>
<p>WAF TEST를 위해 웹 구성</p>
<h3 id="41-test-web-구성">4.1. TEST WEB 구성</h3>
<p>TEST를 하기 위해 제공하는 Manifest를 다운로드 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe-rbac.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe-ingress.yaml

kubectl apply -f cafe-rbac.yaml -n <span class="nb">test</span>
kubectl apply -f cafe.yaml -n <span class="nb">test</span>

vi cafe-ingress.yaml <span class="o">(</span>인증서 만들었던 Domain으로 변경<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Domain을 변경 한다.</h4>
        </figcaption>
</figure>

<p>Domain 변경 후 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f cafe-ingress.yaml -n <span class="nb">test</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Ingress 확인.</h4>
        </figcaption>
</figure>

<p>POSTMAN으로 접속이 되는지 확인
<figure><figcaption>
            <h4>POSTMAN 확인.</h4>
        </figcaption>
</figure>
</p>
<h3 id="42-waf-구성">4.2. WAF 구성</h3>
<p>ELK를 구성 하기 위해 syslog pod를 구성한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/syslog-rbac.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/syslog.yaml

kubectl apply -f syslog-rbac.yaml -n ingress-nginx
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f syslog.yaml -n ingress-nginx
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/ap-apple-uds.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/ap-dataguard-alarm-policy.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/ap-logconf.yaml

kubectl apply -f  ap-apple-uds.yaml -n <span class="nb">test</span>
kubeclt apply -f  ap-dataguard-alarm-policy.yaml -n <span class="nb">test</span>
kubectl apply -f  ap-logconf.yaml -n <span class="nb">test</span>
</code></pre></td></tr></table>
</div>
</div><p>ingress에 annotation을 설정</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe-ingress-ap.yaml
kubectl get pod -n ingress-nginx -o wide

<span class="c1">## vi 편집 실행</span>
vi cafe-ingress-ap.yaml

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: cafe-ingress
  annotations:
    appprotect.f5.com/app-protect-policy: <span class="s2">&#34;test/dataguard-alarm&#34;</span>
    appprotect.f5.com/app-protect-enable: <span class="s2">&#34;True&#34;</span>
    appprotect.f5.com/app-protect-security-log-enable: <span class="s2">&#34;True&#34;</span>
    appprotect.f5.com/app-protect-security-log: <span class="s2">&#34;test/logconf&#34;</span>
    appprotect.f5.com/app-protect-security-log-destination: <span class="s2">&#34;syslog:server=SYSLOG:514&#34;</span>
spec:
  ingressClassName: nginx <span class="c1"># use only with k8s version &gt;= 1.18.0</span>
  tls:  - hosts:
    - cafe.vcf.local  <span class="c1">## 인증서와 동일한 도메인으로 변경</span>
  rules:
  - host: cafe.vcf.local <span class="c1">## 인증서와 동일한 도메인으로 변경</span>
    http:
      paths:
      - path: /tea
        backend:
          serviceName: tea-svc
          servicePort: <span class="m">80</span>
      - path: /coffee
        backend:
          serviceName: coffee-svc
          servicePort: <span class="m">80</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## syslog service ip</span>
<span class="nv">SYSLOG_IP</span><span class="o">=</span>10.101.182.155
vi cafe-ingress-ap.yaml

sed -e <span class="s2">&#34;s/SYSLOG/</span><span class="nv">$SYSLOG_IP</span><span class="s2">/&#34;</span> cafe-ingress-ap.yaml &gt; cafe-ingress-ap-syslog.yaml
kubectl apply -n <span class="nb">test</span> -f cafe-ingress-ap-syslog.yaml

kubectl get ingress -n <span class="nb">test</span>

<span class="c1">## 아래 명령어로 annotation을 확인 할 수 있다.</span>
kubrectl get ingress cafe-ingress -n <span class="nb">test</span> -o yaml
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Annotation 확인.</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl get pod -n ingress-nginx

LOG 확인
kubectl -n ingress-nginx <span class="nb">exec</span> -it syslog-65d847447d-ghbvq -- tail -f /var/log/messages
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>syslog pod 확인.</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>PostMan 요청 후 REJECT확인.</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Pod 로그 확인시 Attack 확인.</h4>
        </figcaption>
</figure>
</p>
<h2 id="5-elk">5. ELK</h2>
<p>LOG를 좀 가시적이게 표현하기 위해 ELK를 구성</p>
<h3 id="51-elastic-연동">5.1. Elastic 연동</h3>
<p>logstach를 5144로 구성한 이유는 Logstach 구성시 514가 well-known 포트라 5144로 변경
logstash yaml 파일, <a href="/ko/nap/logstash_test.yaml" rel=""><i class="far fa-file-archive fa-fw"></i>&nbsp;logstash_test.yaml</a>.</p>
<figure><figcaption>
            <h4>logstach 확인.</h4>
        </figcaption>
</figure>

<p>ingress 설정에서 syslog server 를 logstash cluster IP로 설정
<figure><figcaption>
            <h4>annotation에서 logstach로 syslog IP 변경 .</h4>
        </figcaption>
</figure>
</p>
<p>해당 파일을 다운로드 받는다.</p>
<p><a href="https://github.com/f5devcentral/f5-waf-elk-dashboards" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Dashboard 링크 </a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mkdir /var/tmp/kibana
<span class="nb">cd</span> /var/tmp/kibana
cp false-positives-dashboards.ndjson overview-dashboard.ndjson /var/tmp/kibana
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>파일 다운로드</h4>
        </figcaption>
</figure>

<p>대쉬보드 업로드</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp

<span class="nv">KIBANA_URL</span><span class="o">=</span> <span class="o">{</span>FQDN or IP<span class="o">}</span>
<span class="nv">KIBANA_URL</span><span class="o">=</span>http://kibana.vcf.local:5601

jq -s . kibana/overview-dashboard.ndjson <span class="p">|</span> jq <span class="s1">&#39;{&#34;objects&#34;: . }&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>curl -k --location --request POST <span class="s2">&#34;</span><span class="nv">$KIBANA_URL</span><span class="s2">/api/kibana/dashboards/import&#34;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;kbn-xsrf: true&#39;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;Content-Type: text/plain&#39;</span> -d @- <span class="se">\
</span><span class="se"></span><span class="p">|</span> jq

jq -s . kibana/false-positives-dashboards.ndjson <span class="p">|</span> jq <span class="s1">&#39;{&#34;objects&#34;: . }&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>curl -k --location --request POST <span class="s2">&#34;</span><span class="nv">$KIBANA_URL</span><span class="s2">/api/kibana/dashboards/import&#34;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;kbn-xsrf: true&#39;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;Content-Type: text/plain&#39;</span> -d @- <span class="se">\
</span><span class="se"></span><span class="p">|</span> jq
</code></pre></td></tr></table>
</div>
</div><p>kibana접속 후 index patterns에 waf-logs-* 확인
<figure><figcaption>
            <h4>kibana 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>kibana 대시보드 확인</h4>
        </figcaption>
</figure>
</p>
<p><a href="https://devcentral.f5.com/s/articles/Deploying-NGINXplus-with-AppProtect-in-Tanzu-Kubernetes-Grid" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> 참고문헌 </a></p>
]]></description>
</item></channel>
</rss>
