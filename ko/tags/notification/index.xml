<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>notification - Tag - Dokyung&#39;s DevOoOps</title>
        <link>https://huntedhappy.github.io/ko/tags/notification/</link>
        <description>notification - Tag - Dokyung&#39;s DevOoOps</description>
        <generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>huntedhappy@gmail.com (Dokyung)</managingEditor>
            <webMaster>huntedhappy@gmail.com (Dokyung)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 06 Jan 2022 23:47:23 &#43;0900</lastBuildDate><atom:link href="https://huntedhappy.github.io/ko/tags/notification/" rel="self" type="application/rss+xml" /><item>
    <title>The Documentation Minio</title>
    <link>https://huntedhappy.github.io/ko/minio/</link>
    <pubDate>Thu, 06 Jan 2022 23:47:23 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/minio/</guid>
    <description><![CDATA[<p>MiniO는 Minimal Object Storage를 의미 하며, 오픈소스 형태로 제공 하는 오브젝트 스토리지이다.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Object Storage?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">오브젝트 스토리지는 이미지, 오디오 파일, 스프레드시트 또는 바이너리 실행 코드등 문서 처럼 한줄 한문자 바꾸는 형식이 아니라 하나의 파일이 다 바뀌는 것으로 이해하면 쉬울 거 같다.</div>
        </div>
    </div>
<p>MiniO는 3가지 형태로 도구를 제공 한다.</p>
<ul>
<li>MiniO Console / Server - UI / Cloud Storage Server를 구성 할 수 있다.</li>
<li>MiniO Client(mc,admin) - Minio Server, AWS S3, GCS등등 연결하여 파일 업로드 및 관리등을 할 수 있다.</li>
<li>MiniO gateway - Minio는 스토리지 Gateway도 지원한다. 예를들어 miniO게이트웨이를 구성 하면 가상머신등에서 Nas를 통해 파일 또는 파일공유 지점으로 miniO안 객체에 엑세스 할 수 있다.</li>
</ul>
<p>MiniO는 2가지의 배포 형식을 제공 한다.</p>
<ul>
<li>독립형 배포: 단일 스토리지 볼륨 또는 폴더가 있는 단일 MiniO 서버</li>
<li>분산 배포: 모든 서버에 총 스토리지 볼륨이 4개 이상인 하나 이상의 MiniO서버</li>
</ul>
<p>위의 내용은 Kasten 설치 후 백업 스토리지를 MiniO로 구성하기 위해 간단하게 MiniO가 무엇인지의 대한 설명</p>
<p>아래 내용은 Kasten으로 백업 스토리지를 MiniO로 구성시 Erasure Coding 및 Immutability가 되어야 하는대 이 부분의 대해서 설명 하고자 한다.</p>
<h2 id="1-erasure-coding">1. Erasure Coding</h2>
<p>Erasure Coding은 클러스터의 여러개 디스크 드라이브 중 몇개가 손실이 발생 하더라도 자동으로 복구 를 할 수 있게 해주는 데이터 중복성 및 가용성 기능이다. Erasure Coding은 RAID 또는 복제와 같은 기술보다 적은 오버헤드로 복구를 제공한다.</p>
<h3 id="11-erasure-coding-동작">1.1. Erasure Coding 동작</h3>
<p>Erasure Coding은 원본 데이터를 가져와서 데이터가 필요할 때 원본 정보를 재생성하기 위해 부분 집합만 필요로 하는 방식으로 인코딩을 한다. 예를들어 개체 또는 데이터의 원래 값이 95라고 가정하고 x=9 및 y=5가 되도록 나눈다. 인코딩 프로세스는 일련의 방정식을 생성 한다.</p>
<p>이 경우 다음과 같은 방적식을 생성한다고 가정 합니다.</p>
<ul>
<li>x + y = 14</li>
<li>x - y = 4</li>
<li>2x + y = 23</li>
</ul>
<p>객체를 재생성 하려면 이 세 방정식 중 두가지가 필요 하므로 디코딩 할 수 있습니다. 따라서 방정식을 풀면 x와 y에 대한 값을 얻을 수 있습니다.</p>
<p>3개의 방정식이 있지만 그 중 2개에서 원래 정보를 얻을 수 있기 때문에 데이터를 조각으로 나누고 인코딩하여 여러위치에 저장하는 데이터 보호 체계 입니다.</p>
<p>요약하자면, Erasure Code를 활용하여 데이터를 인코딩 하고, 데이터 손실시 디코딩 과정을 거쳐 원본 데이터를 복구하는 데이터 복구 기법중 하나</p>
<figure><figcaption>
            <h4>Decode / Encode</h4>
        </figcaption>
</figure>

<p>자세한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.min.io/minio/baremetal/concepts/erasure-coding.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Minio Erasure Coding</a></p>
<p>참고링크#1 <a href="https://stonefly.com/blog/understanding-erasure-coding" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> 참고링크#1</a></p>
<h3 id="12-erasure-coding-vs-raid">1.2. Erasure Coding vs RAID?</h3>
<p>RAID로 구성시 데이터를 다른 위치에 저장할 수 있으며 드라이브 오류로부터 보호, Erasure Coding은 데이터가 부분적으로 분할된 다음 확장되고 인코딩이 된다. 그 후 세그먼트는 여러 위치에 보관하도록 구성이 된다.
RAID는 무결성 위협으로 부터 데이터 보호를 용이 하게 할 수 있으며, Erasure Coding은 스토리지 소모를 덜 할 수 있게 해준다.
상황에 따라 RAID 및 Erasure Coding 모두 적합 할 수 있다.</p>
<p>Erasure Coding의 현재 사용 사례 중 하나는 객체 기반 클라우드 스토리지입니다. Erasure Coding은 높은 CPU 사용률을 요구하고 대기 시간이 발생하므로 애플리케이션 보관에 적합합니다. 또한 Erasure Coding은 데이터 무결성 위협으로부터 보호할 수 없기 때문에 기본 워크로드에 적합하지 않습니다.</p>
<h3 id="13-erasure-coding의-이점">1.3. Erasure Coding의 이점</h3>
<p>Erasure Coding은 고급 데이터 보호 및 재해 복구 방법을 제공합니다 .</p>
<ul>
<li>저장 공간 활용도: Erasure Coding은 소비되는 공간을 줄이고 동일한 수준의 중복성을 제공하여 더 나은 저장 활용률을 제공(복사본 3개). Erasure Coding을 활용하면 최대 50% 더 많은 공간을 절약할 수 있습니다.</li>
<li>신뢰성 향상:  데이터 조각은 독립적인 오류 더미 로 조각화됩니다 . 이렇게 하면 종속되거나 상관된 오류가 발생하지 않습니다.</li>
<li>적합성: Erasure Coding은 모든 파일 크기에 사용할 수 있습니다. KiloBytes의 작은 블록 크기에서 PetaBytes의 큰 블록 크기에 이르기까지 다양합니다.</li>
<li>Suitability: 데이터를 복구하는 데 데이터의 Suitability만 필요합니다. 원본 데이터가 필요하지 않습니다.</li>
<li>유연성: 시스템을 오프라인으로 전환하지 않고도 편리할 때 고장난 구성 요소를 교체할 수 있습니다.</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Suitablility?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Suitablility란 더 큰 집합에서의 부분적인 집합.</div>
        </div>
    </div>
<h3 id="14-minio-erasure-code-계산기">1.4. MiniO Erasure Code 계산기</h3>
<blockquote>
<p><a href="https://min.io/product/erasure-code-calculator?utm_term=erasure%20coding&amp;utm_campaign=Erasure&#43;Coding&#43;1.4&amp;utm_source=adwords&amp;utm_medium=ppc&amp;hsa_acc=8976569894&amp;hsa_cam=13884673572&amp;hsa_grp=127699937027&amp;hsa_ad=533469681242&amp;hsa_src=g&amp;hsa_tgt=kwd-314402742856&amp;hsa_kw=erasure%20coding&amp;hsa_mt=p&amp;hsa_net=adwords&amp;hsa_ver=3&amp;gclid=Cj0KCQiAip-PBhDVARIsAPP2xc2nLMVBzYtNdDYlETP-3UjGr3ZqD7sA-IPzfhNnxWhzes03cq62ViUaAtprEALw_wcB" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> 계산기 LINK</a></p>
</blockquote>
<h2 id="2-immutability">2. Immutability</h2>
<p>MiniO 서버는 특정 개체에 대해 WORM을 허용하거나 모든 객체에 기본 보존 모드 및 보존기간을 적용하는 객체 잠금 구성으로 버킷을 구성하여 WORM을 허용합니다. 이렇게 하면 버킷의 객체를 변경 할 수 없습니다. 즉, 버킷의 객체 잠금 구성 또는 객체 보존에 지정된 만료일 까지 버전 삭제가 허용 되지 않습니다.</p>
<p>객체 잠금을 사용하려면 버킷 생성시 잠금을 활성화해야 하며, 객체 잠금도 버킷의 버전 관리를 자동으로 활성화 합니다. 또는 버킷에서 생성된 객체에 적용할 기본 보존 기간 및 보존 모드를 버킷에 구성 할 수 있습니다.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>WORM?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Read Many(WORM)</div>
        </div>
    </div>
<h3 id="21-개념">2.1. 개념</h3>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Immutability 개념<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>객체가 법적 보존 상태에 있는 경우 해당 버전ID에 대한 법적 보존이 명시적으로 제거되지 않는 한 삭제 할 수 없다. 그렇지 않으면 DeleteObjectVersio()이 실패 한다.</li>
<li>Compliance모드 에서는 해당 버전 ID의 보존기간이 만료될 때때가지 누구도 객체를 삭제 할 수 없다. 사용자에게 필요한 거버넌스 우회 권한이 있는 경우 Compliance모드 에서 개체의 보존 날짜를 연장 할 수 있다.</li>
<li>객체 잠금 구성이 버킷으로 설정되면</li>
</ul>
<blockquote>
<ul>
<li>새 객체는 버킷 객체 잠금 구성의 보존 설정을 자동으로 상속한다.</li>
<li>개체를 업로드할 때 보존 헤더를 선택적으로 설정 할 수 있다.</li>
<li>개체에서 명시적으로 PutObjectRetention API 호출을 할 수 있다.</li>
</ul>
</blockquote>
<ul>
<li>MINIO_NTP_SERVER환경 변수는 보존하는 날짜를 시스템시간으로 설정이 필요하지 않는 경우 원격 NTP 서버를 구성 할 수 있다.</li>
<li>객체잠금 기능은 삭제 코드 및 분산 삭제 코드 설정에서만 사용 할 수 있다.</li>
</ul>
</div>
        </div>
    </div>
<p>자세한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.min.io/docs/minio-bucket-object-lock-guide.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Minio Immutability</a></p>
<h3 id="카스텐-설정시-minio로-backup-storage-구성-링크-참조-i-classfas-fa-linki-kasten-minio-installhttpshuntedhappygithubiokok10">카스텐 설정시 MiniO로 Backup Storage 구성 링크 참조. <a href="https://huntedhappy.github.io/ko/k10/" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Kasten MiniO Install</a></h3>
]]></description>
</item><item>
    <title>The Documentation Jenkins</title>
    <link>https://huntedhappy.github.io/ko/jenkins/</link>
    <pubDate>Fri, 31 Dec 2021 20:49:26 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/jenkins/</guid>
    <description><![CDATA[<h2 id="jenkins">Jenkins?</h2>
<p>Jenkins는 아무래도 많이 사용하는 CI/CD 일것이다. 우선 컨테이너 환경에서 CI를 구성하기 위해서 Jenkins를 구성 하였고, 클러스터가 많은 환경에서도 접근을 할 수 있게 (물론 컨테이너로 구성을 해도 되나. 굳이 컨테이너로 구성할 필요성이 있나 싶어 별도의 VM으로 구성)
VM형태로 설치를 하였다.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>CI/CD<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>CI/CD는 애플리케이션 개발 단계를 자동화하여 애플리케이션을 보다 짧은 주기로 고객에게 제공한다.
CI (Continuous Integration) CI를 통해 개발자들은 코드 변경사항을 공유 브랜치로 다시 병합하는 작업을 더욱 수월하게 자주 수행 할 수 있다.
CD (Continuous Delivery || Continuous Deploy) 두용어는 상호 교환적으로 사용됨.</p>
<ul>
<li>Continuous Deliver의 경우 코드 변경 , 병합으로부터 Prodcution에 적합한 빌드를 제공하여 모든 단계에 테스트 및 릴리스를 자동화한다.</li>
<li>Continuous Deploy는 어플리케이션을 프로덕션으로 릴리스 작업을 자동화</li>
</ul>
</div>
        </div>
    </div>
<figure><figcaption>
            <h4>CICD</h4>
        </figcaption>
</figure>

<p>참고 문헌 <a href="https://www.redhat.com/ko/topics/devops/what-is-ci-cd" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Redhat </a></p>
<h2 id="1-설치">1. 설치</h2>
<div class="details admonition example open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-list-ol fa-fw"></i>Jenkins Install<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>JAVA Install</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">apt update <span class="o">&amp;&amp;</span> apt upgrade 

sudo apt search openjdk

sudo apt install openjdk-11-jdk -y

java --version
</code></pre></td></tr></table>
</div>
</div><p>Jenkins Install</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key <span class="p">|</span> sudo apt-key add -
sudo sh -c <span class="s1">&#39;echo deb https://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#39;</span>

sudo apt update -y
sudo apt install jenkins -y

systemctl restart jenkins
systemctl <span class="nb">enable</span> jenkins
</code></pre></td></tr></table>
</div>
</div><p>패스워드 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat /var/lib/jenkins/secrets/initialAdminPassword
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h3 id="11-설치-완료">1.1. 설치 완료</h3>
<p><figure><figcaption>
            <h4>접속 화면 #1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>접속 화면 #2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>접속 화면 #3</h4>
        </figcaption>
</figure>
</p>
<h2 id="2-ssl-설정">2. SSL 설정</h2>
<p>인증서 설치, <a href="/ko/jenkins/root.sh" rel=""><i class="far fa-file-archive fa-fw"></i>&nbsp;root.sh</a>.</p>
<div class="details admonition example open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-list-ol fa-fw"></i>Jenkins SSL 구성<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>인증서 생성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">domain</span><span class="o">=</span>jenkins.tkg.io
</code></pre></td></tr></table>
</div>
</div><p>root.sh에 있는 파일 내용을 복사해서 shell 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">. root.sh
</code></pre></td></tr></table>
</div>
</div><p>인증서 권한 변경</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">chmod <span class="m">700</span> /data/cert
chmod <span class="m">600</span> /data/cert/yourdomain.com.cert
chmod <span class="m">600</span> /data/cert/yourdomain.com.key
</code></pre></td></tr></table>
</div>
</div><p>Jenkins 파일 변경</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">vi /etc/default/jenkins

<span class="nv">HTTP_PORT</span><span class="o">=</span><span class="m">8080</span>             <span class="c1">### ---&gt; 이부분을 찾아서 아래 부분을 채워 넣어주자.</span>
<span class="nv">HTTP_PORT_DISABLE</span><span class="o">=</span>-1       <span class="c1">### HTTP DISABLE</span>
<span class="nv">HTTPS_CERT</span><span class="o">=</span>/data/cert/yourdomain.com.cert      <span class="c1">### 인증서</span>
<span class="nv">HTTPS_KEY</span><span class="o">=</span>/data/cert/yourdomain.com.key        <span class="c1">### KEY</span>

<span class="c1">### args 마지막 줄에 빨간 부분을 채워서 넣어준다.</span>
<span class="nv">JENKINS_ARGS</span><span class="o">=</span><span class="s2">&#34;--webroot=/var/cache/</span><span class="nv">$NAME</span><span class="s2">/war --httpPort=</span><span class="nv">$HTTP_PORT</span><span class="s2"> --httpPort=</span><span class="nv">$HTTP_PORT_DISABLE</span><span class="s2"> --httpsPort=</span><span class="nv">$HTTP_PORT</span><span class="s2"> --httpsCertificate=</span><span class="nv">$HTTPS_CERT</span><span class="s2"> --httpsPrivateKey=</span><span class="nv">$HTTPS_KEY</span><span class="s2">&#34;</span>

<span class="c1">### jenkins restart</span>
systemctl restart jenkins
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h3 id="21-설치-완료">2.1. 설치 완료</h3>
<figure><figcaption>
            <h4>HTTPS 접속 화면 #1</h4>
        </figcaption>
</figure>

<h3 id="22-nginx로-https-구성">2.2. NGINX로 HTTPS 구성</h3>
<p><div class="details admonition example open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-list-ol fa-fw"></i>NGINX PROXY 구성<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>NGINX 가상 서버 구성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">vi  /etc/nginx/sites-available/jenkins

server <span class="o">{</span>
    server_name jenkins.tkg.io<span class="p">;</span>

    location / <span class="o">{</span>
        proxy_redirect off<span class="p">;</span>
        proxy_pass_header Server<span class="p">;</span>
        proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
        proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
        proxy_set_header X-Forwarded-Proto <span class="nv">$scheme</span><span class="p">;</span>
        proxy_pass https://127.0.0.1:8080/<span class="p">;</span>
    <span class="o">}</span>

    listen <span class="m">443</span> ssl<span class="p">;</span>
    ssl_certificate /data/cert/yourdomain.com.crt<span class="p">;</span>
    ssl_certificate_key /data/cert/yourdomain.com.key<span class="p">;</span>
    ssl_client_certificate /data/cert/ca.crt<span class="p">;</span>
<span class="o">}</span>

server <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="nv">$host</span> <span class="o">=</span> jenkins.tkg.io<span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="m">301</span> https://<span class="nv">$host$request_uri</span><span class="p">;</span>
    <span class="o">}</span> <span class="c1"># managed by Certbot</span>

    listen 80<span class="p">;</span>
    server_name jenkins.tkg.io<span class="p">;</span>
    <span class="k">return</span> 404<span class="p">;</span> <span class="c1"># managed by Certbot</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>symbolic link 연결</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"> <span class="nb">cd</span> /etc/nginx/sites-enabled

 ln -s  /etc/nginx/sites-available/jenkins .
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<figure><figcaption>
            <h4>NGINX로 연결 후 HTTPS 접속 화면 #1</h4>
        </figcaption>
</figure>
</p>
<h2 id="3-slack-연동">3. SLACK 연동</h2>
<p>SLACK을 연동하여 메시지를 받을 수 있게 구성을 한다.</p>
<h3 id="31-slcak-설정">3.1. SLCAK 설정</h3>
<figure><figcaption>
            <h4>SLACK 접속</h4>
        </figcaption>
</figure>

<p>APP 등록
<figure><figcaption>
            <h4>SLACK APP 추가#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>SLACK APP 추가#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>SLACK APP 추가#3</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>SLACK APP 추가#4</h4>
        </figcaption>
</figure>
</p>
<p>위에 내용까지 설정을 하면 Jenkins를 어떻게 설정하라고 나오는대 좀 오래 되었나보다. 요즘에 변경된 부분의 대해서 설정 하는 방법을 나열한다.</p>
<h3 id="32-jenkins-설정">3.2. JENKINS 설정</h3>
<p><figure><figcaption>
            <h4>Jenkins Slack Plugin 설치#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack Plugin 설치#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack Plugin 설치#3</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack 설정#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack 설정#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack Credentials 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Jenkins Slack 설정 테스트</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item><item>
    <title>The Documentation Argo-CD</title>
    <link>https://huntedhappy.github.io/ko/argo/</link>
    <pubDate>Fri, 31 Dec 2021 20:05:45 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/argo/</guid>
    <description><![CDATA[<h2 id="gitops-explain-ing">gitops explain ing&hellip;..</h2>
<h2 id="argo">ARGO?</h2>
<p>CI/CD에서 CD를 아르고로 선택한 이유는 인프라 변경 사항에 대한 추적이 좀 가능 하기도 하며 또한 구성 및 배포가 쉽다라고 생각 했다.</p>
<p>설치 환경은 Tanzu 1.4 버전으로 진행</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>CI/CD<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>CI/CD는 애플리케이션 개발 단계를 자동화하여 애플리케이션을 보다 짧은 주기로 고객에게 제공한다.
CI (Continuous Integration) CI를 통해 개발자들은 코드 변경사항을 공유 브랜치로 다시 병합하는 작업을 더욱 수월하게 자주 수행 할 수 있다.
CD (Continuous Delivery || Continuous Deploy) 두용어는 상호 교환적으로 사용됨.</p>
<ul>
<li>Continuous Deliver의 경우 코드 변경 , 병합으로부터 Prodcution에 적합한 빌드를 제공하여 모든 단계에 테스트 및 릴리스를 자동화한다.</li>
<li>Continuous Deploy는 어플리케이션을 프로덕션으로 릴리스 작업을 자동화</li>
</ul>
</div>
        </div>
    </div>
<figure><figcaption>
            <h4>CICD</h4>
        </figcaption>
</figure>

<p>참고 문헌 <a href="https://www.redhat.com/ko/topics/devops/what-is-ci-cd" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Redhat </a></p>
<h2 id="1-requirements">1. Requirements</h2>
<p>helm 설치, <a href="https://github.com/helm/helm/releases" target="_blank" rel="noopener noreffer"><i class="far fa-file-archive fa-fw"></i>&nbsp;Helm</a>.</p>
<h2 id="2-환경">2. 환경</h2>
<p>vSphere : 7.0</p>
<p>vSAN</p>
<p>NSX : 3.2</p>
<p>AVI : 21.1.1</p>
<p>Tanzu 1.4</p>
<h2 id="3-설치">3. 설치</h2>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>ARGO Install<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p><a href="https://github.com/dillonzq/LoveIt/releases/tag/v0.2.0" rel="noopener noreffer" target="_blank"></a></p>
<p>Namespace 생성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create ns argocd
</code></pre></td></tr></table>
</div>
</div><p>Helm Repo 등록</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">helm repo add argo https://argoproj.github.io/argo-helm
helm repo update
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Optional : Helm 에서 value 값을 수정 하고 싶으면 별도로 다운로드</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">helm show values argo/argo-cd &gt; argocd.yaml
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Optional : HTTPS로 구성을 하려고 한다면 인증서 등록을 해준다.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create secret tls argo-tls --cert<span class="o">=</span>/data/cert/yourdomain.com.crt --key<span class="o">=</span>/data/cert/yourdomain.com.key -n argocd
</code></pre></td></tr></table>
</div>
</div><p>수정이 필요 없으면 바로 시작 하면 된다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">helm install argocd argo/argo-cd -n argo
</code></pre></td></tr></table>
</div>
</div><p>접속 하기 위해 Portfoward를 하자</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl port-forward service/argocd-server -n argo 8080:443
</code></pre></td></tr></table>
</div>
</div><p>ID는 admin 이며, PW는 별도의 명령으로 알아 낼수 있다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl -n argo get secret argocd-initial-admin-secret -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">&#34;{.data.password}&#34;</span> <span class="p">|</span> base64 -d
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p><figure><a class="lightgallery" href="/images/ARGO/3-1.png" title="접속 페이지" data-thumbnail="/images/ARGO/3-1.png" data-sub-html="<h2>접속 페이지</h2><p>접속 페이지</p>">
        
    </a><figcaption class="image-caption">접속 페이지</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/ARGO/3-2.png" title="User Info" data-thumbnail="/images/ARGO/3-2.png" data-sub-html="<h2>User Info</h2><p>User Info</p>">
        
    </a><figcaption class="image-caption">User Info</figcaption>
    </figure></p>
<h2 id="4-auth---ldap-integration">4. Auth - LDAP Integration</h2>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>LDAP Integration<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>LDAP을 연동 하기 위해선 values 값을 다운로드 하는 것이 좋다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">helm show values argo/argo-cd &gt; argocd.yaml
vi argocd.yaml
</code></pre></td></tr></table>
</div>
</div><p>다운로드 받은 Yaml파일중에 dex부분을 수정한다, 없으면 추가 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">    dex.config: <span class="p">|</span>
      connectors:
      - type: ldap
        name: Ldap
        id: ldap
        config:
          <span class="c1"># Ldap server address</span>
          host: tanzu-dns.tkg.io:389
          insecureNoSSL: <span class="nb">true</span>
          insecureSkipVerify: <span class="nb">true</span>
          startTLS: <span class="nb">false</span>
          bindDN: <span class="s2">&#34;</span><span class="nv">$dex</span><span class="s2">.ldap.bindDN&#34;</span>
          bindPW: <span class="s2">&#34;</span><span class="nv">$dex</span><span class="s2">.ldap.bindPW&#34;</span>
          usernamePrompt: Username
          userSearch:
            baseDN: <span class="s2">&#34;ou=tanzu,dc=tkg,dc=io&#34;</span>
            filter: <span class="o">(</span><span class="nv">objectClass</span><span class="o">=</span>person<span class="o">)</span>
            username: sAMAccountName
            idAttr: DN
            emailAttr: mail
            nameAttr: sAMAccountName
          groupSearch:
            baseDN: <span class="s2">&#34;ou=tanzu,dc=tkg,dc=io&#34;</span>
            filter: <span class="o">(</span><span class="nv">objectClass</span><span class="o">=</span>person<span class="o">)</span>
            userAttr: DN
            groupAttr: member
            nameAttr: name
</code></pre></td></tr></table>
</div>
</div><p>그리고 Secret을 생성 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl -n argo patch secrets argocd-secret --patch <span class="s2">&#34;{\&#34;data\&#34;:{\&#34;dex.ldap.bindPW\&#34;:\&#34;</span><span class="k">$(</span><span class="nb">echo</span> <span class="s1">&#39;Passw0rd&#39;</span> <span class="p">|</span> base64 -w 0<span class="k">)</span><span class="s2">\&#34;}}&#34;</span>
kubectl -n argo patch secrets argocd-secret --patch <span class="s2">&#34;{\&#34;data\&#34;:{\&#34;dex.ldap.bindDN\&#34;:\&#34;</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">cn</span><span class="o">=</span>administrator,cn<span class="o">=</span>users,dc<span class="o">=</span>tanzu,dc<span class="o">=</span>io <span class="p">|</span> base64 -w 0<span class="k">)</span><span class="s2">\&#34;}}&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>HELM 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">helm install argocd argo/argo-cd -n argo <span class="se">\
</span><span class="se"></span>--set server.extraArgs<span class="o">[</span>0<span class="o">]=</span>--insecure <span class="se">\
</span><span class="se"></span>-f argocd.yaml
</code></pre></td></tr></table>
</div>
</div><p>접속 하기 위해 Portfoward를 하자</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl port-forward service/argocd-server -n argo 8080:443
</code></pre></td></tr></table>
</div>
</div><p>ID는 admin 이며, PW는 별도의 명령으로 알아 낼수 있다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl -n argo get secret argocd-initial-admin-secret -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">&#34;{.data.password}&#34;</span> <span class="p">|</span> base64 -d
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h3 id="41-rbac-적용">4.1. RBAC 적용</h3>
<p>RBAC을 적용 해주어 Admin 권한으로 접속이 되는지 확인
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>LDAP Integration<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>confimap을 수정 해서 RBAC의 대한 설정을 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl edit cm argocd-rbac-cm -n argo
</code></pre></td></tr></table>
</div>
</div><p>configmap을 수정 하면 아래 내용이 있으면 수정 하고 없으면 추가 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">apiVersion: v1
data:
  policy.csv: <span class="p">|</span>
    p, role:my1208, applications, *, my1208/*, allow
    p, role:my1208, projects, get, my1208, allow
    p, role:my1208, repositories, get, *, allow
    p, role:my1208, clusters, get, *, allow
    g, my1208, role:admin
    p, role:none, *, *, */*, deny
    g, tkg, role:readonly
    g, my1208@openbase.co.kr, role:admin
  policy.default: role:none
  scopes: <span class="s1">&#39;[groups,email]&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>Pod를 재 실행 해 준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">delete</span><span class="o">=</span><span class="sb">`</span>kubectl get pod -n argo <span class="p">|</span> grep -v  repo <span class="p">|</span> egrep  <span class="s1">&#39;server|dex&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span> <span class="p">|</span> xargs <span class="nb">echo</span><span class="sb">`</span>
kubectl delete pod <span class="nv">$delete</span> -n argo
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div></p>
<figure><figcaption>
            <h4>접속 화면</h4>
        </figcaption>
</figure>

<h2 id="5-slack-연동">5. SLACK 연동</h2>
<p>메시지를 SLACK으로 받기 위해 연동</p>
<h3 id="51-slack-설정">5.1. SLACK 설정</h3>
<p><a href="https://api.slack.com/apps?new_app=1" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> SLACK APP 등록 </a>
<figure><figcaption>
            <h4>APP 추가#1</h4>
        </figcaption>
</figure>
</p>
<figure><figcaption>
            <h4>APP 추가#2</h4>
        </figcaption>
</figure>

<p>APP을 추가하기 위해 APP의 Name 설정 및 workspace를 선택 한다.
<figure><figcaption>
            <h4>APP 추가#3</h4>
        </figcaption>
</figure>

OAuth &amp; Permmissions을 클릭 하면 아래처럼 화면이 나온다.
<figure><figcaption>
            <h4>APP 추가#4</h4>
        </figcaption>
</figure>

Scopes를 찾아서 chat을 찾은후 적용
<figure><figcaption>
            <h4>APP 추가#5</h4>
        </figcaption>
</figure>

그러면 OAuth Tokens for Your Workspace가 활성화 되는 것을 확인 할 수 있다 그리고 Install to Workspaces를 클릭
<figure><figcaption>
            <h4>APP 추가#6</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>APP 추가#7</h4>
        </figcaption>
</figure>

TOKEN을 복사 한다.
<figure><figcaption>
            <h4>APP 추가#8</h4>
        </figcaption>
</figure>

APP을 추가 해준다.
<figure><figcaption>
            <h4>APP 추가#9</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>APP 추가#10</h4>
        </figcaption>
</figure>

새로 만든 APP이 나오는 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>APP 추가#11</h4>
        </figcaption>
</figure>
</p>
<p>솔직히 여기 잘 나와 있다. <a href="https://argocd-notifications.readthedocs.io/en/stable/services/slack/" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> SLACK APP 등록 </a></p>
<h3 id="52-argo-설정">5.2. ARGO 설정</h3>
<p>ARGO 설정은 별도로 UI에서 제공을 하지 않기 때문에 ConfigMap을 좀 수정 해야 한다. Helm에서 제공을 하긴 하는대 현재는 버그가 있는지 배포가 되지 않아 별도의 방법으로 구성한다.</p>
<p><div class="details admonition example open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-list-ol fa-fw"></i>Slack 연동<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>해당 파일을 다운 로드 받은 후 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget -O argo-noty-secret.yaml https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/v1.2.1/manifests/install.yaml
wget -O argo-noty-config.yaml https://raw.githubusercontent.com/argoproj-labs/argocd-notifications/v1.2.1/catalog/install.yaml

kubectl apply -f argo-noty-secret.yaml -n argo
kubectl apply -f argo-noty-config.yaml -n argo
</code></pre></td></tr></table>
</div>
</div><p>그리고 secret 과 configmap을 수정한다. 사전에 변경해도 상관은 없다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl edit secret argocd-notifications-secret -n argo

apiVersion: v1
kind: Secret
metadata:
  name: argocd-notifications-secret
stringData:
  slack-token: xoxb-xxxxxxxxxx-xxxxxxxxxx-xxxxxxx

kubectl edit cm argocd-notifications-cm -n argo

apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
data:
  service.slack: <span class="p">|</span>
    <span class="c1">## apiURL: &lt;url&gt;                 # optional URL, e.g. https://example.com/api</span>
    token: <span class="nv">$slack</span>-token              <span class="c1"># 위에 secret을 참고 함 </span>
    <span class="c1">## username: &lt;override-username&gt; # optional username</span>
    <span class="c1">## icon: &lt;override-icon&gt; # optional icon for the message (supports both emoij and url notation)</span>
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
Default Definition 참고. <a href="https://argocd-notifications.readthedocs.io/en/stable/services/slack/" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> SLACK으로 보낼 내용 정리 </a></p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Slack 연동<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>테스트를 위해 Application을 배포 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt; EOF | tee guestbook.yaml
</span><span class="s">apiVersion: argoproj.io/v1alpha1
</span><span class="s">kind: Application
</span><span class="s">metadata:
</span><span class="s">  name: guestbook
</span><span class="s">  annotations:
</span><span class="s">    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: dk-devops
</span><span class="s">    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: dk-devops
</span><span class="s">    notifications.argoproj.io/subscribe.on-sync-failed.slack: dk-devops
</span><span class="s">    notifications.argoproj.io/subscribe.on-sync-running.slack: dk-devops
</span><span class="s">    notifications.argoproj.io/subscribe.on-sync-status-unknown.slack: dev-ops
</span><span class="s">    notifications.argoproj.io/subscribe.on-deployed.slack: dk-devops
</span><span class="s">    notifications.argoproj.io/subscribe.on-health-degraded.slack: dk-devops
</span><span class="s">spec:
</span><span class="s">  destination:
</span><span class="s">    namespace: default
</span><span class="s">    server: https://kubernetes.default.svc
</span><span class="s">  project: default
</span><span class="s">  source:
</span><span class="s">    path: kustomize-guestbook
</span><span class="s">    repoURL: https://github.com/argoproj/argocd-example-apps.git
</span><span class="s">    targetRevision: HEAD
</span><span class="s">  syncPolicy:
</span><span class="s">    automated: {}
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p>그럼 아래와 같이 Slack으로 메시지가 오는 것을 확인 할 수 있다.</p>
<figure><figcaption>
            <h4>SLACK 확인</h4>
        </figcaption>
</figure>

<p>또는 UI에서 Application에 Annotation을 설정해서 확인 할 수 있다.
<figure><figcaption>
            <h4>GUI에서 Annotation 설정#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>GUI에서 Annotation 설정#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>GUI에서 Annotation 설정#3</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item></channel>
</rss>
