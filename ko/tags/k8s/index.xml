<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>k8s - Tag - Dokyung&#39;s DevOoOps</title>
        <link>https://huntedhappy.github.io/ko/tags/k8s/</link>
        <description>k8s - Tag - Dokyung&#39;s DevOoOps</description>
        <generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>huntedhappy@gmail.com (Dokyung)</managingEditor>
            <webMaster>huntedhappy@gmail.com (Dokyung)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 10 Apr 2022 18:32:52 &#43;0900</lastBuildDate><atom:link href="https://huntedhappy.github.io/ko/tags/k8s/" rel="self" type="application/rss+xml" /><item>
    <title>The Documentation Networks</title>
    <link>https://huntedhappy.github.io/ko/networks/</link>
    <pubDate>Sun, 10 Apr 2022 18:32:52 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/networks/</guid>
    <description><![CDATA[<figure><figcaption>
            <h4>OSI 7Layer</h4>
        </figcaption>
</figure>

<h2 id="1-l2">1. L2</h2>
<h3 id="11-mac주소">1.1. MAC주소</h3>
<p>MAC은 일반적으로 OSI 7 Layer중에서 2 Layer에 속한다. 확인하는 방법은 윈두우에서 CMD창을 연 후 ipconfig /all명령어를 사용하면 확인할 수 있다. 나오는 부분중에 물리적 주소라고 나오는 것을 확인 할 수 있다. 리눅스의 경우는 ifconfig라고 치면 바로 확인을 할 수 있을 것이다.</p>
<ul>
<li>물론 H/W 주소이지만 변경은 가능하다. 그러므르 보안적으로 이슈가 될 수 있다.</li>
</ul>
<figure><figcaption>
            <h4>MAC 주소 확인</h4>
        </figcaption>
</figure>

<p>확인을 하게 되면
E0-3F-49-AB-C8-AD
위와 같이 표시가 되며 절반으로 나누어 앞의 세부분은 생산자를 나타내고, 뒤의 세 부분은 장치의 일련번호(Host Identifier)을 나타낸다.</p>
<p><a href="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> MAC 제조회사 찾는 곳 </a>
<figure><figcaption>
            <h4>제조회사 찾는 방법</h4>
        </figcaption>
</figure>
</p>
<h3 id="12-arp--rarp--garp">1.2. ARP &amp; RARP &amp; GARP</h3>
<p>ARP(Address Resolution Protofcol)는 IP주소를 MAC주소와 대응(Bind)시키기 위해 사용되는 프로토콜이다.
IP주소는 알지만 MAC주소를 모르는 경우 사용 할 수 있다.</p>
<p>윈도우에서 arp -a {IP} 로 확인 할 수 있다.
<figure><figcaption>
            <h4>ARP 확인</h4>
        </figcaption>
</figure>
</p>
<p>RARP(Reverse Address Resolution Protocol)는 그 반대로 MAC주소로 IP를 대응(Bind)시키기 위해 사용되는 프로토콜이다.
MAC주소는 알지만 IP주소를 모르는 경우 사용 할 수 있다.</p>
<p>GARP(Gratuitous ARP)는 PC를 스위치에 연결을 하게 되면 나의 IP와 MAC은 이거라고 알리는대 사용한다. 3번정도 GARP를 보낸다. 그래서 IP 주소 충돌을 감지 할 수 있으며, GARP를 수신한 모든 호스트/라우터는 ARP Table을 갱신할 수 있다. 또 다른 목적은 VRRP/HSRP프로토콜에서 사용된다(VRRP/HSRP의 설명은 패스한다).</p>
<p>ARP probe
ARP probe는 sender의 IP주소를 0으로 해서 ARP요청을 하며 IPv4 주소의 충돌을 감지 할 수 있다.</p>
<figure><figcaption>
            <h4>Probe 확인</h4>
        </figcaption>
</figure>

<p>ARP announcements
다른 호스트의 ARP 테이블을 갱신 할 수 있다.
<figure><figcaption>
            <h4>Announcement 확인</h4>
        </figcaption>
</figure>
</p>
<h3 id="13-l2-통신">1.3. L2 통신</h3>
<table>
<thead>
<tr>
<th>기능</th>
<th>설명</th>
<th>기술</th>
</tr>
</thead>
<tbody>
<tr>
<td>learning</td>
<td>출발지 주소가 MAC 테이블에 주소가 없으면 MAC 주소를 저장</td>
<td>MAC table</td>
</tr>
<tr>
<td>flooding</td>
<td>목적지 주소가 MAC 테이블에 없으면 전체 포트로 전달</td>
<td>Broadcast</td>
</tr>
<tr>
<td>filtering</td>
<td>출발지/목적지가 동일 네트워크에 있으면 다른 네트워크로 전파 차단</td>
<td>Collision Domain</td>
</tr>
<tr>
<td>aging</td>
<td>MAC 테이블 캐쉬</td>
<td>Aging Time</td>
</tr>
</tbody>
</table>
<ol>
<li>PC를 연결 하면 PC에서 PROBE를 3번 정도 보내고 Announcement 후 스위치 및 PC에서는 ARP를 Learning한다.</li>
<li>만약 스위치 및 PC에서 arp table이 없으면 aging Time이 끝났거나 또는 GARP를 받지 못했을 경우 또는 ARP테이블이 갱신이 안될 경우, PC 1에서 PC 2로 통신을 할 때 Broadcast(flooding)를 보낸다. 이 때 스위치에서는 동일한 VLAN(Filtering)의 모든 포트로 (목적지 IP:ff:ff:ff:ff:ff) 브로드캐스트를 보낸다.</li>
<li>PC2는 해당 브로드캐스트를 받고 반대로 PC1에게 전달을 하게 된다.</li>
<li>스위치 및 PC는 해당 MAC Table에 저장한다. 그리고 스위치에서 연결된 PC에서 트래픽을 전달 한다.(Forwarding)</li>
</ol>
<figure><figcaption>
            <h4>L2 통신</h4>
        </figcaption>
</figure>

]]></description>
</item><item>
    <title>The Documentation TAP</title>
    <link>https://huntedhappy.github.io/ko/tanzu-application-platform/</link>
    <pubDate>Wed, 09 Mar 2022 11:09:57 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/tanzu-application-platform/</guid>
    <description><![CDATA[<h2 id="1-vmware-tap">1. VMware TAP?</h2>
<p>VMware Tanzu 애플리케이션 플랫폼은 개발자와 운영자가 Kubernetes 플랫폼에서 앱을 보다 쉽게 구축, 배포 및 관리할 수 있도록 도와주는 패키지된 구성 요소 집합입니다.</p>
<p>Tanzu 애플리케이션 플랫폼은 Kubernetes 기반 앱 개발의 내부 루프와 외부 루프 모두에서 워크플로를 단순화합니다.</p>
<ul>
<li>
<p>내부 루프: 내부 루프는 개발자가 앱을 코딩하고 테스트하는 로컬 개발 환경을 설명합니다. 내부 루프에서 발생하는 활동에는 코드 작성, 버전 제어 시스템에 커밋, 개발 또는 스테이징 환경에 배포, 테스트 및 추가 코드 변경이 포함됩니다.</p>
</li>
<li>
<p>외부 루프: 외부 루프는 앱을 프로덕션에 배포하고 시간이 지남에 따라 유지 관리하는 단계를 설명합니다. 예를 들어, 클라우드 네이티브 플랫폼에서 외부 루프에는 컨테이너 이미지 빌드, 컨테이너 보안 추가, 지속적 통합(CI) 및 지속적 전달(CD) 파이프라인 구성과 같은 활동이 포함됩니다.</p>
</li>
</ul>
<p>VMware Tanzu 애플리케이션 플랫폼은 보안 및 확장을 지원하는 모든 Kubernetes에서 코드를 실행할 수 있도록 사전 포장된 프로덕션 경로를 개발 팀에 제공합니다. 팀이 조직의 기본 설정에 따라 사용자 지정할 수 있도록 모듈화된 애플리케이션 인식 플랫폼입니다.</p>
<h3 id="주의-사항">주의 사항</h3>
<p>현재 버그가 있는것으로 보임 Private Harbor 구성시 사설 인증서 문제가 발생 하기 때문에 외부 Registry 활용 필요,
Github 연동시 Integration으로 설정</p>
<h3 id="사전-설치">사전 설치</h3>
<ul>
<li>DOCKER</li>
<li>GCR (Google Container Registry)</li>
<li>GitHub</li>
<li>DNS Records</li>
</ul>
<h3 id="resource-requirements">Resource requirements</h3>
<p>To deploy all Tanzu Application Platform packages, your cluster must have at least:</p>
<ul>
<li>8 CPUs for i9 (or equivalent) available to Tanzu Application Platform components</li>
<li>12 CPUs for i7 (or equivalent) available to Tanzu Application Platform components</li>
<li>8 GB of RAM across all nodes available to Tanzu Application Platform</li>
<li>12 GB of RAM is available to build and deploy applications, including Minikube. VMware recommends 16 GB of RAM for an optimal experience.</li>
<li>70 GB of disk space available per node
For the full profile, or use of Security Chain Security Tools - Store, your cluster must have a configured default StorageClass.</li>
</ul>
<h3 id="tools-and-cli-requirements">Tools and CLI requirements</h3>
<p>Installation requires:</p>
<ul>
<li>The Kubernetes CLI, kubectl, v1.20, v1.21 or v1.22, installed and authenticated with administrator rights for your target cluster. See Install Tools in the Kubernetes documentation.</li>
</ul>
<h2 id="2-tap">2. TAP</h2>
<h3 id="21-tanzu-network-등록">2.1. Tanzu Network 등록</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tanzu Network ID/PW<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">INSTALL_REGISTRY_USERNAME</span><span class="o">=</span>        <span class="c1">#### Tanzu Network ID</span>
<span class="nb">export</span> <span class="nv">INSTALL_REGISTRY_PASSWORD</span><span class="o">=</span>        <span class="c1">#### Tanzu Network PW</span>
<span class="nb">export</span> <span class="nv">INSTALL_REGISTRY_HOSTNAME</span><span class="o">=</span>registry.tanzu.vmware.com
<span class="nb">export</span> <span class="nv">TAP_VERSION</span><span class="o">=</span>1.0.1
</code></pre></td></tr></table>
</div>
</div><p>namespace 생성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create ns tap-install
</code></pre></td></tr></table>
</div>
</div><p>tanzu registry 추가</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu secret registry add tap-registry <span class="se">\
</span><span class="se"></span>  --username <span class="si">${</span><span class="nv">INSTALL_REGISTRY_USERNAME</span><span class="si">}</span> --password <span class="si">${</span><span class="nv">INSTALL_REGISTRY_PASSWORD</span><span class="si">}</span> <span class="se">\
</span><span class="se"></span>  --server <span class="si">${</span><span class="nv">INSTALL_REGISTRY_HOSTNAME</span><span class="si">}</span> <span class="se">\
</span><span class="se"></span>  --export-to-all-namespaces --yes --namespace tap-install
</code></pre></td></tr></table>
</div>
</div><p>tanzu repository 추가</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu package repository add tanzu-tap-repository <span class="se">\
</span><span class="se"></span>  --url registry.tanzu.vmware.com/tanzu-application-platform/tap-packages:<span class="nv">$TAP_VERSION</span> <span class="se">\
</span><span class="se"></span>  --namespace tap-install
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p><figure><figcaption>
            <h4>EULA 허용</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>EULA 허용</h4>
        </figcaption>
</figure>
</p>
<h3 id="22-tanzu-tap-설치-리스트-확인">2.2. Tanzu TAP 설치 리스트 확인</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Registry / Repository 확인<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu secret registry list -n tap-install

tanzu package repository list -n tap-install

tanzu package repository get tanzu-tap-repository --namespace tap-install

tanzu package available list --namespace tap-install

tanzu package available list tap.tanzu.vmware.com --namespace tap-install
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p><figure><figcaption>
            <h4>Registry 리스트 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Repository 리스트 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Package 리스트 확인</h4>
        </figcaption>
</figure>
</p>
<h3 id="23-tanzu-tap-설치">2.3. Tanzu TAP 설치</h3>
<p>Private Harbor의 경우 사설 인증서가 문제가 있으므로 외부에서 제공하는 Registry 사용하는 필요.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>TAP 설치<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>GCR에서 키값을 json으로 다운로드 받은 후 service_account_key[변수] 저장</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu secret registry add registry-credentials --server gcr.io --username _json_key --password <span class="s2">&#34;</span><span class="k">$(</span>cat main-xxxx-xxx-xxxx.json<span class="k">)</span><span class="s2">&#34;</span> --namespace tap-install
<span class="nv">service_account_key</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>cat main-xxxx-xxx-xxxx.json<span class="k">)</span><span class="s2">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>실행 파일 설정</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;EOF &gt; gcr-tap-values.yaml
</span><span class="s">profile: full
</span><span class="s">ceip_policy_disclosed: true # The value must be true for installation to succeed
</span><span class="s">
</span><span class="s">buildservice:
</span><span class="s">  kp_default_repository: &#34;gcr.io/{Registry ID}/build-service&#34;
</span><span class="s">  kp_default_repository_username: _json_key
</span><span class="s">  kp_default_repository_password: &#39;$(echo $service_account_key)&#39;
</span><span class="s">  tanzunet_username: &#34;&#34;                             ## Tanzu Network ID
</span><span class="s">  tanzunet_password: &#34;&#34;                             ## Tanzu Network Password
</span><span class="s">  descriptor_name: &#34;tap-1.0.0-full&#34;
</span><span class="s">  enable_automatic_dependency_updates: true
</span><span class="s">
</span><span class="s">supply_chain: basic
</span><span class="s">
</span><span class="s">cnrs:
</span><span class="s">  domain_name: tkg.io
</span><span class="s">
</span><span class="s">accelerator:
</span><span class="s">  server:
</span><span class="s">    service_type: &#34;ClusterIP&#34;
</span><span class="s">
</span><span class="s">ootb_supply_chain_basic:
</span><span class="s">  registry:
</span><span class="s">    server: &#34;gcr.io&#34;
</span><span class="s">    repository: &#34;{Registry ID}/supply_chain&#34;
</span><span class="s">  gitops:
</span><span class="s">    #repository_prefix: git@github.com:vmware-tanzu/
</span><span class="s">    #branch: main
</span><span class="s">    #user_name: supplychain
</span><span class="s">    #user_email: supplychain
</span><span class="s">    #commit_message: supplychain@cluster.local
</span><span class="s">    #ssh_secret: git-ssh  
</span><span class="s">    ssh_secret: &#34;&#34;
</span><span class="s">  cluster_builder: default
</span><span class="s">  service_account: default
</span><span class="s">
</span><span class="s">learningcenter:
</span><span class="s">  ingressDomain: &#34;tkg.io&#34;
</span><span class="s">  ingressClass: contour
</span><span class="s">  ingressSecret:
</span><span class="s">    secretName: workshops.example.com-tls
</span><span class="s">
</span><span class="s">contour:
</span><span class="s">  envoy:
</span><span class="s">    service:
</span><span class="s">      type: LoadBalancer
</span><span class="s">
</span><span class="s">tap_gui:
</span><span class="s">  service_type: ClusterIP
</span><span class="s">  ingressEnabled: &#34;true&#34;
</span><span class="s">  ingressDomain: &#34;tkg.io&#34;
</span><span class="s">  app_config:
</span><span class="s">    app:
</span><span class="s">      baseUrl: http://tap-gui.tkg.io
</span><span class="s">      support:
</span><span class="s">        url: https://tanzu.vmware.com/support
</span><span class="s">        items:
</span><span class="s">          - title: Contact Support
</span><span class="s">            icon: email
</span><span class="s">            links:
</span><span class="s">              - url: https://tanzu.vmware.com/support
</span><span class="s">                title: Tanzu Support Page
</span><span class="s">          - title: Documentation
</span><span class="s">            icon: docs
</span><span class="s">            links:
</span><span class="s">              - url: https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/index.html
</span><span class="s">                title: Tanzu Application Platform Documentation
</span><span class="s">    integrations:
</span><span class="s">      github: # Other integrations available see NOTE below
</span><span class="s">        - host: github.com
</span><span class="s">          token: &#34;{GIT TOKEN}&#34;
</span><span class="s">
</span><span class="s">    catalog:
</span><span class="s">      locations:
</span><span class="s">        - type: url
</span><span class="s">          target: https://github.com/huntedhappy/tanzu-java-web-app/catalog-info.yaml
</span><span class="s">
</span><span class="s">    backend:
</span><span class="s">      baseUrl: http://tap-gui.tkg.io
</span><span class="s">      cors:
</span><span class="s">        origin: http://tap-gui.tkg.io
</span><span class="s">
</span><span class="s">#    ##Existing values file above (OIDC)
</span><span class="s">#    auth:
</span><span class="s">#      allowGuestAccess: true
</span><span class="s">#      environment: development
</span><span class="s">#      loginPage:
</span><span class="s">#        github:
</span><span class="s">#          title: Github Login
</span><span class="s">#          message: Enter with your GitHub account
</span><span class="s">#      providers:
</span><span class="s">#        github:
</span><span class="s">#          development:
</span><span class="s">#            clientId: 
</span><span class="s">#            clientSecret: 
</span><span class="s">#            ## uncomment if using GitHub Enterprise
</span><span class="s">#            # enterpriseInstanceUrl:
</span><span class="s">
</span><span class="s">metadata_store:
</span><span class="s">  app_service_type: LoadBalancer # (optional) Defaults to LoadBalancer. Change to NodePort for distributions that don&#39;t support LoadBalancer
</span><span class="s">
</span><span class="s">grype:
</span><span class="s">  namespace: &#34;tap-install&#34; # (optional) Defaults to default namespace.
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>TAP 설치</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu package install tap -p tap.tanzu.vmware.com -v <span class="nv">$TAP_VERSION</span> --values-file gcr-tap-values.yml -n tap-install
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<figure><figcaption>
            <h4>TAP 설치 완료</h4>
        </figcaption>
</figure>

<h3 id="24-tanzu-tap-rbac-설정">2.4. Tanzu TAP RBAC 설정</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>RBAC 설정<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">dockerconfigjson</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>kubectl get secret tbs-builder-secret-gen-placeholder-secret -n tap-install -o <span class="nv">jsonpath</span><span class="o">={</span>.data.<span class="se">\\</span>.dockerconfigjson<span class="o">}</span><span class="k">)</span><span class="s2">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;EOF | tee rbac.yaml
</span><span class="s">apiVersion: v1
</span><span class="s">kind: Secret
</span><span class="s">metadata:
</span><span class="s">  name: tap-registry
</span><span class="s">  annotations:
</span><span class="s">    secretgen.carvel.dev/image-pull-secret: &#34;&#34;
</span><span class="s">type: kubernetes.io/dockerconfigjson
</span><span class="s">data:
</span><span class="s">  .dockerconfigjson: $(echo $dockerconfigjson)
</span><span class="s">---
</span><span class="s">apiVersion: v1
</span><span class="s">kind: ServiceAccount
</span><span class="s">metadata:
</span><span class="s">  name: default
</span><span class="s">secrets:
</span><span class="s">  - name: registry-credentials
</span><span class="s">imagePullSecrets:
</span><span class="s">  - name: registry-credentials
</span><span class="s">  - name: tap-registry
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: Role
</span><span class="s">metadata:
</span><span class="s">  name: default
</span><span class="s">rules:
</span><span class="s">- apiGroups: [source.toolkit.fluxcd.io]
</span><span class="s">  resources: [gitrepositories]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [source.apps.tanzu.vmware.com]
</span><span class="s">  resources: [imagerepositories]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [carto.run]
</span><span class="s">  resources: [deliverables, runnables]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [kpack.io]
</span><span class="s">  resources: [images]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [conventions.apps.tanzu.vmware.com]
</span><span class="s">  resources: [podintents]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [&#34;&#34;]
</span><span class="s">  resources: [&#39;configmaps&#39;]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [&#34;&#34;]
</span><span class="s">  resources: [&#39;pods&#39;]
</span><span class="s">  verbs: [&#39;list&#39;]
</span><span class="s">- apiGroups: [tekton.dev]
</span><span class="s">  resources: [taskruns, pipelineruns]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [tekton.dev]
</span><span class="s">  resources: [pipelines]
</span><span class="s">  verbs: [&#39;list&#39;]
</span><span class="s">- apiGroups: [kappctrl.k14s.io]
</span><span class="s">  resources: [apps]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [serving.knative.dev]
</span><span class="s">  resources: [&#39;services&#39;]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [servicebinding.io]
</span><span class="s">  resources: [&#39;servicebindings&#39;]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [services.apps.tanzu.vmware.com]
</span><span class="s">  resources: [&#39;resourceclaims&#39;]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [scanning.apps.tanzu.vmware.com]
</span><span class="s">  resources: [&#39;imagescans&#39;, &#39;sourcescans&#39;]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: RoleBinding
</span><span class="s">metadata:
</span><span class="s">  name: default
</span><span class="s">roleRef:
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">  kind: Role
</span><span class="s">  name: default
</span><span class="s">subjects:
</span><span class="s">  - kind: ServiceAccount
</span><span class="s">    name: default
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h3 id="25-workload-실행">2.5. workload 실행</h3>
<p>INGRESS IP 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl get svc -n tap-install

kubectl get httpproxy -A
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>ingress 및 DNS 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>gui 접속 후 Tanzu Java Web App 실행</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>gui 접속 후 Tanzu Java Web App 실행</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>gui 접속 후 Tanzu Java Web App 실행</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>gui 접속 후 Tanzu Java Web App 다운로드</h4>
        </figcaption>
</figure>
</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>GIT PUSH<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>미리 GIT에 프로젝트 생성 후 다운로드 받은 ZIP파일 PUSH</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">unzip tanzu-java-web-app.zip

git init
git remote add origin git@github.com:huntedhappy/tanzu-java-web-app
git add .
git commit -m <span class="s1">&#39;first&#39;</span>
git push origin main
</code></pre></td></tr></table>
</div>
</div><p>apps workload 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu apps workload create tanzu-java-web-app <span class="se">\
</span><span class="se"></span> --git-repo https://github.com/huntedhappy/tanzu-java-web-app <span class="se">\
</span><span class="se"></span> --git-branch main <span class="se">\
</span><span class="se"></span> --type web <span class="se">\
</span><span class="se"></span> --label apps.tanzu.vmware.com/has-tests<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span><span class="se"></span> --yes <span class="se">\
</span><span class="se"></span> -n tap-install
</code></pre></td></tr></table>
</div>
</div><p>배포 상태 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu apps cluster-supply-chain list

tanzu apps workload tail tanzu-java-web-app --since 10m --timestamp -n tap-install

kubectl get workload,gitrepository,pipelinerun,images.kpack,podintent,app,services.serving -n tap-install
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="3-visural-studio">3. Visural Studio</h2>
<h3 id="31-extenstion-설정">3.1. Extenstion 설정</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">apt search openjdk

apt install openjdk-11-jdk -y
java --version
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s2">&#34;allow_k8s_contexts(&#39;</span><span class="k">$(</span>kubectl config current-context<span class="k">)</span><span class="s2">&#39;)&#34;</span> &gt;&gt; /var/tmp/tap/tanzu-java-web-app/Tiltfile

<span class="c1">## 맨아래 해당 context가 들어가 있는 것을 확인 할 수 있다.</span>
cat /var/tmp/tap/tanzu-java-web-app/Tiltfile

ctrl + <span class="nb">shift</span> + p
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>VS 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>VS 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>VS 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>VS 설정</h4>
        </figcaption>
</figure>
</p>
<h3 id="32-live-update-start">3.2. Live Update Start</h3>
<p>해당 부분을 수정 하면 자동으로 GIT에 업데이트가 되면서 바뀌는것을 볼수 있다.
<figure><figcaption>
            <h4>수정#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>수정#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>수정#3</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>수정#4</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item><item>
    <title>The Documentation NSXT and Ansible</title>
    <link>https://huntedhappy.github.io/ko/nsxt/</link>
    <pubDate>Wed, 19 Jan 2022 09:27:33 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/nsxt/</guid>
    <description><![CDATA[<h2 id="1-ansible을-통한-nsxt-구성">1. Ansible을 통한 NSXT 구성</h2>
<p>NSXT를 Ansible로 구성.</p>
<p>Ansible의 대한 보충 설명을 할 수 있으면 추후에 진행 하기로 하고 우선 설정의 대해서 설명을 먼저 하겠다.</p>
<p>먼저.. 이 부분을 블로그로 쓰는게 맞을까라는 고민을 좀 했다.</p>
<p>이유는 우선 Ansible로 구성이 되어 있기 때문에 코드가 들어가 있다. 그래서 NSXT Ansible Module을 다운로드 받고 나서 추가 된 부분을 Git Hub에 올려 두었다.</p>
<h2 id="2-설치">2. 설치</h2>
<h3 id="21-파이썬-설치">2.1. 파이썬 설치</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">yum update -y

rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

yum install epel-release yum-utils python3-pip -y

pip3 install --upgrade pip setuptools ansible pyvmomi pyvim requests ruamel.yaml

dnf install libnsl -y
</code></pre></td></tr></table>
</div>
</div><p>파이썬을 설치 후 버전을 변경 하고 싶으면 아래 처럼 구성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sudo rm /usr/bin/python
sudo update-alternatives --install /usr/bin/python python /usr/bin/python<span class="o">(</span>TAB<span class="o">)</span> <span class="c1">## 설치되어 있는 버전을 확인 할 수 있다.</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>파이썬 버전 확인</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 <span class="m">1</span>
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 <span class="m">2</span>

sudo update-alternatives --config python
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>파이썬 버전 선택</h4>
        </figcaption>
</figure>

<h3 id="22-ovf-tool">2.2. OVF Tool</h3>
<p>OVF Tool 다운로드</p>
<p><a href="https://developer.vmware.com/web/tool/4.4.0/ovf" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> OVF Tool 다운로드 링크</a></p>
<figure><figcaption>
            <h4>원하는 버전으로 다운로드 받는다.</h4>
        </figcaption>
</figure>

<h3 id="23-nsxt-ansible-download">2.3. NSXT Ansible Download</h3>
<p>제공한 버전은 3.1 기준으로 구성을 하였다.</p>
<figure><figcaption>
            <h4>원하는 버전으로 다운로드 받는다.</h4>
        </figcaption>
</figure>

<h3 id="24-ansible-실행">2.4. Ansible 실행</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">ovftool -v 에러가 나오면 dnf install libnsl 설치
ansible-playbook 01_deploy_first_node.yml -vvv
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>에러 발생시 dnf install libnsl 설치.</h4>
        </figcaption>
</figure>

<h3 id="25-github">2.5. Github</h3>
<p>다운로드 NSXT Ansible Module을 압축을 해제 하면 되는대, 그 부분을 별도로 github에 올려두었다.</p>
<p>추가적으로 vars라는 폴더와, 00 ~ 10 번 , answerfile,yml이 추가 된 것을 확인 할 수 있다.</p>
<p>코드를 하나 하나 설명을 하기에는.. 좀 벅찬 느낌이 든다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git clone https://github.com/huntedhappy/nsxt3.1
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>The Documentation NAP</title>
    <link>https://huntedhappy.github.io/ko/nap/</link>
    <pubDate>Thu, 13 Jan 2022 18:10:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/nap/</guid>
    <description><![CDATA[<h2 id="1-nap">1. NAP?</h2>
<p>NAP(NGINX App Protect)은 WAF and DoS Protection을 제공 한다. NGINX Plus에서 제공을 하며 컨테이너 환경에서 App을 보호 하기 위한 솔루션이다. 대부분 컨테이너 환경에서 Ingress를 NGINX로 많이 사용 할 것이다. NGINX PLUS 라이센스를 구매 하면 NAP을 사용 할 수 있다.</p>
<h2 id="2-사전-구성">2. 사전 구성</h2>
<ul>
<li>Docker v18.09+</li>
<li>GNU Make</li>
<li>git</li>
<li>Helm3</li>
<li>OpenSSL</li>
<li><a href="https://github.com/OpenVPN/easy-rsa.git" target="_blank" rel="noopener noreffer">https://github.com/OpenVPN/easy-rsa.git</a></li>
<li>apt install git \  make \ make-guile</li>
</ul>
<h2 id="3-설치">3. 설치</h2>
<p>Namespace 생성 후 easy-rsa git clone</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create ns ingress-nginx

git clone https://github.com/OpenVPN/easy-rsa.git
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>easy rsa</h4>
        </figcaption>
</figure>

<p>인증서 생성 (인증서 생성은 반드시 이렇게 하지 않아도 된다.)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> easy-rsa/easyrsa3/

./easyrsa init-pki
./easyrsa build-ca
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>easy rsa 구성#1</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">./easyrsa gen-req wildcard

./easyrsa sign-req server wildcard
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>easy rsa 구성#2</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">openssl rsa -in /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard.key -out /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard-unencrypted.key

<span class="c1">## 인증서 Secret 생성</span>
kubectl create -n ingress-nginx secret tls wildcard-tls --key /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard-unencrypted.key --cert /var/tmp/easy-rsa/easyrsa3/pki/issued/wildcard.crt

<span class="c1">## 안지워도된다.</span>
rm /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard-unencrypted.key
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>ssl 인증서 secret 생성</h4>
        </figcaption>
</figure>

<p>secret 인증서 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl get secret -n ingress-nginx
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>secret 확인</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp

<span class="c1">## nap을 위한 yaml파일 다운로드</span>
git clone https://github.com/nginxinc/kubernetes-ingress/

<span class="c1">## nap을 위한 helm repo 주소 추가</span>
helm repo add nginx-stable https://helm.nginx.com/stable
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>git clone</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp/kubernetes-ingress/deployments/helm-chart
git checkout v1.11.3
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>git checkout</h4>
        </figcaption>
</figure>

<p>라이센스 발급 30일 trial을 받을 수 있다. 가입 필요
<a href="https://www.nginx.com/free-trial-request-nginx-ingress-controller/" target="_blank" rel="noopener noreffer"><i class="far fa-file-archive fa-fw"></i>&nbsp;NAP 발급 링크</a></p>
<p>미리 Harbor에 ingress-nginx project 생성이 되어 있어야함</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">REGISTRY</span><span class="o">=</span>&lt;registry IP or FQDN&gt;
<span class="nv">NS</span><span class="o">=</span>&lt;your namespace&gt;
<span class="nv">REGISTRY</span><span class="o">=</span>10.253.110.4
<span class="nv">NS</span><span class="o">=</span>ingress-nginx
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Harbor 확인</h4>
        </figcaption>
</figure>

<p>발급 받은 라이센스를 복사</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mkdir -p /var/tmp/kubernetes-ingress
cp nginx-repo.key nginx-repo.crt  /var/tmp/kubernetes-ingress
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>라이센스 복사</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp/kubernetes-ingress

make debian-image-nap-plus <span class="nv">PREFIX</span><span class="o">=</span><span class="nv">$REGISTRY</span>/<span class="nv">$NS</span>/nginx-plus-ingress <span class="nv">TARGET</span><span class="o">=</span>container
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Docker Pull</h4>
        </figcaption>
</figure>

<p>docker image 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">docker images
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Docker Image 확인</h4>
        </figcaption>
</figure>

<p>Harbor에 Push</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">docker image tag 18a49497920c <span class="nv">$REGISTRY</span>/<span class="nv">$NS</span>/nginx-plus-ingress:1.11.3

docker login &lt;harbor IP&gt;
make push <span class="nv">PREFIX</span><span class="o">=</span><span class="nv">$REGISTRY</span>/<span class="nv">$NS</span>/nginx-plus-ingress
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>Harbor push#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Harbor push#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Harbor push#3</h4>
        </figcaption>
</figure>
</p>
<p>Helm Value 복사 (원본을 건드리지 않게 하기 위해 별도로 복사를 한다.)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> deployments/helm-chart
cp values-plus.yaml values-plus.yaml.orig
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Helm Value 복사</h4>
        </figcaption>
</figure>

<p>복사한 파일을 열어 보면 아래와 같이 되어 있는대 수정해줘야 하는 부분을 수정 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## vi 편집</span>
vi values-plus.yaml 

<span class="c1">## 내용 (imagePullSecretName의 경우 Harbor에 Public으로 만들었으면 상관 없음)</span>
controller:
  replicaCount: <span class="m">1</span>
  nginxplus: <span class="nb">true</span>
  image:
    repository: 10.253.106.46/ingress-nginx/nginx-plus-ingress
    tag: <span class="s2">&#34;1.11.3&#34;</span>
  service:
    externalTrafficPolicy: Cluster
  appprotect:
    <span class="c1">## Enable the App Protect module in the Ingress Controller.</span>
    enable: <span class="nb">true</span>
  wildcardTLS:
    <span class="c1">## The base64-encoded TLS certificate for every Ingress host that has TLS enabled but no secret specified.</span>
    <span class="c1">## If the parameter is not set, for such Ingress hosts NGINX will break any attempt to establish a TLS connection.</span>
    cert: <span class="s2">&#34;&#34;</span>

    <span class="c1">## The base64-encoded TLS key for every Ingress host that has TLS enabled but no secret specified.</span>
    <span class="c1">## If the parameter is not set, for such Ingress hosts NGINX will break any attempt to establish a TLS connection.</span>
    key: <span class="s2">&#34;&#34;</span>

    <span class="c1">## The secret with a TLS certificate and key for every Ingress host that has TLS enabled but no secret specified.</span>
    <span class="c1">## The value must follow the following format: `&lt;namespace&gt;/&lt;name&gt;`.</span>
    <span class="c1">## Used as an alternative to specifying a certificate and key using `controller.wildcardTLS.cert` and `controller.wildcardTLS.key` parameters.</span>
    <span class="c1">## Format: &lt;namespace&gt;/&lt;secret_name&gt;</span>
    secret: ingress-nginx/wildcard-tls
  serviceAccount:
    <span class="c1">## The name of the service account of the Ingress controller pods. Used for RBAC.</span>
    <span class="c1">## Autogenerated if not set or set to &#34;&#34;.</span>
    name: ingress-nginx
    <span class="c1">## The name of the secret containing docker registry credentials.</span>
    <span class="c1">## Secret must exist in the same namespace as the helm release.</span>
    imagePullSecretName: <span class="s2">&#34;regcred&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>PSP를 혀용하기 위해 해당 파일을 실행 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/nginx-psp.yaml
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>psp 허용</h4>
        </figcaption>
</figure>

<p>HELM 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create secret generic regcred --from-file<span class="o">=</span>.dockerconfigjson<span class="o">=</span><span class="nv">$HOME</span>/.docker/config.json --type<span class="o">=</span>kubernetes.io/dockerconfigjson -n ingress-nginx

helm install nap nginx-stable/nginx-ingress -f values-plus.yaml -n ingress-nginx
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>helm으로 nap 설치</h4>
        </figcaption>
</figure>

<p>설치 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">watch -n <span class="m">1</span> kubectl -n ingress-nginx get all
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>설치 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>L4 확인</h4>
        </figcaption>
</figure>
</p>
<h2 id="4-waf">4. WAF</h2>
<p>WAF TEST를 위해 웹 구성</p>
<h3 id="41-test-web-구성">4.1. TEST WEB 구성</h3>
<p>TEST를 하기 위해 제공하는 Manifest를 다운로드 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe-rbac.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe-ingress.yaml

kubectl apply -f cafe-rbac.yaml -n <span class="nb">test</span>
kubectl apply -f cafe.yaml -n <span class="nb">test</span>

vi cafe-ingress.yaml <span class="o">(</span>인증서 만들었던 Domain으로 변경<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Domain을 변경 한다.</h4>
        </figcaption>
</figure>

<p>Domain 변경 후 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f cafe-ingress.yaml -n <span class="nb">test</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Ingress 확인.</h4>
        </figcaption>
</figure>

<p>POSTMAN으로 접속이 되는지 확인
<figure><figcaption>
            <h4>POSTMAN 확인.</h4>
        </figcaption>
</figure>
</p>
<h3 id="42-waf-구성">4.2. WAF 구성</h3>
<p>ELK를 구성 하기 위해 syslog pod를 구성한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/syslog-rbac.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/syslog.yaml

kubectl apply -f syslog-rbac.yaml -n ingress-nginx
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f syslog.yaml -n ingress-nginx
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/ap-apple-uds.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/ap-dataguard-alarm-policy.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/ap-logconf.yaml

kubectl apply -f  ap-apple-uds.yaml -n <span class="nb">test</span>
kubeclt apply -f  ap-dataguard-alarm-policy.yaml -n <span class="nb">test</span>
kubectl apply -f  ap-logconf.yaml -n <span class="nb">test</span>
</code></pre></td></tr></table>
</div>
</div><p>ingress에 annotation을 설정</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe-ingress-ap.yaml
kubectl get pod -n ingress-nginx -o wide

<span class="c1">## vi 편집 실행</span>
vi cafe-ingress-ap.yaml

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: cafe-ingress
  annotations:
    appprotect.f5.com/app-protect-policy: <span class="s2">&#34;test/dataguard-alarm&#34;</span>
    appprotect.f5.com/app-protect-enable: <span class="s2">&#34;True&#34;</span>
    appprotect.f5.com/app-protect-security-log-enable: <span class="s2">&#34;True&#34;</span>
    appprotect.f5.com/app-protect-security-log: <span class="s2">&#34;test/logconf&#34;</span>
    appprotect.f5.com/app-protect-security-log-destination: <span class="s2">&#34;syslog:server=SYSLOG:514&#34;</span>
spec:
  ingressClassName: nginx <span class="c1"># use only with k8s version &gt;= 1.18.0</span>
  tls:  - hosts:
    - cafe.vcf.local  <span class="c1">## 인증서와 동일한 도메인으로 변경</span>
  rules:
  - host: cafe.vcf.local <span class="c1">## 인증서와 동일한 도메인으로 변경</span>
    http:
      paths:
      - path: /tea
        backend:
          serviceName: tea-svc
          servicePort: <span class="m">80</span>
      - path: /coffee
        backend:
          serviceName: coffee-svc
          servicePort: <span class="m">80</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## syslog service ip</span>
<span class="nv">SYSLOG_IP</span><span class="o">=</span>10.101.182.155
vi cafe-ingress-ap.yaml

sed -e <span class="s2">&#34;s/SYSLOG/</span><span class="nv">$SYSLOG_IP</span><span class="s2">/&#34;</span> cafe-ingress-ap.yaml &gt; cafe-ingress-ap-syslog.yaml
kubectl apply -n <span class="nb">test</span> -f cafe-ingress-ap-syslog.yaml

kubectl get ingress -n <span class="nb">test</span>

<span class="c1">## 아래 명령어로 annotation을 확인 할 수 있다.</span>
kubrectl get ingress cafe-ingress -n <span class="nb">test</span> -o yaml
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Annotation 확인.</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl get pod -n ingress-nginx

LOG 확인
kubectl -n ingress-nginx <span class="nb">exec</span> -it syslog-65d847447d-ghbvq -- tail -f /var/log/messages
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>syslog pod 확인.</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>PostMan 요청 후 REJECT확인.</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Pod 로그 확인시 Attack 확인.</h4>
        </figcaption>
</figure>
</p>
<h2 id="5-elk">5. ELK</h2>
<p>LOG를 좀 가시적이게 표현하기 위해 ELK를 구성</p>
<h3 id="51-elastic-연동">5.1. Elastic 연동</h3>
<p>logstach를 5144로 구성한 이유는 Logstach 구성시 514가 well-known 포트라 5144로 변경
logstash yaml 파일, <a href="/ko/nap/logstash_test.yaml" rel=""><i class="far fa-file-archive fa-fw"></i>&nbsp;logstash_test.yaml</a>.</p>
<figure><figcaption>
            <h4>logstach 확인.</h4>
        </figcaption>
</figure>

<p>ingress 설정에서 syslog server 를 logstash cluster IP로 설정
<figure><figcaption>
            <h4>annotation에서 logstach로 syslog IP 변경 .</h4>
        </figcaption>
</figure>
</p>
<p>해당 파일을 다운로드 받는다.</p>
<p><a href="https://github.com/f5devcentral/f5-waf-elk-dashboards" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Dashboard 링크 </a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mkdir /var/tmp/kibana
<span class="nb">cd</span> /var/tmp/kibana
cp false-positives-dashboards.ndjson overview-dashboard.ndjson /var/tmp/kibana
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>파일 다운로드</h4>
        </figcaption>
</figure>

<p>대쉬보드 업로드</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp

<span class="nv">KIBANA_URL</span><span class="o">=</span> <span class="o">{</span>FQDN or IP<span class="o">}</span>
<span class="nv">KIBANA_URL</span><span class="o">=</span>http://kibana.vcf.local:5601

jq -s . kibana/overview-dashboard.ndjson <span class="p">|</span> jq <span class="s1">&#39;{&#34;objects&#34;: . }&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>curl -k --location --request POST <span class="s2">&#34;</span><span class="nv">$KIBANA_URL</span><span class="s2">/api/kibana/dashboards/import&#34;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;kbn-xsrf: true&#39;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;Content-Type: text/plain&#39;</span> -d @- <span class="se">\
</span><span class="se"></span><span class="p">|</span> jq

jq -s . kibana/false-positives-dashboards.ndjson <span class="p">|</span> jq <span class="s1">&#39;{&#34;objects&#34;: . }&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>curl -k --location --request POST <span class="s2">&#34;</span><span class="nv">$KIBANA_URL</span><span class="s2">/api/kibana/dashboards/import&#34;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;kbn-xsrf: true&#39;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;Content-Type: text/plain&#39;</span> -d @- <span class="se">\
</span><span class="se"></span><span class="p">|</span> jq
</code></pre></td></tr></table>
</div>
</div><p>kibana접속 후 index patterns에 waf-logs-* 확인
<figure><figcaption>
            <h4>kibana 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>kibana 대시보드 확인</h4>
        </figcaption>
</figure>
</p>
<p><a href="https://devcentral.f5.com/s/articles/Deploying-NGINXplus-with-AppProtect-in-Tanzu-Kubernetes-Grid" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> 참고문헌 </a></p>
]]></description>
</item><item>
    <title>The Documentation Openshift</title>
    <link>https://huntedhappy.github.io/ko/openshift/</link>
    <pubDate>Thu, 13 Jan 2022 15:48:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/openshift/</guid>
    <description><![CDATA[<h2 id="1-openshift">1. Openshift</h2>
<p><code>오픈시프트 오리진(OpenShift Origin)</code>은 오픈시프트 온라인, 오픈시프트 데디케이티드, 오픈시프트 컨테이너 플랫폼에 사용되는 업스트림 커뮤니티 프로젝트이다. 도커 컨테이너 패키징 코어와 쿠버네티스 컨테이너 클러스터 관리 기능을 기반에 두고 개발된 오리진은 애플리케이션 수명 관리 기능과 데브옵스 도구를 통해 증강된다. 오리진은 오픈 소스 애플리케이션 컨테이너 플랫폼을 제공한다. 오리진 프로젝트의 모든 소스 코드는 깃허브에서 아파치 라이선스 (버전 2.0)을 통해 이용이 가능하다.[4]</p>
<p><code>오픈시프트 온라인(OpenShift Online)</code>은 레드햇의 퍼블릭 클라우드 애플리케이션 개발 및 호스팅 서비스이다. 온라인은 오리진 프로젝트 소스 코드의 버전 2를 제공하였으며, 아파치 라이선스 버전 2.0 하에서 이용이 가능하다.[5] 온라인은 리소스 할당 기어(gear) 하에서 구동되는 미리 빌드된 카트리지를 통해 다양한 언어, 프레임워크 데이터베이스를 지원한다. 개발자들은 오픈시프트 카트리지 API를 통해 다른 언어, 데이터베이스, 구성 요소를 추가할 수 있다.[6] 오픈시프트 3의 선호로 사용이 권장되지 않는다(deprecated).</p>
<p><code>오픈시프트 데디케이티드(OpenShift Dedicated)</code>는 레드햇의 매니지드 프라이빗 클러스터 기능으로, 도커가 제공하는 애플리케이션 컨테이너의 코어를 기반으로 빌드되며 레드햇 엔터프라이즈 리눅스의 토대 위에 쿠버네티스가 제공하는 오케스트레이션 및 관리가 포함되어 있다. 아마존 웹 서비스(AWS)와 구글 클라우드 플랫폼(GCP) 마켓플레이스를 통해 이용이 가능하다.</p>
<p><code>오픈시프트 컨테이너 플랫폼(OpenShift Container Platform)</code>은 레드햇의 사내(on-premises) 프라이빗 PaaS 제품으로, 도커가 제공하는 애플리케이션 컨테이너의 코어를 기반으로 빌드되며 레드햇 엔터프라이즈 리눅스의 토대 위에 쿠버네티스가 제공하는 오케스트레이션 및 관리가 포함되어 있다.</p>
<p>참고문헌  <a href="https://ko.wikipedia.org/wiki/%EC%98%A4%ED%94%88%EC%8B%9C%ED%94%84%ED%8A%B8" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Openshift </a></p>
<h2 id="2-사전구성">2. 사전구성</h2>
<h3 id="21-dns-구성">2.1. DNS 구성</h3>
<table>
<thead>
<tr>
<th>Common</th>
<th>Component Name</th>
<th>Cluster Name</th>
<th>BaseDomain</th>
<th>A Record</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>api</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.254</td>
</tr>
<tr>
<td></td>
<td>api-int</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.254</td>
</tr>
<tr>
<td>*</td>
<td>apps</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.10</td>
</tr>
<tr>
<td>console-openshift-console</td>
<td>apps</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.10</td>
</tr>
<tr>
<td>*</td>
<td>apps</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.10</td>
</tr>
<tr>
<td></td>
<td>bootstrap</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.10</td>
</tr>
<tr>
<td></td>
<td>master0</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.11</td>
</tr>
<tr>
<td></td>
<td>master1</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.12</td>
</tr>
<tr>
<td></td>
<td>master2</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.13</td>
</tr>
<tr>
<td></td>
<td>worker1</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.14</td>
</tr>
<tr>
<td></td>
<td>worker2</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.15</td>
</tr>
<tr>
<td></td>
<td>worker3</td>
<td>openshift</td>
<td>vcf.local</td>
<td>10.253.107.16</td>
</tr>
</tbody>
</table>
<figure><figcaption>
            <h4>DNS 구성</h4>
        </figcaption>
</figure>

<h3 id="22-dhcp-구성">2.2. DHCP 구성</h3>
<p>DHCP 구성 - NSXT로 구성을 하였다.</p>
<p><figure><figcaption>
            <h4>DHCP 구성#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>DHCP 구성#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>DHCP 구성#3</h4>
        </figcaption>
</figure>
</p>
<h2 id="3-파일-다운로드">3. 파일 다운로드</h2>
<p>OC를 다운로드 하기 위해 redhat에 가입 하고 Login 필요</p>
<p>OC 다운로드 링크  <a href="https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/auth?client_id=cloud-services&amp;redirect_uri=https%3A%2F%2Fconsole.redhat.com%2Fopenshift%2Finstall&amp;state=3c149436-35f6-4385-9739-68ad3e7cfb3e&amp;response_mode=fragment&amp;response_type=code&amp;scope=openid&amp;nonce=50b0191c-64a2-4655-81da-8ee6e7665375" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> OC 다운로드 링크 </a></p>
<p><figure><figcaption>
            <h4>OC 다운로드#1</h4>
        </figcaption>
</figure>

PullSecret을 저장해 둔다. <figure><figcaption>
            <h4>OC 다운로드#2</h4>
        </figcaption>
</figure>
</p>
<p>압축을 해제 하고 환경변수를 별도로 구성하지 않게 /usr/local/bin 에다가 copy를 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tar -xzvf openshift-client-linux.tar.gz

tar -xzvf openshift-install-linux.tar.gz

mv oc kubectl openshift-install /usr/local/bin

oc version

openshift-install version
</code></pre></td></tr></table>
</div>
</div><p>sshkeygen을 생성 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">ssh-keygen -t ed25519 -N <span class="s1">&#39;&#39;</span> -f ~/.ssh/id_rsa
	
<span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>ssh-agent -s<span class="k">)</span><span class="s2">&#34;</span>

ssh-add ~/.ssh/id_rsa
</code></pre></td></tr></table>
</div>
</div><h2 id="4-vcenter-ssh-thumbprint-얻기">4. vCenter SSH thumbprint 얻기</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">openssl s_client -servername vcsa01.vcf.local -connect vcsa01.vcf.local:443 <span class="p">|</span> openssl x509 <span class="p">|</span> tee ca.crt

cp ca.crt /usr/local/share/ca-certificates/

update-ca-certificates
</code></pre></td></tr></table>
</div>
</div><h2 id="5-temp-image">5. Temp Image</h2>
<p><a href="https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/latest/latest/" target="_blank" rel="noopener noreffer"><i class="far fa-file-archive fa-fw"></i>&nbsp;RHCOS Download Link</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/latest/latest/rhcos-vmware.x86_64.ova
</code></pre></td></tr></table>
</div>
</div><p>또는 아래와 같이 GUI에서 다운로드 받을 수 있다.</p>
<p><figure><figcaption>
            <h4>RHCOS OVA GUI 다운로드#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>RHCOS OVA GUI 다운로드#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>RHCOS OVA GUI 다운로드#3</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>RHCOS OVA GUI 다운로드#4</h4>
        </figcaption>
</figure>
</p>
<h3 id="51-temp-구성">5.1. Temp 구성</h3>
<p><figure><figcaption>
            <h4>vSphere Temp Upload#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>vSphere Temp Upload#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>vSphere Temp Upload#3</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>vSphere Temp Upload#4</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>vSphere Temp Upload#5</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>vSphere Temp Upload#6</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>vSphere Temp Upload#7</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>vSphere Temp Upload#8</h4>
        </figcaption>
</figure>
</p>
<h2 id="6-oc-install">6. OC Install</h2>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>SSL 구성<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>install-config.yaml 참조</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">apiVersion: v1
baseDomain: vcf.local
compute:
- architecture: amd64
  hyperthreading: Enabled
  name: worker
  platform: <span class="o">{}</span>
  replicas: <span class="m">3</span>
controlPlane:
  architecture: amd64
  hyperthreading: Enabled
  name: master
  platform: <span class="o">{}</span>
  replicas: <span class="m">3</span>
metadata:
  creationTimestamp: null
  name: ocp
networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: <span class="m">23</span>
  machineNetwork:
  - cidr: 10.0.0.0/16
  networkType: OpenShiftSDN
  serviceNetwork:
  - 172.30.0.0/16
platform:
  vsphere:
    apiVIP: 10.253.107.254
    cluster: OBCLUSTER
    datacenter: OBDC
    defaultDatastore: vsanDatastore
    ingressVIP: 10.253.107.253
    network: LS-MGMT-10.253.107.x
    password: Openbase!234
    username: administrator@vsphere.local
    vCenter: vcsa01.vcf.local
  fips: <span class="nb">false</span>
publish: External
pullSecret: <span class="s1">&#39;full secret 넣어줘야함&#39;</span>
sshKey: <span class="p">|</span>
  ssh-ed25519 AAAAC

</code></pre></td></tr></table>
</div>
</div><p>ocp 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mkdir ocp
cp install-config.yaml ocp
openshift-install create install-config --dir<span class="o">=</span>ocp
</code></pre></td></tr></table>
</div>
</div><p>Manifest 변경</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">openshift-install create manifests --dir ocp

<span class="nb">cd</span> ~/ocp/openshift
rm -rf 99_openshift-cluster-api_master-*
rm -rf 99_openshift-cluster-api_worker-machineset-0.yaml

<span class="nb">cd</span> ~/ocp/manifests/

vi cluster-scheduler-02-config.yml

apiVersion: config.openshift.io/v1
kind: Scheduler
metadata:
  creationTimestamp: null
  name: cluster
spec:
  mastersSchedulable: <span class="nb">false</span>    <span class="c1">### true &gt; false change</span>
  policy:
    name: <span class="s2">&#34;&#34;</span>
status: <span class="o">{}</span>
</code></pre></td></tr></table>
</div>
</div><p>ignition 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">openshift-install create ignition-configs --dir ocp
</code></pre></td></tr></table>
</div>
</div><p>L4 VIP로 설정 필요</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt; EOF | tee append-bootstrap.ign
</span><span class="s">{
</span><span class="s">  &#34;ignition&#34;: {
</span><span class="s">    &#34;config&#34;: {
</span><span class="s">      &#34;merge&#34;: [
</span><span class="s">        {
</span><span class="s">          &#34;source&#34;: &#34;http://10.253.107.254:8080/bootstrap.ign&#34; ## L4 VIP로 변경
</span><span class="s">        }
</span><span class="s">      ] 
</span><span class="s">    },
</span><span class="s">    &#34;version&#34;: &#34;3.1.0&#34;
</span><span class="s">  }
</span><span class="s">}
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>BASE64 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">base64 -w0 append-bootstrap.ign &gt; append-bootstrap.64
base64 -w0 master.ign &gt; master.64
base64 -w0 worker.ign &gt; worker.64
</code></pre></td></tr></table>
</div>
</div><p>웹 구성에서 파일을 다운로드 할 수 있게 file 폴더 구성 후 ign을 복사 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mkdir -p /usr/share/nginx/html/files
cp *.ign /usr/share/nginx/html/files/
chmod <span class="m">644</span> /usr/share/nginx/html/files/*.ign
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="7-nginx">7. NGINX</h2>
<p>NGINX 설치</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">apt update <span class="o">&amp;&amp;</span> apt upgrade -y

make로 설치
apt install gcc libpcre3 libpcre3-dev libssl-dev make -y

mkdir -p /var/tmp/src <span class="o">&amp;&amp;</span> <span class="nb">cd</span> /var/tmp/src
wget http://nginx.org/download/nginx-1.20.2.tar.gz
tar -xzf nginx-1.20.2.tar.gz
<span class="nb">cd</span> nginx-1.20.2

./configure --prefix<span class="o">=</span>/var/www/html --sbin-path<span class="o">=</span>/usr/sbin/nginx --conf-path<span class="o">=</span>/etc/nginx/nginx.conf --http-log-path<span class="o">=</span>/var/log/nginx/access.log --error-log-path<span class="o">=</span>/var/log/nginx/error.log --with-pcre  --lock-path<span class="o">=</span>/var/lock/nginx.lock --pid-path<span class="o">=</span>/var/run/nginx.pid --with-http_ssl_module --with-http_image_filter_module<span class="o">=</span>dynamic --modules-path<span class="o">=</span>/etc/nginx/modules --with-http_v2_module --with-stream<span class="o">=</span>dynamic --with-http_addition_module --with-http_mp4_module --with-stream

make
make install

vi /lib/systemd/system/nginx.service

<span class="o">[</span>Unit<span class="o">]</span>
<span class="nv">Description</span><span class="o">=</span>The NGINX HTTP and reverse proxy server
<span class="nv">After</span><span class="o">=</span>syslog.target network-online.target remote-fs.target nss-lookup.target
<span class="nv">Wants</span><span class="o">=</span>network-online.target
        
<span class="o">[</span>Service<span class="o">]</span>
<span class="nv">Type</span><span class="o">=</span>forking
<span class="nv">PIDFile</span><span class="o">=</span>/var/run/nginx.pid
<span class="nv">ExecStartPre</span><span class="o">=</span>/usr/sbin/nginx -t
<span class="nv">ExecStart</span><span class="o">=</span>/usr/sbin/nginx
<span class="nv">ExecReload</span><span class="o">=</span>/usr/sbin/nginx -s reload
<span class="nv">ExecStop</span><span class="o">=</span>/bin/kill -s QUIT <span class="nv">$MAINPID</span>
<span class="nv">PrivateTmp</span><span class="o">=</span><span class="nb">true</span>
        
<span class="o">[</span>Install<span class="o">]</span>
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target

</code></pre></td></tr></table>
</div>
</div><p>nginx.conf 설정</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## 아래 내용 추가</span>
vi etc/nginx/nginx.conf 

worker_processes auto<span class="p">;</span>                    <span class="c1">## 추가  </span>
error_log /var/log/nginx/error.log<span class="p">;</span>       <span class="c1">## 추가</span>
pid /run/nginx.pid<span class="p">;</span>                       <span class="c1">## 추가</span>

include /etc/nginx/stream.conf.d/*.conf<span class="p">;</span>  <span class="c1">## 추가</span>

http <span class="o">{</span>
    include       mime.types<span class="p">;</span>
    default_type  application/octet-stream<span class="p">;</span>

    log_format  main  <span class="s1">&#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; &#39;</span>
                      <span class="s1">&#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;</span>
                      <span class="s1">&#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;</span><span class="p">;</span>

    access_log  logs/access.log  main<span class="p">;</span>

    sendfile        on<span class="p">;</span>
    <span class="c1">#tcp_nopush     on;</span>

    <span class="c1">#keepalive_timeout  0;</span>
    keepalive_timeout  65<span class="p">;</span>

    <span class="c1">#gzip  on;</span>

    server <span class="o">{</span>
        listen       8081<span class="p">;</span>
        server_name  localhost<span class="p">;</span>

        location / <span class="o">{</span>
            root   html<span class="p">;</span>
            index  index.html index.htm<span class="p">;</span>
        <span class="o">}</span>

        error_page   <span class="m">500</span> <span class="m">502</span> <span class="m">503</span> <span class="m">504</span>  /50x.html<span class="p">;</span>
        <span class="nv">location</span> <span class="o">=</span> /50x.html <span class="o">{</span>
            root   html<span class="p">;</span>
        <span class="o">}</span>
    include /etc/nginx/conf.d/*.conf<span class="p">;</span>   <span class="c1">## 추가</span>
<span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div><p>웹 구성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt; EOF | tee /etc/nginx/conf.d/openshift.conf
</span><span class="s">server {
</span><span class="s">    listen       8080;
</span><span class="s">    server_name  localhost;
</span><span class="s">
</span><span class="s">
</span><span class="s">    location / {
</span><span class="s">        root   /usr/share/nginx/html/files;
</span><span class="s">        autoindex on;
</span><span class="s">    }
</span><span class="s">
</span><span class="s">    error_page   500 502 503 504  /50x.html;
</span><span class="s">    location = /50x.html {
</span><span class="s">        root   /usr/share/nginx/html;
</span><span class="s">    }
</span><span class="s">
</span><span class="s">}
</span><span class="s">EOF</span>

</code></pre></td></tr></table>
</div>
</div><p>nginx 테스트 및 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nginx -t
systemctl restart nginx
systemctl <span class="nb">enable</span> nginx
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>NGINX 확인</h4>
        </figcaption>
</figure>

<h2 id="8-temp-이미지로-vm-구성">8. Temp 이미지로 VM 구성</h2>
<p><code>Temp를 활용하여 bootstrap , master 3개 , worker 3개를 배포한다.</code></p>
<p><figure><figcaption>
            <h4>Image 구성#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Image 구성#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Image 구성#3</h4>
        </figcaption>
</figure>

base64로 변경한 값을 여기서 넣어 준다.
bootstrap : cat append-bootstrap.64 , 마스터 : cat master.64 , Worker : cat worker.64 의 값을 넣어 주면 됨
<figure><figcaption>
            <h4>Image 구성#4</h4>
        </figcaption>
</figure>
</p>
<h2 id="9-l4-구성">9. L4 구성</h2>
<p><code>L4장비가 없을 경우 / L4장비가 있을 경우를 생각해서 NGINX도 포함 시킴</code></p>
<h3 id="91-nsxt-l4-구성">9.1. NSXT L4 구성</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## 설명</span>
ocp_8080 : jumphost <span class="o">(</span>nginx에서 파일을 땡기기 위해 구성<span class="o">)</span>

<span class="c1">## 배포 완료 후 bootstrap은 삭제 해도 됨</span>
ocp-master-and-boot-machine-22623 : bootstrap 및 master
ocp_master-and-boot-api-6443: bootstrap 및 master

<span class="c1">## Openshift는 Route를사용 하기 때문에 설정</span>
ocp_443, ocp_80 : master 및 worker
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>L4 구성#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>L4 구성#2</h4>
        </figcaption>
</figure>
</p>
<h3 id="92-nginx-l4-구성">9.2. NGINX L4 구성</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">
<span class="c1">## LB 설정</span>
cat <span class="s">&lt;&lt; EOF | tee /etc/nginx/stream.conf.d/lb.conf
</span><span class="s">
</span><span class="s">stream{
</span><span class="s">    upstream ocp_k8s_api {
</span><span class="s">        #round-robin;
</span><span class="s">        server 10.253.107.10:6443; #bootstrap
</span><span class="s">        server 10.253.107.11:6443; #master1
</span><span class="s">        server 10.253.107.12:6443; #master2
</span><span class="s">        server 10.253.107.13:6443; #master3
</span><span class="s">    }
</span><span class="s">    server {
</span><span class="s">        listen 6443;
</span><span class="s">        proxy_pass ocp_k8s_api;
</span><span class="s">    }
</span><span class="s">
</span><span class="s">
</span><span class="s">    upstream ocp_m_config {
</span><span class="s">        #round-robin;
</span><span class="s">        server 10.253.107.10:22623; #bootstrap
</span><span class="s">        server 10.253.107.11:22623; #master1
</span><span class="s">        server 10.253.107.12:22623; #master2
</span><span class="s">        server 10.253.107.13:22623; #master3
</span><span class="s">    }
</span><span class="s">    server {
</span><span class="s">        listen 22623;
</span><span class="s">        proxy_pass ocp_m_config;
</span><span class="s">    }
</span><span class="s">
</span><span class="s">    upstream ocp_http {
</span><span class="s">        #round-robin;
</span><span class="s">        server 10.253.107.11:80; #master1
</span><span class="s">        server 10.253.107.12:80; #master2
</span><span class="s">        server 10.253.107.13:80; #master3
</span><span class="s">        server 10.253.107.14:80; #worker1
</span><span class="s">        server 10.253.107.15:80; #worker2
</span><span class="s">        server 10.253.107.16:80; #worker3
</span><span class="s">    }
</span><span class="s">    server{
</span><span class="s">        listen 80;
</span><span class="s">        proxy_pass ocp_http;
</span><span class="s">    }
</span><span class="s">
</span><span class="s">    upstream ocp_https {
</span><span class="s">        #round-robin;
</span><span class="s">        server 10.253.107.11:443; #master1
</span><span class="s">        server 10.253.107.12:443; #master2
</span><span class="s">        server 10.253.107.13:443; #master3
</span><span class="s">        server 10.253.107.14:443; #worker1
</span><span class="s">        server 10.253.107.15:443; #worker2
</span><span class="s">        server 10.253.107.16:443; #worker3   
</span><span class="s">    }
</span><span class="s">    server{
</span><span class="s">        listen 443;
</span><span class="s">        proxy_pass ocp_https;
</span><span class="s">    }
</span><span class="s">}
</span><span class="s">EOF</span>


<span class="c1">## nginx restart</span>

nginx -t
systemctl restart nginx
</code></pre></td></tr></table>
</div>
</div><h2 id="10-완료-후-확인">10. 완료 후 확인</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">KUBECONFIG</span><span class="o">=</span>&lt;installation_directory&gt;/auth/kubeconfig

예시
<span class="nb">export</span> <span class="nv">KUBECONFIG</span><span class="o">=</span>~/ocp/auth/kubeconfig

oc whoami

oc get clusterversion
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>완료#1</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">oc get clusteroperators

oc describe clusterversion

oc get clusterversion -o jsonpath=&#39;{.items[0].spec}{&#34;\n&#34;}&#39;
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>완료#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>완료#3</h4>
        </figcaption>
</figure>
</p>
<h2 id="11-new-worker-node-add">11. New Worker Node Add</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## PENDING 확인</span>
kubectl get csr

<span class="c1">## PENDING 확인 후 적용</span>
oc adm certificate approve csr-bghmp csr-hd9x8 csr-hlngb
oc adm certificate approve csr-gpgv9 csr-n6lqm csr-zfws6 
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>worker Node 추가</h4>
        </figcaption>
</figure>

<h2 id="12-계정">12. 계정</h2>
<p>Local 또는 AD을 통해 계정을 관리 할 수 있다.</p>
<h3 id="121-local-계정-생성">12.1. Local 계정 생성</h3>
<p>아래는 htpasswd를 사용 하는 방법의 대해서 구성 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## 우분투</span>
apt install apache2-utils -y

<span class="c1"># 유저 정보</span>
<span class="c1"># htpasswd -Bbc htpasswd {username} &#39;{password}&#39;</span>
$ htpasswd -Bbc htpasswd my1208 <span class="s1">&#39;Passw0rd&#39;</span>

cat htpasswd

oc --user<span class="o">=</span>admin create secret generic htpasswd <span class="se">\
</span><span class="se"></span>    --from-file<span class="o">=</span>htpasswd -n openshift-config

oc get secret -n openshift-config
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>유저 추가</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>secret 확인</h4>
        </figcaption>
</figure>
</p>
<p>secret 추가</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt; EOF | tee oauth-config.yaml
</span><span class="s"># oauth-config.yaml
</span><span class="s">apiVersion: config.openshift.io/v1
</span><span class="s">kind: OAuth
</span><span class="s">metadata:
</span><span class="s">  name: cluster
</span><span class="s">spec:
</span><span class="s">  identityProviders:
</span><span class="s">  - name: Local Password
</span><span class="s">    mappingMethod: claim
</span><span class="s">    type: HTPasswd
</span><span class="s">    htpasswd:
</span><span class="s">      fileData:
</span><span class="s">        name: htpasswd
</span><span class="s">EOF</span>

oc replace -f oauth-config.yaml

<span class="c1">## shows current user</span>
oc whoami

<span class="c1">## shows cluster web console URL</span>
oc whoami --show-console

<span class="c1">## shows cluster API URL</span>
oc whoami --show-server

<span class="c1">## shows current OAuth token</span>
oc whoami --show-token
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>GUI 접속#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>GUI 접속#2</h4>
        </figcaption>
</figure>
</p>
<h3 id="122-ad-연동">12.2. AD 연동</h3>
<p>LDPAS를 구성하기 위한 configmap 생성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">oc create configmap ca-config-map --from-file=ca.crt=/path/to/ca -n openshift-config
</code></pre></td></tr></table>
</div>
</div><p>만약 LDAPS로 구성을 하지 않았으면 insecure: true, ca 항목을 삭제, url을 ldap으로 변경을 해주면 된다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">oc apply -n openshift-config -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: config.openshift.io/v1
</span><span class="s">kind: OAuth
</span><span class="s">metadata:
</span><span class="s">  name: cluster
</span><span class="s">spec:
</span><span class="s">  identityProviders:
</span><span class="s">  - name: ldapidp
</span><span class="s">    mappingMethod: claim
</span><span class="s">    type: LDAP
</span><span class="s">    ldap:
</span><span class="s">      attributes:
</span><span class="s">        id:
</span><span class="s">        - dn
</span><span class="s">        email:
</span><span class="s">        - mail
</span><span class="s">        name:
</span><span class="s">        - sAMAccountName
</span><span class="s">        preferredUsername:
</span><span class="s">        - sAMAccountName
</span><span class="s">      bindDN: cn=administrator,cn=users,dc=tkg,dc=io
</span><span class="s">      bindPassword:
</span><span class="s">        name: ldap-secret
</span><span class="s">      ca:
</span><span class="s">        name: ca-config-map
</span><span class="s">      insecure: false
</span><span class="s">      url: &#34;ldaps://tanzu-dns.tkg.io/ou=tanzu,dc=tkg,dc=io?sAMAccountName&#34;
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>GUI 접속</h4>
        </figcaption>
</figure>

<h3 id="123-수동-group-sync">12.3. 수동 GROUP-SYNC</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">vi ldapsync.yaml

<span class="c1"># LDAP is case insensitive, but OpenShift is not, so all LDAP parameters have been converted to lower case as per https://access.redhat.com/solutions/3232051 (under &#34;Case Sensitivity&#34;)</span>
kind: LDAPSyncConfig
apiVersion: v1
url: ldaps://tanzu-dns.tkg.io:636
insecure: <span class="nb">false</span>
ca: <span class="s2">&#34;/data/cert/ldapserver.pem&#34;</span>                       <span class="c1">### ldaps 인증서의 실제 위치 / 파일</span>
bindDN: <span class="nv">cn</span><span class="o">=</span>administrator,cn<span class="o">=</span>users,dc<span class="o">=</span>tkg,dc<span class="o">=</span>io
bindPassword: <span class="s2">&#34;Password&#34;</span>
rfc2307:
   groupsQuery:
       baseDN: <span class="s2">&#34;ou=tanzu,dc=tkg,dc=io&#34;</span>
       scope: sub
       filter: <span class="o">(</span><span class="nv">objectClass</span><span class="o">=</span>group<span class="o">)</span>
       derefAliases: never
       timeout: <span class="m">0</span>
       pageSize: <span class="m">0</span>
   groupUIDAttribute: dn
   groupNameAttributes: <span class="o">[</span> cn <span class="o">]</span>
   groupMembershipAttributes: <span class="o">[</span> member <span class="o">]</span>
   usersQuery:
       basedn: <span class="s2">&#34;ou=tanzu,dc=tkg,dc=io&#34;</span>
       scope: sub
       derefAliases: never
       pageSize: <span class="m">0</span>
   userUIDAttribute: dn
   userNameAttributes: <span class="o">[</span> cn <span class="o">]</span>
   tolerateMemberNotFoundErrors: <span class="nb">true</span>
   tolerateMemberOutOfScopeErrors: <span class="nb">true</span>
   
<span class="c1">## 적용전 제대로 받아오는지 확인을 한다.</span>
oc adm groups sync --sync-config<span class="o">=</span>ldapsync.yaml

<span class="c1">## 확인이 끝나면 적용한다.</span>
oc adm groups sync --sync-config<span class="o">=</span>ldapsync.yaml --confirm

<span class="c1">## 권한 설정</span>
oc adm policy add-cluster-role-to-group cluster-admin tkg

<span class="c1">## 권한 삭제</span>
oc adm policy remove-cluster-role-from-group cluster-admin tkg

</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>GROUP 확인 및 적용</h4>
        </figcaption>
</figure>

<h3 id="124-cronjob-group-sync">12.4 CronJob Group-Sync</h3>
<p>위에서 LDAP을 연동 하였다면 cm , secret 이 생성 된 것을 확인 할 수 있다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## password 이름 확인</span>
<span class="nv">password</span><span class="o">=</span><span class="sb">`</span>oc get secret -n openshift-authentication <span class="p">|</span> grep v4-0-config-user-idp-0 <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
oc get secret -n openshift-authentication <span class="nv">$password</span>  -o <span class="nv">jsonpath</span><span class="o">={</span>.data<span class="o">}</span>

<span class="c1">## 인증서 이름 확인</span>
<span class="nv">ca</span><span class="o">=</span><span class="sb">`</span>oc get cm -n openshift-authentication <span class="p">|</span> grep v4-0-config-user <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
oc get cm -n openshift-authentication <span class="nv">$ca</span> -o <span class="nv">jsonpath</span><span class="o">={</span>.items<span class="o">[</span>0<span class="o">]</span>.data<span class="o">}</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>그리고 계정 및 권한 설정을 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt; EOF | tee ldap-sync-sa-clusterrole.yaml
</span><span class="s">kind: ServiceAccount
</span><span class="s">apiVersion: v1
</span><span class="s">metadata:
</span><span class="s">  name: ldap-group-syncer
</span><span class="s">  namespace: openshift-authentication
</span><span class="s">  labels:
</span><span class="s">    app: cronjob-ldap-group-sync
</span><span class="s">
</span><span class="s">---
</span><span class="s">kind: ServiceAccount
</span><span class="s">apiVersion: v1
</span><span class="s">metadata:
</span><span class="s">  name: ldap-group-syncer
</span><span class="s">  namespace: openshift-authentication
</span><span class="s">  labels:
</span><span class="s">    app: cronjob-ldap-group-sync
</span><span class="s">root@ubuntu:/var/tmp/oc/ldaps#
</span><span class="s">root@ubuntu:/var/tmp/oc/ldaps# cat clusterrole.yaml
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: ClusterRole
</span><span class="s">metadata:
</span><span class="s">  name: ldap-group-syncer
</span><span class="s">  labels:
</span><span class="s">    app: cronjob-ldap-group-sync
</span><span class="s">rules:
</span><span class="s">  - apiGroups:
</span><span class="s">      - &#39;&#39;
</span><span class="s">      - user.openshift.io
</span><span class="s">    resources:
</span><span class="s">      - groups
</span><span class="s">    verbs:
</span><span class="s">      - get
</span><span class="s">      - list
</span><span class="s">      - create
</span><span class="s">      - update
</span><span class="s">
</span><span class="s">---
</span><span class="s">kind: ClusterRoleBinding
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">metadata:
</span><span class="s">  name: ldap-group-syncer
</span><span class="s">  labels:
</span><span class="s">    app: cronjob-ldap-group-sync
</span><span class="s">subjects:
</span><span class="s">  - kind: ServiceAccount
</span><span class="s">    name: ldap-group-syncer
</span><span class="s">    namespace: openshift-authentication
</span><span class="s">roleRef:
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">  kind: ClusterRole
</span><span class="s">  name: ldap-group-syncer
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>LDAP의 자동 Sync를 구성하기 위해 config-map 및 job 설정
witelist / balcklist의 경우 ldapsearch에서 distinguishedName: CN=test test,OU=tanzu,DC=tkg,DC=io 이부분의 이름으로 넣어야함. , 만약 별도로 witelist / blacklist가 필요 없으면 제거 해도 된다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt; EOF | tee ldap-sync-cm-cron.yaml
</span><span class="s">kind: ConfigMap
</span><span class="s">apiVersion: v1
</span><span class="s">metadata:
</span><span class="s">  name: ldap-group-syncer
</span><span class="s">  namespace: openshift-authentication
</span><span class="s">  labels:
</span><span class="s">    app: cronjob-ldap-group-sync
</span><span class="s">data:
</span><span class="s">  ldap-group-sync.yaml: |
</span><span class="s">    kind: LDAPSyncConfig
</span><span class="s">    apiVersion: v1
</span><span class="s">    url: ldaps://tanzu-dns.tkg.io
</span><span class="s">    bindDN: cn=administrator,cn=users,dc=tkg,dc=io
</span><span class="s">    bindPassword:
</span><span class="s">      file: &#34;/etc/secrets/bindPassword&#34;                   ## 위에서 설명한 secret, cronjob에서 voluemount 후 적용
</span><span class="s">    insecure: false
</span><span class="s">    ca: &#34;/ldap-sync/ca/ca.crt&#34;                            ## 위에서 설명한 configmap, cronjob에서 voluemount 후 적용
</span><span class="s">    rfc2307:
</span><span class="s">        groupsQuery:
</span><span class="s">            baseDN: &#34;ou=tanzu,dc=tkg,dc=io&#34;
</span><span class="s">            scope: sub
</span><span class="s">            derefAliases: never
</span><span class="s">            filter: (objectclass=group)
</span><span class="s">        groupUIDAttribute: dn
</span><span class="s">        groupNameAttributes: [ cn ]
</span><span class="s">        groupMembershipAttributes: [ member ]
</span><span class="s">        usersQuery:
</span><span class="s">            baseDN: &#34;ou=tanzu,dc=tkg,dc=io&#34;
</span><span class="s">            scope: sub
</span><span class="s">            derefAliases: never
</span><span class="s">            pageSize: 0
</span><span class="s">        userUIDAttribute: dn
</span><span class="s">        userNameAttributes: [ sAMAccountName ]
</span><span class="s">        tolerateMemberNotFoundErrors: true
</span><span class="s">        tolerateMemberOutOfScopeErrors: true
</span><span class="s">---
</span><span class="s">kind: ConfigMap
</span><span class="s">apiVersion: v1
</span><span class="s">metadata:
</span><span class="s">  name: ldap-group-syncer-whitelist
</span><span class="s">  namespace: openshift-authentication
</span><span class="s">  labels:
</span><span class="s">    app: cronjob-ldap-group-sync
</span><span class="s">data:
</span><span class="s">  whitelist.txt: |
</span><span class="s">    CN=kim dokyung,OU=tanzu,DC=tkg,DC=io
</span><span class="s">
</span><span class="s">---
</span><span class="s">kind: ConfigMap
</span><span class="s">apiVersion: v1
</span><span class="s">metadata:
</span><span class="s">  name: ldap-group-syncer-blacklist
</span><span class="s">  namespace: openshift-authentication
</span><span class="s">  labels:
</span><span class="s">    app: cronjob-ldap-group-sync
</span><span class="s">data:
</span><span class="s">  blacklist.txt: |
</span><span class="s">    CN=tkg,OU=tanzu,DC=tkg,DC=io
</span><span class="s">
</span><span class="s">---
</span><span class="s">kind: CronJob
</span><span class="s">apiVersion: batch/v1beta1
</span><span class="s">metadata:
</span><span class="s">  name: ldap-group-syncer
</span><span class="s">  namespace: openshift-authentication
</span><span class="s">  labels:
</span><span class="s">    app: cronjob-ldap-group-sync
</span><span class="s">spec:
</span><span class="s">  schedule: &#34;*/1 * * * *&#34;
</span><span class="s">  concurrencyPolicy: Forbid
</span><span class="s">  successfulJobsHistoryLimit: 5
</span><span class="s">  failedJobsHistoryLimit: 5
</span><span class="s">  jobTemplate:
</span><span class="s">    metadata:
</span><span class="s">      labels:
</span><span class="s">        app: cronjob-ldap-group-sync
</span><span class="s">    spec:
</span><span class="s">      backoffLimit: 0
</span><span class="s">      template:
</span><span class="s">        metadata:
</span><span class="s">          labels:
</span><span class="s">            app: cronjob-ldap-group-sync
</span><span class="s">        spec:
</span><span class="s">          containers:
</span><span class="s">            - name: ldap-group-sync
</span><span class="s">              image: &#34;registry.redhat.io/openshift4/ose-cli:v4.7&#34;
</span><span class="s">              command:
</span><span class="s">                - &#34;/bin/bash&#34;
</span><span class="s">                - &#34;-c&#34;
</span><span class="s">                - oc adm groups sync --whitelist=/etc/whitelist/whitelist.txt --blacklist=/etc/blacklist/blacklist.txt --sync-config=/etc/config/ldap-group-sync.yaml --confirm
</span><span class="s">              volumeMounts:
</span><span class="s">                - mountPath: &#34;/etc/blacklist&#34;
</span><span class="s">                  name: &#34;ldap-sync-volume-blacklist&#34;
</span><span class="s">                - mountPath: &#34;/etc/whitelist&#34;
</span><span class="s">                  name: &#34;ldap-sync-volume-whitelist&#34;
</span><span class="s">                - mountPath: &#34;/etc/config&#34;
</span><span class="s">                  name: &#34;ldap-sync-volume&#34;
</span><span class="s">                - mountPath: &#34;/etc/secrets&#34;
</span><span class="s">                  name: &#34;ldap-bind-password&#34;
</span><span class="s">                - mountPath: &#34;/ldap-sync/ca&#34;
</span><span class="s">                  name: &#34;ldap-sync-ca&#34;
</span><span class="s">          volumes:
</span><span class="s">            - name: &#34;ldap-sync-volume-blacklist&#34;                  ## volumes을 모두 연결하여 assign
</span><span class="s">              configMap:
</span><span class="s">                name: &#34;ldap-group-syncer-blacklist&#34;
</span><span class="s">            - name: &#34;ldap-sync-volume-whitelist&#34;                  ## volumes을 모두 연결하여 assign
</span><span class="s">              configMap:
</span><span class="s">                name: &#34;ldap-group-syncer-whitelist&#34;           
</span><span class="s">            - name: &#34;ldap-sync-volume&#34;                            ## volumes을 모두 연결하여 assign
</span><span class="s">              configMap:
</span><span class="s">                name: &#34;ldap-group-syncer&#34;
</span><span class="s">            - name: &#34;ldap-sync-ca&#34;                                ## volumes을 모두 연결하여 assign
</span><span class="s">              configMap:
</span><span class="s">                name: &#34;v4-0-config-user-idp-0-ca&#34; 
</span><span class="s">            - name: &#34;ldap-bind-password&#34;                          ## volumes을 모두 연결하여 assign
</span><span class="s">              secret:
</span><span class="s">                secretName: &#34;v4-0-config-user-idp-0-bind-password&#34;
</span><span class="s">          restartPolicy: &#34;Never&#34;
</span><span class="s">          terminationGracePeriodSeconds: 30
</span><span class="s">          activeDeadlineSeconds: 500
</span><span class="s">          dnsPolicy: &#34;ClusterFirst&#34;
</span><span class="s">          serviceAccountName: &#34;ldap-group-syncer&#34;
</span><span class="s">          serviceAccount: &#34;ldap-group-syncer&#34;
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>이후에 자동으로 싱크가 되는 것을 알수 있다. 만약에 그룹을 추가 했는대 그 그룹만 막고 싶으면 blacklist, 또는 기존에 있는 것만 하고 자동 싱크 하고 싶으면 witelist를 적용 하면된다. 
흠 생각에는 그냥 witelist 방식으로만 적용하면 될 것으로 보인다. 만약에 필요 하다면 필요 없이 모든 그룹을 자동 싱크 하겠따면 witelist / blaklist는 필요 없다.</p>
<p>자동 싱크가 되었으면 해당하는 그룹에 권한을 준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## 권한 설정</span>
oc adm policy add-cluster-role-to-group cluster-admin tkg

<span class="c1">## 권한 삭제</span>
oc adm policy remove-cluster-role-from-group cluster-admin tkg
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>자동 sync 구성 완료</h4>
        </figcaption>
</figure>

]]></description>
</item><item>
    <title>The Documentation EKS</title>
    <link>https://huntedhappy.github.io/ko/eks/</link>
    <pubDate>Thu, 13 Jan 2022 14:02:41 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/eks/</guid>
    <description><![CDATA[<h2 id="1-eksamazon-elastic-kubernetes-service">1. EKS(Amazon Elastic Kubernetes Service)?</h2>
<p>Kubernetes를 실행하는 데 사용할 수 있는 관리형 서비스이다. 마스터노드, 워커노드를 설치, 작동 및 유지관리를 할 필요 없는 솔루션이다.</p>
<p>우선 문서가 너무 잘되어 있지만 그래도 나름 예전에 EKS를 테스트 했었던 지라 내가 테스트 했던 방법을 공유하고자 한다.</p>
<p>참고 문헌 <a href="https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/what-is-eks.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> AWS </a></p>
<h3 id="11-사전설치">1.1. 사전설치</h3>
<p>우선 OS의 따라 설치해야 되는 것들이 조금 있다. (chocolatey를 설치한 이유는 chocolatey를 통해 eksctl을 배포 하기 위함)</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>설치 Tool<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Chocolatey 설치 링크 <a href="https://chocolatey.org/install" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> chocolatey </a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Set-ExecutionPolicy</span> <span class="n">Bypass</span> <span class="n">-Scope</span> <span class="k">Process</span> <span class="n">-Force</span><span class="p">;</span> <span class="no">[System.Net.ServicePointManager]</span><span class="p">::</span><span class="n">SecurityProtocol</span> <span class="p">=</span> <span class="no">[System.Net.ServicePointManager]</span><span class="p">::</span><span class="n">SecurityProtocol</span> <span class="o">-bor</span> <span class="n">3072</span><span class="p">;</span> <span class="nb">iex </span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span><span class="p">).</span><span class="n">DownloadString</span><span class="p">(</span><span class="s1">&#39;https://community.chocolatey.org/install.ps1&#39;</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><p>eksctl 설치 링크 <a href="https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/eksctl.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> AWS eksctl </a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">chocolatey</span> <span class="n">install</span> <span class="n">-y</span> <span class="n">eksctl</span> <span class="nb">aws-iam</span><span class="n">-authenticator</span>
</code></pre></td></tr></table>
</div>
</div><p>kubectl 설치 링크 <a href="https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/install-kubectl.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> AWS kubectl </a></p>
<p>링크를 보게 되면 버전별로 다운로드 받을 수 있게 되어 있다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">curl </span><span class="n">-o</span> <span class="n">kubectl</span><span class="p">.</span><span class="n">exe</span> <span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="nb">amazon-eks</span><span class="p">.</span><span class="n">s3</span><span class="p">.</span><span class="nb">us-west</span><span class="p">-</span><span class="n">2</span><span class="p">.</span><span class="n">amazonaws</span><span class="p">.</span><span class="n">com</span><span class="p">/</span><span class="n">1</span><span class="p">.</span><span class="n">21</span><span class="p">.</span><span class="n">2</span><span class="p">/</span><span class="n">2021</span><span class="p">-</span><span class="n">07</span><span class="p">-</span><span class="n">05</span><span class="p">/</span><span class="n">bin</span><span class="p">/</span><span class="n">windows</span><span class="p">/</span><span class="n">amd64</span><span class="p">/</span><span class="n">kubectl</span><span class="p">.</span><span class="n">exe</span>
</code></pre></td></tr></table>
</div>
</div><p>awscli 설치링크 <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> AWS awscli </a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">msiexec</span><span class="p">.</span><span class="n">exe</span> <span class="p">/</span><span class="n">i</span> <span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="n">awscli</span><span class="p">.</span><span class="n">amazonaws</span><span class="p">.</span><span class="n">com</span><span class="p">/</span><span class="n">AWSCLIV2</span><span class="p">.</span><span class="n">msi</span>
<span class="n">aws</span> <span class="p">-</span><span class="n">-version</span>
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="12-vpc-생성">1.2. VPC 생성</h2>
<p>CloudFormation을 통해 vpc를 자동으로 생성 해준다. 아래 링크는 현재 최신상태인지 확인이 가능.</p>
<p>eks vcp cloudformation 최신 상태 확인 링크 <a href="https://docs.aws.amazon.com/eks/latest/userguide/creating-a-vpc.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> AWS eks vcp </a></p>
<p>eks vcp cloudformation 최신 파일 링크 <a href="https://amazon-eks.s3.us-west-2.amazonaws.com/cloudformation/2020-10-29/amazon-eks-vpc-private-subnets.yaml" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> AWS eks vcp download </a></p>
<p>위에 받은 파일로 cloudformation을 설정 해주면 된다.
<figure><figcaption>
            <h4>cloud formation 설정#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>cloud formation 설정#2</h4>
        </figcaption>
</figure>

원하는 N/W으로 수정 후 그 이후에는 그냥 NEXT 후 CREATE만 하면 VPC가 구성이 된다.
<figure><figcaption>
            <h4>cloud formation 설정#3</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>cloud formation 설정#4</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>cloud formation 설정#5</h4>
        </figcaption>
</figure>

완료가 되면 보는 바와 같이 VPC가 생성이 된 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>VPC 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Route Table 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>IGW 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>NAT GW 확인</h4>
        </figcaption>
</figure>
</p>
<h3 id="13-private-key등록">1.3. private key등록</h3>
<p>aws에서 ec2에 접속하기 위한 security 키를 sshkeygen으로 publickey 생성
<figure><figcaption>
            <h4>public key 생성#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>public key 생성#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Notepad로 복사</h4>
        </figcaption>
</figure>
</p>
<h3 id="14-eks-실행">1.4. EKS 실행</h3>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>EKS 실행<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>그리고 아래와 같이 명령어를 넣어 준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">eksctl</span> <span class="n">create</span> <span class="n">cluster</span> <span class="p">\</span>
 <span class="p">-</span><span class="n">-name</span> <span class="nb">aws-eks</span> <span class="p">\</span>
 <span class="p">-</span><span class="n">-region</span> <span class="nb">us-east</span><span class="p">-</span><span class="n">2</span> <span class="p">\</span>
 <span class="p">-</span><span class="n">-nodegroup-name</span> <span class="nb">aws-node</span> <span class="p">\</span>
 <span class="p">-</span><span class="n">-node-type</span> <span class="n">t3</span><span class="p">.</span><span class="n">medium</span> <span class="p">\</span>
 <span class="p">-</span><span class="n">-nodes</span> <span class="n">3</span> <span class="p">\</span>
 <span class="p">-</span><span class="n">-nodes-min</span> <span class="n">1</span> <span class="p">\</span>
 <span class="p">-</span><span class="n">-nodes-max</span> <span class="n">4</span> <span class="p">\</span>
 <span class="p">-</span><span class="n">-ssh-access</span> <span class="p">\</span>
 <span class="p">-</span><span class="n">-ssh-public-key</span> <span class="n">huntedhappy</span><span class="p">.</span><span class="n">pub</span> <span class="p">\</span>
 <span class="p">-</span><span class="n">-with-oidc</span> <span class="p">\</span>
 <span class="p">-</span><span class="n">-managed</span>
</code></pre></td></tr></table>
</div>
</div><p>구성 EKS 연동 및 확인
aws eks update-kubeconfig &ndash;name aws-eks</p>
</div>
        </div>
    </div>
<p>Cloud Formation이 자동으로 돌아간다
<figure><figcaption>
            <h4>Cloud Formation</h4>
        </figcaption>
</figure>

IAM에서 OIDC가 생성 되었는지 확인 한다. OIDC는 CSI를 EFS로 구성 할 떄 필요 하다.
<figure><figcaption>
            <h4>OIDC 생성 확인</h4>
        </figcaption>
</figure>
</p>
<h2 id="2-csi-efs구성-작성예정">2. CSI EFS구성 (작성예정)</h2>
<h2 id="iam">IAM</h2>
<p>참고로 IAM은 아래와 같이 구성 하였다.
<figure><figcaption>
            <h4>IAM</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item><item>
    <title>The Documentation CICD</title>
    <link>https://huntedhappy.github.io/ko/cicd/</link>
    <pubDate>Tue, 11 Jan 2022 23:46:01 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/cicd/</guid>
    <description><![CDATA[<p>간단하게 CICD의 대해 구성 하는 것을 기술 할 예정
사용자가 VS를 사용하여 Docker 내용을 수정 후 Git에 Push를 하면 Jenkins에서 5분에 한번씩 Polling을 하여 Git에 변화가 있으면 Pipeline이 동작 하면서 자동으로 Docker Build를 수행 후 Harbor에 이미지를 Push 후 새로운 이미지의 대한 Version을 Manifest의 변경 하여 다시 Git에 Push, 이후 3분에 한번씩 Argo가 Git의 내용의 변화가 있는지 확인 후 변화가 있으면 K8S의 환경의 Manifest를 적용</p>
]]></description>
</item><item>
    <title>The Documentation K8s</title>
    <link>https://huntedhappy.github.io/ko/k8s/</link>
    <pubDate>Sat, 08 Jan 2022 14:32:33 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/k8s/</guid>
    <description><![CDATA[<p>아래 내용을 작성 하는 이유
같이 일했던 동료가 다른 곳으로 회사를 이직 하고 나서 컨테이너를 해야 되는거 같았다. 같이 일을 했기 때문에 L4 / L7을 잘 했던 친구 였다. 그런대 뜬금없이 L4를 연동 하면 어떻게 컨테이너로 트래픽을 전달하냐라고 물어본적이 있었다. 
그래서 혹시 모르는 사람을 위해서 간략하게 적어 내려 간다.</p>
<h2 id="1-service-type">1. Service Type</h2>
<p>컨테이너를 하기 위해서는 우선 Deploy , STS등으로 Pod를 생성한다. 그럼 일반적으로 테스트를 하기 위해서 아래와 같이 명령어를 칠 것이다.</p>
<ul>
<li>kubectl create deploy nginx &ndash;image=nginx -n nginx</li>
</ul>
<p>그러면 deploy를 통해 pod가 생성 된 것을 확인 할 수 있다. 그리고 나서 서비스를 연동 할 것이다. 그럼 아래와 같은 명령어를 칠 것이다.</p>
<ul>
<li>kubectl expose deploy nginx &ndash;port=80 &ndash;target-port=80 &ndash;type=ClusterIP -n nginx</li>
</ul>
<p>ClusterIP는 그럼 아래와 같은 정보를 보게 될 것이다.</p>
<figure><figcaption>
            <h4>svc ClusterIP상태</h4>
        </figcaption>
</figure>

<p>NodePort는 아래처럼 정보를 보게 된다.</p>
<ul>
<li>kubectl expose deploy nginx &ndash;port=80 &ndash;target-port=80 &ndash;type=NodePort -n nginx</li>
</ul>
<figure><figcaption>
            <h4>svc NodePort상태</h4>
        </figcaption>
</figure>

<p>그럼 보는바와 같이 차이가 좀 있는 것을 알 수 있다.
NodePort를 하게 될 경우 아래와 같이 30000대의 Port를 확인 할 수 있을 것이다.</p>
<h2 id="l4연동-후-nodeport">L4연동 후 NodePort</h2>
<p>그럼 만약에 L4장비와 연결을 하게 되면 어떻게 보이게 될까? 아래 그림으로 한번 확인을 해보자</p>
<ul>
<li>kubectl expose deploy nginx &ndash;port=80 &ndash;target-port=80 &ndash;type=LoadBalancer -n nginx</li>
</ul>
<figure><figcaption>
            <h4>svc LoadBalancer상태#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>svc LoadBalancer상태#2</h4>
        </figcaption>
</figure>

<p>위에 AVI에 설정된 서버가 실제적인 K8S의 Node인것을 확인 할 수 있다.</p>
<figure><figcaption>
            <h4>svc LoadBalancer상태#3</h4>
        </figcaption>
</figure>

<p>보는 것과 같이 실제 노드IP에 32676번 (30000번대의 포트를 할당 받음) 포트가 연동 되어 있는것을 확인 할 수 있다.</p>
<p>그럼 실제적으로 클라이언트가 접속을 하게 되면 Node:Port(32767)의 연결된 노드로 트래픽이 가게 되고 노드는 트래픽이 들어오면 해당하는 EndPoint로 접속 하게 되는 것이다.</p>
<ul>
<li>Source &gt; L4 &gt; Node:Port &gt; Container</li>
</ul>
<p>그럼 아래와 같이 SVC와 그의 대한 Endpoint가 어떻게 연결되어 있는지 알 수 있다.
<figure><figcaption>
            <h4>svc LoadBalancer상태#4</h4>
        </figcaption>
</figure>
</p>
<p>아래와 같이 접속이 되는 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>svc LoadBalancer상태#5</h4>
        </figcaption>
</figure>
</p>
<h2 id="l4연동-후-clusterip">L4연동 후 ClusterIP</h2>
<p>그런대 여기서 의문점이 들 것이다. 그럼 ClusterIP는 지원이 안되는건가? 그건 연동하는 L4에서 지원을 하면 가능 하다. 그럼 어떻게 나오는지 한번 확인 해보자.</p>
<p>특별하게 설정 할 것은 없고, AVI를 NodePort를 지원하는 것에서 ClusterIP로 변경 후 상태를 확인 해보면 실제 Pod의 IP로 맵핑이 된 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>svc LoadBalancer상태#6</h4>
        </figcaption>
</figure>
</p>
<h2 id="결과">결과</h2>
<p>위에서 보듯이 NodePort와 ClusterIP의 차이점을 확인해 볼 수 있을 거 같다.</p>
]]></description>
</item><item>
    <title>The Documentation Minio</title>
    <link>https://huntedhappy.github.io/ko/minio/</link>
    <pubDate>Thu, 06 Jan 2022 23:47:23 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/minio/</guid>
    <description><![CDATA[<p>MiniO는 Minimal Object Storage를 의미 하며, 오픈소스 형태로 제공 하는 오브젝트 스토리지이다.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Object Storage?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">오브젝트 스토리지는 이미지, 오디오 파일, 스프레드시트 또는 바이너리 실행 코드등 문서 처럼 한줄 한문자 바꾸는 형식이 아니라 하나의 파일이 다 바뀌는 것으로 이해하면 쉬울 거 같다.</div>
        </div>
    </div>
<p>MiniO는 3가지 형태로 도구를 제공 한다.</p>
<ul>
<li>MiniO Console / Server - UI / Cloud Storage Server를 구성 할 수 있다.</li>
<li>MiniO Client(mc,admin) - Minio Server, AWS S3, GCS등등 연결하여 파일 업로드 및 관리등을 할 수 있다.</li>
<li>MiniO gateway - Minio는 스토리지 Gateway도 지원한다. 예를들어 miniO게이트웨이를 구성 하면 가상머신등에서 Nas를 통해 파일 또는 파일공유 지점으로 miniO안 객체에 엑세스 할 수 있다.</li>
</ul>
<p>MiniO는 2가지의 배포 형식을 제공 한다.</p>
<ul>
<li>독립형 배포: 단일 스토리지 볼륨 또는 폴더가 있는 단일 MiniO 서버</li>
<li>분산 배포: 모든 서버에 총 스토리지 볼륨이 4개 이상인 하나 이상의 MiniO서버</li>
</ul>
<p>위의 내용은 Kasten 설치 후 백업 스토리지를 MiniO로 구성하기 위해 간단하게 MiniO가 무엇인지의 대한 설명</p>
<p>아래 내용은 Kasten으로 백업 스토리지를 MiniO로 구성시 Erasure Coding 및 Immutability가 되어야 하는대 이 부분의 대해서 설명 하고자 한다.</p>
<h2 id="1-erasure-coding">1. Erasure Coding</h2>
<p>Erasure Coding은 클러스터의 여러개 디스크 드라이브 중 몇개가 손실이 발생 하더라도 자동으로 복구 를 할 수 있게 해주는 데이터 중복성 및 가용성 기능이다. Erasure Coding은 RAID 또는 복제와 같은 기술보다 적은 오버헤드로 복구를 제공한다.</p>
<h3 id="11-erasure-coding-동작">1.1. Erasure Coding 동작</h3>
<p>Erasure Coding은 원본 데이터를 가져와서 데이터가 필요할 때 원본 정보를 재생성하기 위해 부분 집합만 필요로 하는 방식으로 인코딩을 한다. 예를들어 개체 또는 데이터의 원래 값이 95라고 가정하고 x=9 및 y=5가 되도록 나눈다. 인코딩 프로세스는 일련의 방정식을 생성 한다.</p>
<p>이 경우 다음과 같은 방적식을 생성한다고 가정 합니다.</p>
<ul>
<li>x + y = 14</li>
<li>x - y = 4</li>
<li>2x + y = 23</li>
</ul>
<p>객체를 재생성 하려면 이 세 방정식 중 두가지가 필요 하므로 디코딩 할 수 있습니다. 따라서 방정식을 풀면 x와 y에 대한 값을 얻을 수 있습니다.</p>
<p>3개의 방정식이 있지만 그 중 2개에서 원래 정보를 얻을 수 있기 때문에 데이터를 조각으로 나누고 인코딩하여 여러위치에 저장하는 데이터 보호 체계 입니다.</p>
<p>요약하자면, Erasure Code를 활용하여 데이터를 인코딩 하고, 데이터 손실시 디코딩 과정을 거쳐 원본 데이터를 복구하는 데이터 복구 기법중 하나</p>
<figure><figcaption>
            <h4>Decode / Encode</h4>
        </figcaption>
</figure>

<p>자세한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.min.io/minio/baremetal/concepts/erasure-coding.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Minio Erasure Coding</a></p>
<p>참고링크#1 <a href="https://stonefly.com/blog/understanding-erasure-coding" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> 참고링크#1</a></p>
<h3 id="12-erasure-coding-vs-raid">1.2. Erasure Coding vs RAID?</h3>
<p>RAID로 구성시 데이터를 다른 위치에 저장할 수 있으며 드라이브 오류로부터 보호, Erasure Coding은 데이터가 부분적으로 분할된 다음 확장되고 인코딩이 된다. 그 후 세그먼트는 여러 위치에 보관하도록 구성이 된다. 
RAID는 무결성 위협으로 부터 데이터 보호를 용이 하게 할 수 있으며, Erasure Coding은 스토리지 소모를 덜 할 수 있게 해준다. 
상황에 따라 RAID 및 Erasure Coding 모두 적합 할 수 있다.</p>
<p>Erasure Coding의 현재 사용 사례 중 하나는 객체 기반 클라우드 스토리지입니다. Erasure Coding은 높은 CPU 사용률을 요구하고 대기 시간이 발생하므로 애플리케이션 보관에 적합합니다. 또한 Erasure Coding은 데이터 무결성 위협으로부터 보호할 수 없기 때문에 기본 워크로드에 적합하지 않습니다.</p>
<h3 id="13-erasure-coding의-이점">1.3. Erasure Coding의 이점</h3>
<p>Erasure Coding은 고급 데이터 보호 및 재해 복구 방법을 제공합니다 .</p>
<ul>
<li>저장 공간 활용도: Erasure Coding은 소비되는 공간을 줄이고 동일한 수준의 중복성을 제공하여 더 나은 저장 활용률을 제공(복사본 3개). Erasure Coding을 활용하면 최대 50% 더 많은 공간을 절약할 수 있습니다.</li>
<li>신뢰성 향상:  데이터 조각은 독립적인 오류 더미 로 조각화됩니다 . 이렇게 하면 종속되거나 상관된 오류가 발생하지 않습니다.</li>
<li>적합성: Erasure Coding은 모든 파일 크기에 사용할 수 있습니다. KiloBytes의 작은 블록 크기에서 PetaBytes의 큰 블록 크기에 이르기까지 다양합니다.</li>
<li>Suitability: 데이터를 복구하는 데 데이터의 Suitability만 필요합니다. 원본 데이터가 필요하지 않습니다.</li>
<li>유연성: 시스템을 오프라인으로 전환하지 않고도 편리할 때 고장난 구성 요소를 교체할 수 있습니다.</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Suitablility?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Suitablility란 더 큰 집합에서의 부분적인 집합.</div>
        </div>
    </div>
<h3 id="14-minio-erasure-code-계산기">1.4. MiniO Erasure Code 계산기</h3>
<blockquote>
<p><a href="https://min.io/product/erasure-code-calculator?utm_term=erasure%20coding&amp;utm_campaign=Erasure&#43;Coding&#43;1.4&amp;utm_source=adwords&amp;utm_medium=ppc&amp;hsa_acc=8976569894&amp;hsa_cam=13884673572&amp;hsa_grp=127699937027&amp;hsa_ad=533469681242&amp;hsa_src=g&amp;hsa_tgt=kwd-314402742856&amp;hsa_kw=erasure%20coding&amp;hsa_mt=p&amp;hsa_net=adwords&amp;hsa_ver=3&amp;gclid=Cj0KCQiAip-PBhDVARIsAPP2xc2nLMVBzYtNdDYlETP-3UjGr3ZqD7sA-IPzfhNnxWhzes03cq62ViUaAtprEALw_wcB" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> 계산기 LINK</a></p>
</blockquote>
<h2 id="2-immutability">2. Immutability</h2>
<p>MiniO 서버는 특정 개체에 대해 WORM을 허용하거나 모든 객체에 기본 보존 모드 및 보존기간을 적용하는 객체 잠금 구성으로 버킷을 구성하여 WORM을 허용합니다. 이렇게 하면 버킷의 객체를 변경 할 수 없습니다. 즉, 버킷의 객체 잠금 구성 또는 객체 보존에 지정된 만료일 까지 버전 삭제가 허용 되지 않습니다.</p>
<p>객체 잠금을 사용하려면 버킷 생성시 잠금을 활성화해야 하며, 객체 잠금도 버킷의 버전 관리를 자동으로 활성화 합니다. 또는 버킷에서 생성된 객체에 적용할 기본 보존 기간 및 보존 모드를 버킷에 구성 할 수 있습니다.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>WORM?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Read Many(WORM)</div>
        </div>
    </div>
<h3 id="21-개념">2.1. 개념</h3>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Immutability 개념<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>객체가 법적 보존 상태에 있는 경우 해당 버전ID에 대한 법적 보존이 명시적으로 제거되지 않는 한 삭제 할 수 없다. 그렇지 않으면 DeleteObjectVersio()이 실패 한다.</li>
<li>Compliance모드 에서는 해당 버전 ID의 보존기간이 만료될 때때가지 누구도 객체를 삭제 할 수 없다. 사용자에게 필요한 거버넌스 우회 권한이 있는 경우 Compliance모드 에서 개체의 보존 날짜를 연장 할 수 있다.</li>
<li>객체 잠금 구성이 버킷으로 설정되면</li>
</ul>
<blockquote>
<ul>
<li>새 객체는 버킷 객체 잠금 구성의 보존 설정을 자동으로 상속한다.</li>
<li>개체를 업로드할 때 보존 헤더를 선택적으로 설정 할 수 있다.</li>
<li>개체에서 명시적으로 PutObjectRetention API 호출을 할 수 있다.</li>
</ul>
</blockquote>
<ul>
<li>MINIO_NTP_SERVER환경 변수는 보존하는 날짜를 시스템시간으로 설정이 필요하지 않는 경우 원격 NTP 서버를 구성 할 수 있다.</li>
<li>객체잠금 기능은 삭제 코드 및 분산 삭제 코드 설정에서만 사용 할 수 있다.</li>
</ul>
</div>
        </div>
    </div>
<p>자세한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.min.io/docs/minio-bucket-object-lock-guide.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Minio Immutability</a></p>
<h3 id="카스텐-설정시-minio로-backup-storage-구성-링크-참조-i-classfas-fa-linki-kasten-minio-installhttpshuntedhappygithubiokok10">카스텐 설정시 MiniO로 Backup Storage 구성 링크 참조. <a href="https://huntedhappy.github.io/ko/k10/" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Kasten MiniO Install</a></h3>
]]></description>
</item><item>
    <title>The Documentation Tanzu</title>
    <link>https://huntedhappy.github.io/ko/tanzu/</link>
    <pubDate>Sat, 01 Jan 2022 17:50:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/tanzu/</guid>
    <description><![CDATA[<h2 id="1-vmware-tanzu">1. VMware TANZU?</h2>
<p>2019년 8월 VMware에서 처음으로 TANZU 포트 폴리오를 발표 했다. VM웨어의 대표 제품군인 ‘브이스피어(vSphere)’를 쿠버네티스 네이티브 플랫폼으로 바꾸겠다고 선언했다. 이를 위해 VM웨어는 ‘프로젝트 퍼시픽(Project Pacific)’을 진행했다.</p>
<blockquote>
<figure><figcaption>
            <h4>Tanzu Portfolio</h4>
        </figcaption>
</figure>

</blockquote>
<p>처음에는 VCF(VMware Cloud Foundation)라는 솔루션을 같이 설치 하면서 배포 해야 되었던 vsphere with tanzu가 현재는 VCF를 구성하지 않아도 설치가 가능하도록 변하게 되었다.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>VCF(VMware Cloud Foundation)?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">VMware 제품군을 자동으로 설치 해주는 솔루션이다. Excel, JSON파일을 읽어 드려 vSphere, vCenter, vSAN 그리고 NSX-T를 한번에 배포 해주는 솔루션</div>
        </div>
    </div>
<h3 id="11-vsphere-with-tanzu">1.1. vsphere with tanzu?</h3>
<p>vsphere with tanzu는 말그대로 vsphere 에서 컨테이너를 바로 올리는 컨셉으로 나왔다. 용어로 TKGS라고도 불린다. Tanzu를 서비스형태로 올릴 수 있다고 해서 TKGS라고 불리며, 말그대로 vCenter에서 서비스 형태로 설치를 할 수 있기 때문이다. 하지만 vCenter에 종속이 되버리기 때문에 vCenter가 업그레이드가 되어야 K8S의 버전을 올릴수 있다. 정확히 말하면 vsphere위에 올릴 경우는 이벤트 형식으로 올리고, 프로덕션의 경우 TKC위에다가 POD를 올리는 것이 낫지 않을까 싶다.</p>
<p>그래서 컨셉은 아래와 같다.</p>
<blockquote>
<figure><figcaption>
            <h4>TKGS</h4>
        </figcaption>
</figure>

</blockquote>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>TKC(Tanzu Kubernetes Cluster)?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">TKC는 별도로 클러스터를 배포 하는 것이다. vmware에서 배포되는 Supervisor가 관리를 하게 되며, 네임스페이스에 TKC를 배포 하여 사용 할 수 있다.</div>
        </div>
    </div>
<p>자세한 TKGS의 대한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.vmware.com/kr/VMware-vSphere/7.0/vmware-vsphere-with-tanzu/GUID-4D0D375F-C001-4F1D-AAB1-1789C5577A94.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> VMware TKGS</a></p>
<h3 id="12-tanzu-kubernetes-grid">1.2. Tanzu Kubernetes Grid?</h3>
<p>TKGM이라고 하며, 예전 Pivotal에서 PKS가 이렇게 변한 것이 아닐까 싶다. 예전 Pivotal에서는 bosh라는 관리 솔루션을 통해 PKS를 배포 하여 클러스터를 구성 하였다. 그렇다고 TKG가 기존에 없었던 솔루션은 아니다 6.7에서 이미 TKG는 있었지만 많은 사람들이 사용하지는 않았다. 그리고 Pivotal이 VMware로 인수 되면서 Tanzu로 변화하고 있는 것으로 알고 있다. TKGM은 TKGS와는 다른게 별도로 관리 클러스터를 배포해야 한다. TKGS같은 경우에는 Supervisor가 그 역할을 하였다.
그리고 TKC를 배포하는 형식이다.</p>
<p>자세한 TKG의 대한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.vmware.com/en/VMware-Tanzu-Kubernetes-Grid/1.4/vmware-tanzu-kubernetes-grid-14/GUID-tkg-concepts.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> VMware TKG</a></p>
<h3 id="13-tanzu-kubernetes-integrated">1.3. Tanzu Kubernetes Integrated?</h3>
<p>기존 Pivotal에서 Bosh로 배포한 PKS라고 보면 될거 같다. 현재는 사용하지 않을 것 같으므로 설명은 패스 하겠다.</p>
<p>자세한 TKGI의 대한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.vmware.com/en/VMware-Tanzu-Kubernetes-Grid-Integrated-Edition/index.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> VMware TKGI</a></p>
]]></description>
</item></channel>
</rss>
