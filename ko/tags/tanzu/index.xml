<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>tanzu - Tag - Dokyung&#39;s DevOoOps</title>
        <link>https://huntedhappy.github.io/ko/tags/tanzu/</link>
        <description>tanzu - Tag - Dokyung&#39;s DevOoOps</description>
        <generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>huntedhappy@gmail.com (Dokyung)</managingEditor>
            <webMaster>huntedhappy@gmail.com (Dokyung)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 15 Jul 2022 17:49:37 &#43;0900</lastBuildDate><atom:link href="https://huntedhappy.github.io/ko/tags/tanzu/" rel="self" type="application/rss+xml" /><item>
    <title>The Documentation Tanzu &amp; Keycloak</title>
    <link>https://huntedhappy.github.io/ko/tanzu-keycloak/</link>
    <pubDate>Fri, 15 Jul 2022 17:49:37 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/tanzu-keycloak/</guid>
    <description><![CDATA[<h2 id="1-tanzu와-keycloak-연동">1. TANZU와 KEYCLOAK 연동</h2>
<p>TANZU는 기본적으로 LDAPS 또는 OIDC와 연동이 가능합니다. 그 중에 무료 서비스인 KEYCLOAK을 활용하여 TANZU와 KEYCLOAK 연동</p>
<h2 id="2-keycloak-구성">2. KEYCLOAK 구성</h2>
<p><a href="https://www.keycloak.org/downloads" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> KEYCLOAK DOWNLOAD LINK</a></p>
<figure><figcaption>
            <h4>keycloak download</h4>
        </figcaption>
</figure>

<p>KEYCLOAK 설치
인증서는 사설 인증서로 생성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## 압축 해제</span>
tar zxvf keycloak-18.0.2.tar.gz

<span class="nb">cd</span> keycloak-18.0.2
<span class="nb">export</span> <span class="nv">KEYCLOAK_ADMIN</span><span class="o">=</span>admin
<span class="nb">export</span> <span class="nv">KEYCLOAK_ADMIN_PASSWORD</span><span class="o">=</span><span class="s1">&#39;&#39;</span>

bin/kc.sh start-dev --https-certificate-file <span class="o">{</span>인증서<span class="o">}</span> --https-certificate-key-file <span class="o">{</span>인증서 KEY<span class="o">}</span> --https-port <span class="m">8443</span> --hostname <span class="o">{</span>hostname<span class="o">}</span> <span class="p">&amp;</span>
</code></pre></td></tr></table>
</div>
</div><p>reaml 생성
<figure><figcaption>
            <h4>realm 생성</h4>
        </figcaption>
</figure>
</p>
<p>필요한 Client Scopes
<figure><figcaption>
            <h4>Client Scopes</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Client Scopes</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Client Scopes</h4>
        </figcaption>
</figure>
</p>
<p>Clients 생성
<figure><figcaption>
            <h4>Clients 생성</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Clients 생성</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Clients 생성</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Clients 생성</h4>
        </figcaption>
</figure>
</p>
<figure><figcaption>
            <h4>Role</h4>
        </figcaption>
</figure>

<p>생성한 Client Scopes를 Default Client Scopes에 이동
<figure><figcaption>
            <h4>Scopes 선택</h4>
        </figcaption>
</figure>
</p>
<p><figure><figcaption>
            <h4>Groups 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Groups 설정</h4>
        </figcaption>
</figure>
</p>
<p>Roles
<figure><figcaption>
            <h4>Roles 설정</h4>
        </figcaption>
</figure>
</p>
<p>Groups
<figure><figcaption>
            <h4>Groups 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Groups 설정</h4>
        </figcaption>
</figure>
</p>
<p>Users
<figure><figcaption>
            <h4>Users 생성</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Users 생성</h4>
        </figcaption>
</figure>
</p>
<p>User Password 설정
<figure><figcaption>
            <h4>User Password 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>User Password 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Group에 할당</h4>
        </figcaption>
</figure>
</p>
<h2 id="3-tanzu-구성">3. TANZU 구성</h2>
<p>사설 인증서로 구성을 했기 때문에 당연히 worker Node에도 신뢰된 인증서로 들어가 있어야 하며, 처음 구성시 CA를 넣는 부분이 없기 때문에 배포가 완료 후 CA를 넣어야 함</p>
<p>OIDC 추출</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">
<span class="c1">## management cluster 변경</span>
<span class="nv">cluster</span><span class="o">=</span>tkgm02

<span class="nb">echo</span> <span class="nv">$IDENTITY_MANAGEMENT_TYPE</span>
<span class="nb">export</span> <span class="nv">_TKG_CLUSTER_FORCE_ROLE</span><span class="o">=</span><span class="s2">&#34;management&#34;</span>
<span class="nb">export</span> <span class="nv">FILTER_BY_ADDON_TYPE</span><span class="o">=</span><span class="s2">&#34;authentication/pinniped&#34;</span>

tanzu cluster create <span class="nv">$cluster</span> --dry-run -f tkgm01.yaml &gt; <span class="nv">$cluster</span>-example-secret.yaml

</code></pre></td></tr></table>
</div>
</div><p>위와 같이 하면 아래와 같은 파일을 확인 할 수 있다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">apiVersion: v1
kind: Secret
metadata:
  annotations:
    tkg.tanzu.vmware.com/addon-type: authentication/pinniped
  labels:
    clusterctl.cluster.x-k8s.io/move: <span class="s2">&#34;&#34;</span>
    tkg.tanzu.vmware.com/addon-name: pinniped
    tkg.tanzu.vmware.com/cluster-name: tkgm02
  name: cjenm-tkgm02-pinniped-addon
  namespace: tkg-system
stringData:
  values.yaml: <span class="p">|</span>
    <span class="c1">#@data/values</span>
    <span class="c1">#@overlay/match-child-defaults missing_ok=True</span>
    ---
    infrastructure_provider: vsphere
    tkg_cluster_role: management
    custom_cluster_issuer: <span class="s2">&#34;&#34;</span>
    custom_tls_secret: <span class="s2">&#34;&#34;</span>
    http_proxy: <span class="s2">&#34;&#34;</span>
    https_proxy: <span class="s2">&#34;&#34;</span>
    no_proxy: <span class="s2">&#34;&#34;</span>
    identity_management_type: oidc
    pinniped:
      cert_duration: 2160h
      cert_renew_before: 360h
      supervisor_svc_endpoint: https://0.0.0.0:31234
      supervisor_ca_bundle_data: ca_bundle_data_of_supervisor_svc
      supervisor_svc_external_ip: 0.0.0.0
      supervisor_svc_external_dns: null
      upstream_oidc_client_id: <span class="o">{</span>CLIENT ID<span class="o">}</span>
      upstream_oidc_client_secret: <span class="o">{</span>CLIENT SECRET<span class="o">}</span>
      upstream_oidc_issuer_url: https://<span class="o">{</span>KEYCLAOK FQDN<span class="o">}</span>:8443/realms/access
      upstream_oidc_tls_ca_data: <span class="o">{</span>base64로 CA인증서<span class="o">}</span>
      upstream_oidc_additional_scopes:
      - openid
      - profile
      - email
      - groups
      - offline_access
      upstream_oidc_claims:
        username: email
        groups: groups
      supervisor:
        service:
          name: pinniped-supervisor
          type: LoadBalancer
type: tkg.tanzu.vmware.com/addon
</code></pre></td></tr></table>
</div>
</div><p>실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f <span class="nv">$cluster</span>-example-secret.yaml -n tkg-system
</code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>완료 후 테스트</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu mc kubeconfig get --export-file<span class="o">=</span>tanzu-cli-tkgm02

kubectl get pod -A --kubeconfig tanzu-cli-tkgm02
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>요청</h4>
        </figcaption>
</figure>

<p>생성한 계정으로 로그인
<figure><figcaption>
            <h4>LOGIN</h4>
        </figcaption>
</figure>
</p>
<p>TOKEN을 얻을 수 있다.
<figure><figcaption>
            <h4>TOKEN 얻기</h4>
        </figcaption>
</figure>
</p>
<p>TOKEN을 붙여 넣으면 아래와 같이 요청이 되는 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>kubectl 요청</h4>
        </figcaption>
</figure>
</p>
<p>만약 권한이 없다면 아래 처럼 권한이 없다고 나온다.
<figure><figcaption>
            <h4>kubectl 요청</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item><item>
    <title>The Documentation Tanzu &amp; OTKA</title>
    <link>https://huntedhappy.github.io/ko/tanzu-okta/</link>
    <pubDate>Fri, 15 Jul 2022 17:17:42 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/tanzu-okta/</guid>
    <description><![CDATA[<h2 id="1-tanzu와-okta-연동">1. TANZU와 OKTA 연동</h2>
<p>TANZU는 기본적으로 LDAPS 또는 OIDC와 연동이 가능합니다. 그 중에 OKTA 서비스를 활용하여 TANZU와 OKTA를 연동 하겠습니다.
OKTA는 기본적으로 30일간 무료로 사용이 가능합니다.</p>
<h2 id="2-okta-구성">2. OKTA 구성</h2>
<p>OKTA접속 후 관리자로 변경</p>
<figure><figcaption>
            <h4>관리자로 변경</h4>
        </figcaption>
</figure>

<p>Application 추가</p>
<p><figure><figcaption>
            <h4>Apps 추가</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Apps 추가</h4>
        </figcaption>
</figure>
</p>
<p>redirect URIs는 kubectl get svc를 통해 확인
<figure><figcaption>
            <h4>Apps 추가</h4>
        </figcaption>
</figure>
</p>
<figure><figcaption>
            <h4>Redirect URIs 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Sign On 수정</h4>
        </figcaption>
</figure>

<p>Group을 생성은 Optional
<figure><figcaption>
            <h4>Groups 생성 및 Assignment</h4>
        </figcaption>
</figure>
</p>
<figure><figcaption>
            <h4>APP Assign</h4>
        </figcaption>
</figure>

<p><figure><figcaption>
            <h4>APP Assign</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>APP Assign</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>APP Assign</h4>
        </figcaption>
</figure>
</p>
<h2 id="3-tanzu-구성">3. TANZU 구성</h2>
<p>OIDC_IDENTITY_PROVIDER_CLIENT_SECRET를 base64로 변경 필요</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> -n <span class="s1">&#39;{CLIENT SECRETS}&#39;</span> <span class="p">|</span> base64
</code></pre></td></tr></table>
</div>
</div><p>TANZU MGMT 에서 OIDC 부분을 찾은 후 파일 수정</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">
IDENTITY_MANAGEMENT_TYPE: <span class="s2">&#34;oidc&#34;</span>

<span class="c1">#! Settings for IDENTITY_MANAGEMENT_TYPE: &#34;oidc&#34;</span>
CERT_DURATION: 2160h
CERT_RENEW_BEFORE: 360h
IDENTITY_MANAGEMENT_TYPE: oidc
OIDC_IDENTITY_PROVIDER_CLIENT_ID: 0oa2i<span class="o">[</span>...<span class="o">]</span>NKst4x7
OIDC_IDENTITY_PROVIDER_CLIENT_SECRET: &lt;encoded:LVVnMFNsZFIy<span class="o">[</span>...<span class="o">]</span><span class="nv">TMTV3WUdPZDJ2Xw</span><span class="o">==</span>&gt;
OIDC_IDENTITY_PROVIDER_GROUPS_CLAIM: groups
OIDC_IDENTITY_PROVIDER_ISSUER_URL: https://dev-<span class="o">[</span>...<span class="o">]</span>.okta.com
OIDC_IDENTITY_PROVIDER_SCOPES: openid,profile,email,groups,offline_access
OIDC_IDENTITY_PROVIDER_USERNAME_CLAIM: email
</code></pre></td></tr></table>
</div>
</div><h2 id="4-sa-생성-후-test">4. SA 생성 후 TEST</h2>
<p>SA 생성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create clusterrolebinding id-mgmt-test-user --clusterrole cluster-admin --user <span class="o">{</span>mail address<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>TEST</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu mc kubeconfig get --export-file<span class="o">=</span>tanzu-cli-cjenm-tkgm02

kubectl get pod -A --kubeconfig tanzu-cli-cjenm-tkgm02
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>TEST</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>TEST</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>TEST</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>TEST</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>TEST</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item><item>
    <title>The Documentation vSphere Tanzu with AVI Load Balancer</title>
    <link>https://huntedhappy.github.io/ko/avi/</link>
    <pubDate>Tue, 05 Apr 2022 21:51:24 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/avi/</guid>
    <description><![CDATA[<h2 id="1-tanzu에서-cluster-servicetype-변경">1. TANZU에서 Cluster ServiceType 변경</h2>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>serviceType<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>ManageMent Cluster로 Context 변경</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">### NodePort 변경</span>
kubectl apply -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: networking.tkg.tanzu.vmware.com/v1alpha1
</span><span class="s">kind: AKODeploymentConfig
</span><span class="s">metadata:
</span><span class="s">  name: nodeport01
</span><span class="s">spec:
</span><span class="s">  adminCredentialRef:
</span><span class="s">    name: avi-controller-credentials
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  certificateAuthorityRef:
</span><span class="s">    name: avi-controller-ca
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  cloudName: Default-Cloud
</span><span class="s">  clusterSelector:
</span><span class="s">    matchLabels:
</span><span class="s">      ako-l7-nodeport-01: &#34;true&#34;
</span><span class="s">  controller: avi.tkg.io
</span><span class="s">  dataNetwork:
</span><span class="s">    cidr: 10.253.127.0/24
</span><span class="s">    name: LS_TKGM_10.253.127.x
</span><span class="s">  extraConfigs:
</span><span class="s">    cniPlugin: antrea
</span><span class="s">    disableStaticRouteSync: false
</span><span class="s">    l4Config:
</span><span class="s">      autoFQDN: disabled
</span><span class="s">    ingress:
</span><span class="s">      defaultIngressController: true
</span><span class="s">      disableIngressClass: false  
</span><span class="s">      nodeNetworkList:
</span><span class="s">        - cidrs:
</span><span class="s">            - 10.253.127.0/24
</span><span class="s">          networkName: LS_TKGM_10.253.127.x
</span><span class="s">      serviceType: NodePort
</span><span class="s">      shardVSSize: SMALL
</span><span class="s">  serviceEngineGroup: Default-Group
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">### ClusterIP 변경</span>
kubectl apply -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: networking.tkg.tanzu.vmware.com/v1alpha1
</span><span class="s">kind: AKODeploymentConfig
</span><span class="s">metadata:
</span><span class="s">  name: clusterip01
</span><span class="s">spec:
</span><span class="s">  adminCredentialRef:
</span><span class="s">    name: avi-controller-credentials
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  certificateAuthorityRef:
</span><span class="s">    name: avi-controller-ca
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  cloudName: Default-Cloud
</span><span class="s">  clusterSelector:
</span><span class="s">    matchLabels:
</span><span class="s">      ako-l7-clusterip-01: &#34;true&#34;
</span><span class="s">  controller: avi.tkg.io
</span><span class="s">  dataNetwork:
</span><span class="s">    cidr: 10.253.127.0/24
</span><span class="s">    name: LS_TKGM_10.253.127.x
</span><span class="s">  extraConfigs:
</span><span class="s">    cniPlugin: antrea
</span><span class="s">    disableStaticRouteSync: false                               # required
</span><span class="s">    l4Config:
</span><span class="s">      autoFQDN: disabled
</span><span class="s">    ingress:
</span><span class="s">      defaultIngressController: true
</span><span class="s">      disableIngressClass: false                                # required
</span><span class="s">      nodeNetworkList:                                          # required
</span><span class="s">        - cidrs:
</span><span class="s">            - 10.253.127.0/24
</span><span class="s">          networkName: LS_TKGM_10.253.127.x
</span><span class="s">      serviceType: ClusterIP                                    # required
</span><span class="s">      shardVSSize: SMALL                                       # required
</span><span class="s">  serviceEngineGroup: Default-Group
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">### NodePortLocal 변경</span>
kubectl apply -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: networking.tkg.tanzu.vmware.com/v1alpha1
</span><span class="s">kind: AKODeploymentConfig
</span><span class="s">metadata:
</span><span class="s">  name: npl-enabled
</span><span class="s">spec:
</span><span class="s">  adminCredentialRef:
</span><span class="s">    name: avi-controller-credentials
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  certificateAuthorityRef:
</span><span class="s">    name: avi-controller-ca
</span><span class="s">    namespace: tkg-system-networking
</span><span class="s">  cloudName: Default-Cloud
</span><span class="s">  clusterSelector:
</span><span class="s">    matchLabels:
</span><span class="s">      npl-enabled: &#34;true&#34;
</span><span class="s">  controlPlaneNetwork:
</span><span class="s">    cidr: 10.253.127.0/24
</span><span class="s">    name: LS_TKGM_10.253.127.x
</span><span class="s">  controller: avi.tkg.io
</span><span class="s">  dataNetwork:
</span><span class="s">    cidr: 10.253.127.0/24
</span><span class="s">    name: LS_TKGM_10.253.127.x
</span><span class="s">  extraConfigs:
</span><span class="s">    cniPlugin: antrea
</span><span class="s">    disableStaticRouteSync: false                               # required
</span><span class="s">    l4Config:
</span><span class="s">      autoFQDN: disabled
</span><span class="s">    ingress:
</span><span class="s">      defaultIngressController: true
</span><span class="s">      disableIngressClass: false                               
</span><span class="s">      nodeNetworkList:                                          
</span><span class="s">        - cidrs:
</span><span class="s">            - 10.253.127.0/24
</span><span class="s">          networkName: LS_TKGM_10.253.127.x
</span><span class="s">      serviceType: NodePortLocal                                     # required
</span><span class="s">      shardVSSize: SMALL                                       
</span><span class="s">  serviceEngineGroup: Default-Group
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p>NodePort 테스트</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl config use-context <span class="o">{</span>Management Cluster<span class="o">}</span>

kubectl get cluster --show-labels

kubectl label cluster tkgm01-tkc-dev01 ako-l7-nodeport-01<span class="o">=</span><span class="nb">true</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl config use-context <span class="o">{</span>TKC<span class="o">}</span>

kubectl create deploy hello --image<span class="o">=</span>paulbouwer/hello-kubernetes:1.7 --replicas<span class="o">=</span><span class="m">3</span> --port<span class="o">=</span><span class="m">8080</span>

kubectl expose deployment hello --type<span class="o">=</span>NodePort --port<span class="o">=</span><span class="m">80</span> --target-port<span class="o">=</span><span class="m">8080</span>

kubectl create ingress hello --class<span class="o">=</span>avi-lb --rule<span class="o">=</span><span class="s2">&#34;hello.avi.tkg.io/=hello:8080&#34;</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>접속 화면</h4>
        </figcaption>
</figure>

<p>NodePort로 구성이 되어 있기 때문에 아래와 같이 NodeIP와 30000번대의 Port로 서버풀이 지정되는 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>AVI VS 상태 확인</h4>
        </figcaption>
</figure>
</p>
<p>ClusterIP 테스트</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl config use-context <span class="o">{</span>Management Cluster<span class="o">}</span>

kubectl get cluster --show-labels

kubectl label cluster tkgm01-tkc-dev01 ako-l7-clusterip-01<span class="o">=</span><span class="nb">true</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl config use-context <span class="o">{</span>TKC<span class="o">}</span>

kubectl get cm avi-k8s-config -n avi-system -o <span class="nv">jsonpath</span><span class="o">={</span>.data.serviceType<span class="o">}</span>

kubectl create deploy hello --image<span class="o">=</span>paulbouwer/hello-kubernetes:1.7 --replicas<span class="o">=</span><span class="m">3</span> --port<span class="o">=</span><span class="m">8080</span>

kubectl expose deployment hello --type<span class="o">=</span>ClusterIP --port<span class="o">=</span><span class="m">80</span> --target-port<span class="o">=</span><span class="m">8080</span>

kubectl create ingress hello --class<span class="o">=</span>avi-lb --rule<span class="o">=</span><span class="s2">&#34;hello.avi.tkg.io/=hello:8080&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>ServiceType 변경 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>AVI Routing 확인</h4>
        </figcaption>
</figure>

ClusterIP로 구성이 되어 있기 때문에 아래와 같이 실제 Pod와 실제 Port로 서버풀이 지정되는 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>AVI VS 상태 확인</h4>
        </figcaption>
</figure>
</p>
<h2 id="2-avi-infra-settings">2. AVI Infra Settings</h2>
<p>만약에 하나의 클러스터에서 VS별 SE-GROUP을 분리 하거나, 또는 VS의 IP 대역을 분리 하고 싶을 경우 AVIINFRASETTING을 사용하여 구성을 할 수 있다.
<figure><figcaption>
            <h4>구성</h4>
        </figcaption>
</figure>
</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: ako.vmware.com/v1alpha1
</span><span class="s">kind: AviInfraSetting
</span><span class="s">metadata:
</span><span class="s">  name: other-infra
</span><span class="s">spec:
</span><span class="s">  seGroup:
</span><span class="s">    name: Default-Group
</span><span class="s">  network:
</span><span class="s">    vipNetworks:
</span><span class="s">      - networkName: pg-dk-10.253.107.x
</span><span class="s">        cidr: 10.253.107.0/24
</span><span class="s">    enableRhi: false
</span><span class="s">  l7Settings:
</span><span class="s">    shardSize: MEDIUM
</span><span class="s">EOF</span>

kubectl apply -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: networking.k8s.io/v1
</span><span class="s">kind: IngressClass
</span><span class="s">metadata:
</span><span class="s">  name: other-infra
</span><span class="s">spec:
</span><span class="s">  controller: ako.vmware.com/avi-lb
</span><span class="s">  parameters:
</span><span class="s">    apiGroup: ako.vmware.com
</span><span class="s">    kind: AviInfraSetting
</span><span class="s">    name: other-infra
</span><span class="s">EOF</span>

</code></pre></td></tr></table>
</div>
</div><p>테스트</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create deploy hello --image<span class="o">=</span>paulbouwer/hello-kubernetes:1.7 --replicas<span class="o">=</span><span class="m">3</span> --port<span class="o">=</span><span class="m">8080</span>

kubectl expose deployment hello --type<span class="o">=</span>ClusterIP --port<span class="o">=</span><span class="m">80</span> --target-port<span class="o">=</span><span class="m">8080</span>

kubectl create ingress hello --class<span class="o">=</span>other-infra --rule<span class="o">=</span><span class="s2">&#34;hello.avi.tkg.io/=hello:8080&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>VS IP 변경 전</h4>
        </figcaption>
</figure>

아래와 같이 VS IP가 변경 된 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>VS IP 변경 후</h4>
        </figcaption>
</figure>
</p>
<p>기존의 하나의 SE그룹에 모두 VS가 구성이 되어 있다.
<figure><figcaption>
            <h4>SE Group 생성</h4>
        </figcaption>
</figure>
</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## SEGROUP을 변경</span>
kubectl patch aviinfrasettings other-infra --type <span class="s1">&#39;json&#39;</span> -p <span class="s1">&#39;[{&#34;op&#34;:&#34;replace&#34;,&#34;path&#34;:&#34;/spec/seGroup/name&#34;,&#34;value&#34;:&#34;tkgm01&#34;}]&#39;</span>

kubectl patch ing hello --patch <span class="s1">&#39;{&#34;spec&#34;: {&#34;ingressClassName&#34;: &#34;other-infra&#34;}}&#39;</span>

</code></pre></td></tr></table>
</div>
</div><p>현재는 SE가 기존의 
<figure><figcaption>
            <h4>기존 SE 배포 전</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>다른 SE 그룹으로 변경 후 </h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>다른 SE 그룹으로 변경 후 </h4>
        </figcaption>
</figure>
</p>
<p>위와 같은 방법으로 동일한 클러스터 내에서 FQDN별로 SE-GROUP 또는 IP 대역을 분리 할 수 있다.</p>
<h2 id="3-avi-autoscalling">3. AVI AutoScalling</h2>
<figure><figcaption>
            <h4>AVI Autoscalling 기본 동작 </h4>
        </figcaption>
</figure>

<p><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>autoscalling 재 조정값<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## AVI Controller SSH접속 </span>

switchto tenant admin
switchto cloud Default-Cloud
auto_rebalance
save

configure serviceenginegroup Default-Group

auto_rebalance_interval interval-value 
auto_rebalance_criteria option
auto_rebalance_capacity_per_se integer-value

예시: auto_rebalance_interval <span class="m">300</span>

auto_rebalance_criteria 의 옵션 값은 아래와 같음
se_auto_rebalance_cpu
se_auto_rebalance_mbps
se_auto_rebalance_open_conns
se_auto_rebalance_pps

예시: auto_rebalance_capacity_per_se <span class="m">200000</span>

max_cpu_usage value
min_cpu_usage value

<span class="c1">## 종합 </span>
switchto tenant Avi
switchto cloud azure
configure serviceenginegroup Default-Group
auto_rebalance_interval <span class="m">300</span>
auto_rebalance_criteria se_auto_rebalance_pps
auto_rebalance_capacity_per_se <span class="m">200000</span>
max_cpu_usage <span class="m">70</span>
min_cpu_usage <span class="m">30</span>
save

</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<figure><figcaption>
            <h4>auto_rebalance 변경 전</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>auto_rebalance 변경 후</h4>
        </figcaption>
</figure>
</p>
<figure><figcaption>
            <h4>auto scallingout </h4>
        </figcaption>
</figure>

<h2 id="4-bgp-연동-후-rhiroute-health-injection">4. BGP 연동 후 Rhi(Route Health Injection)</h2>
<p>BGP ECMP를 구성 하여 SE를 탄력적으로 확장을 할 수 있습니다.</p>
<p>물리 스위치에는 ECMP를 구성이 필요.</p>
<figure><figcaption>
            <h4>구성</h4>
        </figcaption>
</figure>

<p>AVI에서 BGP 설정
<figure><figcaption>
            <h4>BGP 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>BGP 설정</h4>
        </figcaption>
</figure>
</p>
<p>SE에 접속 해서 BGP 상태를 확인 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## AVI Controller SSH 접속</span>
shell
admin /  <span class="o">{</span>password<span class="o">}</span>
<span class="c1">## 서비스 엔진 접속</span>
attach serviceengine tkcdevAvi-se-jpjbe
ip netns
<span class="c1">## 서비스 엔진 bash 접속</span>
sudo ip netns <span class="nb">exec</span> avi_ns1 bash

<span class="c1">## BGP 확인</span>
netcat localhost bgpd
<span class="nb">enable</span>
show run
show bgp summary

</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>BGP 상태 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>BGP 상태 확인</h4>
        </figcaption>
</figure>
</p>
<p>RHI Enabled</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl patch aviinfrasettings other-infra --type <span class="s1">&#39;json&#39;</span> -p <span class="s1">&#39;[{&#34;op&#34;:&#34;replace&#34;,&#34;path&#34;:&#34;/spec/network/enableRhi&#34;,&#34;value&#34;:true}]&#39;</span> 
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Rhi Enable</h4>
        </figcaption>
</figure>

<p>스위치에서 라우팅 확인
<figure><figcaption>
            <h4>BGP 라우팅</h4>
        </figcaption>
</figure>
</p>
<h2 id="5-gatewayclass">5. GatewayClass</h2>
<p>GATEWAY를 사용하는 이유는 여러개의 LoadBalancer의 IP를 하나의 IP로 설정하고 Port를 사용하기 위해서다.
SVC를 생성하면 생성하는 만큼 IP가 생성이 되기때문에 IP를 공통으로 사용을 할 수 있다.</p>
<figure><figcaption>
            <h4>GATEWAYCLASS 연계</h4>
        </figcaption>
</figure>

<p>구성을 하기 위해서는 클러스터에서 servicesAPI: true 를 True로 변경 필요 및 AutoFQDN와 DefaultDomain이 필요하다.</p>
<p>위에서 언급한 AVIINFRASETTING을 한 후 GATEWAYCLASS를 생성한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;EOF | kubectl apply -f -
</span><span class="s">apiVersion: networking.x-k8s.io/v1alpha1
</span><span class="s">kind: GatewayClass
</span><span class="s">metadata:
</span><span class="s">  name: critical-gwc
</span><span class="s">spec:
</span><span class="s">  controller: ako.vmware.com/avi-lb
</span><span class="s">  parametersRef:
</span><span class="s">    group: ako.vmware.com
</span><span class="s">    kind: AviInfraSetting
</span><span class="s">    name: other-infra
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>GATEWAY 생성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;EOF | kubectl apply -f -
</span><span class="s">apiVersion: networking.x-k8s.io/v1alpha1
</span><span class="s">kind: Gateway
</span><span class="s">metadata:
</span><span class="s">  name: avi-alb-gw
</span><span class="s">  namespace: default
</span><span class="s">spec: 
</span><span class="s">  gatewayClassName: critical-gwc    
</span><span class="s">  listeners: 
</span><span class="s">  - protocol: TCP 
</span><span class="s">    port: 8080 
</span><span class="s">    routes: 
</span><span class="s">      selector: 
</span><span class="s">       matchLabels: 
</span><span class="s">        ako.vmware.com/gateway-namespace: default 
</span><span class="s">        ako.vmware.com/gateway-name: avi-alb-gw
</span><span class="s">      group: v1 
</span><span class="s">      kind: Service
</span><span class="s">  - protocol: TCP 
</span><span class="s">    port: 80 
</span><span class="s">    routes: 
</span><span class="s">      selector: 
</span><span class="s">       matchLabels: 
</span><span class="s">        ako.vmware.com/gateway-namespace: default 
</span><span class="s">        ako.vmware.com/gateway-name: avi-alb-gw
</span><span class="s">      group: v1 
</span><span class="s">      kind: Service
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>만약에 LB IP를 지정 하고 싶다면. 아래와 같이 IP를 지정하면 된다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;EOF | kubectl apply -f -
</span><span class="s">apiVersion: networking.x-k8s.io/v1alpha1
</span><span class="s">kind: Gateway
</span><span class="s">metadata:
</span><span class="s">  name: avi-alb-gw
</span><span class="s">  namespace: default
</span><span class="s">spec: 
</span><span class="s">  gatewayClassName: critical-gwc
</span><span class="s">  addresses:
</span><span class="s">  - type: IPAddress
</span><span class="s">    value: 10.253.107.203
</span><span class="s">  listeners: 
</span><span class="s">  - protocol: TCP 
</span><span class="s">    port: 8080 
</span><span class="s">    routes: 
</span><span class="s">      selector: 
</span><span class="s">       matchLabels: 
</span><span class="s">        ako.vmware.com/gateway-namespace: default 
</span><span class="s">        ako.vmware.com/gateway-name: avi-alb-gw
</span><span class="s">      group: v1 
</span><span class="s">      kind: Service
</span><span class="s">  - protocol: TCP 
</span><span class="s">    port: 80 
</span><span class="s">    routes: 
</span><span class="s">      selector: 
</span><span class="s">       matchLabels: 
</span><span class="s">        ako.vmware.com/gateway-namespace: default 
</span><span class="s">        ako.vmware.com/gateway-name: avi-alb-gw
</span><span class="s">      group: v1 
</span><span class="s">      kind: Service
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>테스트</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create deploy hello --image<span class="o">=</span>paulbouwer/hello-kubernetes:1.7 --replicas<span class="o">=</span><span class="m">3</span> --port<span class="o">=</span><span class="m">8080</span>
kubectl expose deployment hello --type<span class="o">=</span>LoadBalancer --port<span class="o">=</span><span class="m">80</span> --target-port<span class="o">=</span><span class="m">8080</span> -l <span class="s1">&#39;ako.vmware.com/gateway-namespace=default&#39;</span>,<span class="s1">&#39;ako.vmware.com/gateway-name=avi-alb-gw&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>아래와 같이 동일한 IP로 두개의 SVC를 동일한 IP로 Port(80 , 8080)만 다른게 구성 할 수 있다.
<figure><figcaption>
            <h4>VS상태#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>VS상태#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>VS상태#2</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item><item>
    <title>The Documentation TAP</title>
    <link>https://huntedhappy.github.io/ko/tanzu-application-platform/</link>
    <pubDate>Wed, 09 Mar 2022 11:09:57 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/tanzu-application-platform/</guid>
    <description><![CDATA[<h2 id="1-vmware-tap">1. VMware TAP?</h2>
<p>VMware Tanzu 애플리케이션 플랫폼은 개발자와 운영자가 Kubernetes 플랫폼에서 앱을 보다 쉽게 구축, 배포 및 관리할 수 있도록 도와주는 패키지된 구성 요소 집합입니다.</p>
<p>Tanzu 애플리케이션 플랫폼은 Kubernetes 기반 앱 개발의 내부 루프와 외부 루프 모두에서 워크플로를 단순화합니다.</p>
<ul>
<li>
<p>내부 루프: 내부 루프는 개발자가 앱을 코딩하고 테스트하는 로컬 개발 환경을 설명합니다. 내부 루프에서 발생하는 활동에는 코드 작성, 버전 제어 시스템에 커밋, 개발 또는 스테이징 환경에 배포, 테스트 및 추가 코드 변경이 포함됩니다.</p>
</li>
<li>
<p>외부 루프: 외부 루프는 앱을 프로덕션에 배포하고 시간이 지남에 따라 유지 관리하는 단계를 설명합니다. 예를 들어, 클라우드 네이티브 플랫폼에서 외부 루프에는 컨테이너 이미지 빌드, 컨테이너 보안 추가, 지속적 통합(CI) 및 지속적 전달(CD) 파이프라인 구성과 같은 활동이 포함됩니다.</p>
</li>
</ul>
<p>VMware Tanzu 애플리케이션 플랫폼은 보안 및 확장을 지원하는 모든 Kubernetes에서 코드를 실행할 수 있도록 사전 포장된 프로덕션 경로를 개발 팀에 제공합니다. 팀이 조직의 기본 설정에 따라 사용자 지정할 수 있도록 모듈화된 애플리케이션 인식 플랫폼입니다.</p>
<h3 id="주의-사항">주의 사항</h3>
<p>현재 버그가 있는것으로 보임 Private Harbor 구성시 사설 인증서 문제가 발생 하기 때문에 외부 Registry 활용 필요,
Github 연동시 Integration으로 설정</p>
<h3 id="사전-설치">사전 설치</h3>
<ul>
<li>DOCKER</li>
<li>GCR (Google Container Registry)</li>
<li>GitHub</li>
<li>DNS Records</li>
</ul>
<h3 id="resource-requirements">Resource requirements</h3>
<p>To deploy all Tanzu Application Platform packages, your cluster must have at least:</p>
<ul>
<li>8 CPUs for i9 (or equivalent) available to Tanzu Application Platform components</li>
<li>12 CPUs for i7 (or equivalent) available to Tanzu Application Platform components</li>
<li>8 GB of RAM across all nodes available to Tanzu Application Platform</li>
<li>12 GB of RAM is available to build and deploy applications, including Minikube. VMware recommends 16 GB of RAM for an optimal experience.</li>
<li>70 GB of disk space available per node
For the full profile, or use of Security Chain Security Tools - Store, your cluster must have a configured default StorageClass.</li>
</ul>
<h2 id="2-tap-101">2. TAP 1.0.1</h2>
<h3 id="tools-and-cli-requirements">Tools and CLI requirements</h3>
<p>Installation requires:</p>
<ul>
<li>The Kubernetes CLI, kubectl, v1.20, v1.21 or v1.22, installed and authenticated with administrator rights for your target cluster. See Install Tools in the Kubernetes documentation.</li>
</ul>
<h3 id="21-tap">2.1. TAP</h3>
<h4 id="211-tanzu-network-등록">2.1.1 Tanzu Network 등록</h4>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tanzu Network ID/PW<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">INSTALL_REGISTRY_USERNAME</span><span class="o">=</span>        <span class="c1">#### Tanzu Network ID</span>
<span class="nb">export</span> <span class="nv">INSTALL_REGISTRY_PASSWORD</span><span class="o">=</span>        <span class="c1">#### Tanzu Network PW</span>
<span class="nb">export</span> <span class="nv">INSTALL_REGISTRY_HOSTNAME</span><span class="o">=</span>registry.tanzu.vmware.com
<span class="nb">export</span> <span class="nv">TAP_VERSION</span><span class="o">=</span>1.0.1
</code></pre></td></tr></table>
</div>
</div><p>namespace 생성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create ns tap-install
</code></pre></td></tr></table>
</div>
</div><p>tanzu registry 추가</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu secret registry add tap-registry <span class="se">\
</span><span class="se"></span>  --username <span class="si">${</span><span class="nv">INSTALL_REGISTRY_USERNAME</span><span class="si">}</span> --password <span class="si">${</span><span class="nv">INSTALL_REGISTRY_PASSWORD</span><span class="si">}</span> <span class="se">\
</span><span class="se"></span>  --server <span class="si">${</span><span class="nv">INSTALL_REGISTRY_HOSTNAME</span><span class="si">}</span> <span class="se">\
</span><span class="se"></span>  --export-to-all-namespaces --yes --namespace tap-install
</code></pre></td></tr></table>
</div>
</div><p>tanzu repository 추가</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu package repository add tanzu-tap-repository <span class="se">\
</span><span class="se"></span>  --url registry.tanzu.vmware.com/tanzu-application-platform/tap-packages:<span class="nv">$TAP_VERSION</span> <span class="se">\
</span><span class="se"></span>  --namespace tap-install
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p><figure><figcaption>
            <h4>EULA 허용</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>EULA 허용</h4>
        </figcaption>
</figure>
</p>
<h3 id="22-tanzu-tap-설치-리스트-확인">2.2. Tanzu TAP 설치 리스트 확인</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Registry / Repository 확인<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu secret registry list -n tap-install

tanzu package repository list -n tap-install

tanzu package repository get tanzu-tap-repository --namespace tap-install

tanzu package available list --namespace tap-install

tanzu package available list tap.tanzu.vmware.com --namespace tap-install
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p><figure><figcaption>
            <h4>Registry 리스트 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Repository 리스트 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Package 리스트 확인</h4>
        </figcaption>
</figure>
</p>
<h3 id="23-tanzu-tap-설치">2.3. Tanzu TAP 설치</h3>
<p>Private Harbor의 경우 사설 인증서가 문제가 있으므로 외부에서 제공하는 Registry 사용하는 필요.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>TAP 설치<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>GCR에서 키값을 json으로 다운로드 받은 후 service_account_key[변수] 저장</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu secret registry add registry-credentials --server gcr.io --username _json_key --password <span class="s2">&#34;</span><span class="k">$(</span>cat main-xxxx-xxx-xxxx.json<span class="k">)</span><span class="s2">&#34;</span> --namespace tap-install
<span class="nv">service_account_key</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>cat main-xxxx-xxx-xxxx.json<span class="k">)</span><span class="s2">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>실행 파일 설정</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;EOF &gt; gcr-tap-values.yaml
</span><span class="s">profile: full
</span><span class="s">ceip_policy_disclosed: true # The value must be true for installation to succeed
</span><span class="s">
</span><span class="s">buildservice:
</span><span class="s">  kp_default_repository: &#34;gcr.io/{Registry ID}/build-service&#34;
</span><span class="s">  kp_default_repository_username: _json_key
</span><span class="s">  kp_default_repository_password: &#39;$(echo $service_account_key)&#39;
</span><span class="s">  tanzunet_username: &#34;&#34;                             ## Tanzu Network ID
</span><span class="s">  tanzunet_password: &#34;&#34;                             ## Tanzu Network Password
</span><span class="s">  descriptor_name: &#34;tap-1.0.0-full&#34;
</span><span class="s">  enable_automatic_dependency_updates: true
</span><span class="s">
</span><span class="s">supply_chain: basic
</span><span class="s">
</span><span class="s">cnrs:
</span><span class="s">  domain_name: tkg.io
</span><span class="s">
</span><span class="s">accelerator:
</span><span class="s">  server:
</span><span class="s">    service_type: &#34;ClusterIP&#34;
</span><span class="s">
</span><span class="s">ootb_supply_chain_basic:
</span><span class="s">  registry:
</span><span class="s">    server: &#34;gcr.io&#34;
</span><span class="s">    repository: &#34;{Registry ID}/supply_chain&#34;
</span><span class="s">  gitops:
</span><span class="s">    #repository_prefix: git@github.com:vmware-tanzu/
</span><span class="s">    #branch: main
</span><span class="s">    #user_name: supplychain
</span><span class="s">    #user_email: supplychain
</span><span class="s">    #commit_message: supplychain@cluster.local
</span><span class="s">    #ssh_secret: git-ssh  
</span><span class="s">    ssh_secret: &#34;&#34;
</span><span class="s">  cluster_builder: default
</span><span class="s">  service_account: default
</span><span class="s">
</span><span class="s">learningcenter:
</span><span class="s">  ingressDomain: &#34;tkg.io&#34;
</span><span class="s">  ingressClass: contour
</span><span class="s">  ingressSecret:
</span><span class="s">    secretName: workshops.example.com-tls
</span><span class="s">
</span><span class="s">contour:
</span><span class="s">  envoy:
</span><span class="s">    service:
</span><span class="s">      type: LoadBalancer
</span><span class="s">
</span><span class="s">tap_gui:
</span><span class="s">  service_type: ClusterIP
</span><span class="s">  ingressEnabled: &#34;true&#34;
</span><span class="s">  ingressDomain: &#34;tkg.io&#34;
</span><span class="s">  app_config:
</span><span class="s">    app:
</span><span class="s">      baseUrl: http://tap-gui.tkg.io
</span><span class="s">      support:
</span><span class="s">        url: https://tanzu.vmware.com/support
</span><span class="s">        items:
</span><span class="s">          - title: Contact Support
</span><span class="s">            icon: email
</span><span class="s">            links:
</span><span class="s">              - url: https://tanzu.vmware.com/support
</span><span class="s">                title: Tanzu Support Page
</span><span class="s">          - title: Documentation
</span><span class="s">            icon: docs
</span><span class="s">            links:
</span><span class="s">              - url: https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/index.html
</span><span class="s">                title: Tanzu Application Platform Documentation
</span><span class="s">    integrations:
</span><span class="s">      github: # Other integrations available see NOTE below
</span><span class="s">        - host: github.com
</span><span class="s">          token: &#34;{GIT TOKEN}&#34;
</span><span class="s">
</span><span class="s">    catalog:
</span><span class="s">      locations:
</span><span class="s">        - type: url
</span><span class="s">          target: https://github.com/huntedhappy/tanzu-java-web-app/catalog-info.yaml
</span><span class="s">
</span><span class="s">    backend:
</span><span class="s">      baseUrl: http://tap-gui.tkg.io
</span><span class="s">      cors:
</span><span class="s">        origin: http://tap-gui.tkg.io
</span><span class="s">
</span><span class="s">#    ##Existing values file above (OIDC)
</span><span class="s">#    auth:
</span><span class="s">#      allowGuestAccess: true
</span><span class="s">#      environment: development
</span><span class="s">#      loginPage:
</span><span class="s">#        github:
</span><span class="s">#          title: Github Login
</span><span class="s">#          message: Enter with your GitHub account
</span><span class="s">#      providers:
</span><span class="s">#        github:
</span><span class="s">#          development:
</span><span class="s">#            clientId: 
</span><span class="s">#            clientSecret: 
</span><span class="s">#            ## uncomment if using GitHub Enterprise
</span><span class="s">#            # enterpriseInstanceUrl:
</span><span class="s">
</span><span class="s">metadata_store:
</span><span class="s">  app_service_type: LoadBalancer # (optional) Defaults to LoadBalancer. Change to NodePort for distributions that don&#39;t support LoadBalancer
</span><span class="s">
</span><span class="s">grype:
</span><span class="s">  namespace: &#34;tap-install&#34; # (optional) Defaults to default namespace.
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>TAP 설치</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu package install tap -p tap.tanzu.vmware.com -v <span class="nv">$TAP_VERSION</span> --values-file gcr-tap-values.yml -n tap-install
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<figure><figcaption>
            <h4>TAP 설치 완료</h4>
        </figcaption>
</figure>

<h3 id="24-tanzu-tap-rbac-설정">2.4. Tanzu TAP RBAC 설정</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>RBAC 설정<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">dockerconfigjson</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>kubectl get secret tbs-builder-secret-gen-placeholder-secret -n tap-install -o <span class="nv">jsonpath</span><span class="o">={</span>.data.<span class="se">\\</span>.dockerconfigjson<span class="o">}</span><span class="k">)</span><span class="s2">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;EOF | tee rbac.yaml
</span><span class="s">apiVersion: v1
</span><span class="s">kind: Secret
</span><span class="s">metadata:
</span><span class="s">  name: tap-registry
</span><span class="s">  annotations:
</span><span class="s">    secretgen.carvel.dev/image-pull-secret: &#34;&#34;
</span><span class="s">type: kubernetes.io/dockerconfigjson
</span><span class="s">data:
</span><span class="s">  .dockerconfigjson: $(echo $dockerconfigjson)
</span><span class="s">---
</span><span class="s">apiVersion: v1
</span><span class="s">kind: ServiceAccount
</span><span class="s">metadata:
</span><span class="s">  name: default
</span><span class="s">secrets:
</span><span class="s">  - name: registry-credentials
</span><span class="s">imagePullSecrets:
</span><span class="s">  - name: registry-credentials
</span><span class="s">  - name: tap-registry
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: Role
</span><span class="s">metadata:
</span><span class="s">  name: default
</span><span class="s">rules:
</span><span class="s">- apiGroups: [source.toolkit.fluxcd.io]
</span><span class="s">  resources: [gitrepositories]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [source.apps.tanzu.vmware.com]
</span><span class="s">  resources: [imagerepositories]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [carto.run]
</span><span class="s">  resources: [deliverables, runnables]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [kpack.io]
</span><span class="s">  resources: [images]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [conventions.apps.tanzu.vmware.com]
</span><span class="s">  resources: [podintents]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [&#34;&#34;]
</span><span class="s">  resources: [&#39;configmaps&#39;]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [&#34;&#34;]
</span><span class="s">  resources: [&#39;pods&#39;]
</span><span class="s">  verbs: [&#39;list&#39;]
</span><span class="s">- apiGroups: [tekton.dev]
</span><span class="s">  resources: [taskruns, pipelineruns]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [tekton.dev]
</span><span class="s">  resources: [pipelines]
</span><span class="s">  verbs: [&#39;list&#39;]
</span><span class="s">- apiGroups: [kappctrl.k14s.io]
</span><span class="s">  resources: [apps]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [serving.knative.dev]
</span><span class="s">  resources: [&#39;services&#39;]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [servicebinding.io]
</span><span class="s">  resources: [&#39;servicebindings&#39;]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [services.apps.tanzu.vmware.com]
</span><span class="s">  resources: [&#39;resourceclaims&#39;]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">- apiGroups: [scanning.apps.tanzu.vmware.com]
</span><span class="s">  resources: [&#39;imagescans&#39;, &#39;sourcescans&#39;]
</span><span class="s">  verbs: [&#39;*&#39;]
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: RoleBinding
</span><span class="s">metadata:
</span><span class="s">  name: default
</span><span class="s">roleRef:
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">  kind: Role
</span><span class="s">  name: default
</span><span class="s">subjects:
</span><span class="s">  - kind: ServiceAccount
</span><span class="s">    name: default
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h3 id="25-workload-실행">2.5. workload 실행</h3>
<p>INGRESS IP 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl get svc -n tap-install

kubectl get httpproxy -A
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>ingress 및 DNS 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>gui 접속 후 Tanzu Java Web App 실행</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>gui 접속 후 Tanzu Java Web App 실행</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>gui 접속 후 Tanzu Java Web App 실행</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>gui 접속 후 Tanzu Java Web App 다운로드</h4>
        </figcaption>
</figure>
</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>GIT PUSH<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>미리 GIT에 프로젝트 생성 후 다운로드 받은 ZIP파일 PUSH</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">unzip tanzu-java-web-app.zip

git init
git remote add origin git@github.com:huntedhappy/tanzu-java-web-app
git add .
git commit -m <span class="s1">&#39;first&#39;</span>
git push origin main
</code></pre></td></tr></table>
</div>
</div><p>apps workload 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu apps workload create tanzu-java-web-app <span class="se">\
</span><span class="se"></span> --git-repo https://github.com/huntedhappy/tanzu-java-web-app <span class="se">\
</span><span class="se"></span> --git-branch main <span class="se">\
</span><span class="se"></span> --type web <span class="se">\
</span><span class="se"></span> --label apps.tanzu.vmware.com/has-tests<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span><span class="se"></span> --yes <span class="se">\
</span><span class="se"></span> -n tap-install
</code></pre></td></tr></table>
</div>
</div><p>배포 상태 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu apps cluster-supply-chain list

tanzu apps workload tail tanzu-java-web-app --since 10m --timestamp -n tap-install

kubectl get workload,gitrepository,pipelinerun,images.kpack,podintent,app,services.serving -n tap-install
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="3-tap-110">3. TAP 1.1.0</h2>
<p>Repository를 설정한다. 여기서는 GCR을 사용하기 때문에 GCR의 정보를 입력</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">INSTALL_REGISTRY_HOSTNAME</span><span class="o">=</span>gcr.io
<span class="nb">export</span> <span class="nv">TAP_VERSION</span><span class="o">=</span>1.1.0
</code></pre></td></tr></table>
</div>
</div><p>TANZU NET 및 GCR docker login 후 GCR에 이미지들을 다운로드</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">docker login registry.tanzu.vmware.com

docker login -u _json_key --password-stdin https://gcr.io &lt; <span class="o">{</span>gcr key<span class="o">}</span>

imgpkg copy -b registry.tanzu.vmware.com/tanzu-application-platform/tap-packages:<span class="si">${</span><span class="nv">TAP_VERSION</span><span class="si">}</span> --to-repo <span class="si">${</span><span class="nv">INSTALL_REGISTRY_HOSTNAME</span><span class="si">}</span>/<span class="o">{</span>gcr project<span class="o">}</span>/tap-packages

</code></pre></td></tr></table>
</div>
</div><p>namespace 및 secret 생성 후 tanzu package Repository 생성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu secret registry add tap-registry --server gcr.io --username _json_key --password <span class="s2">&#34;</span><span class="k">$(</span>cat <span class="o">{</span>gcr key<span class="o">}</span><span class="k">)</span><span class="s2">&#34;</span> --export-to-all-namespaces --yes -n tap-install

tanzu secret registry add registry-credentials --server gcr.io --username _json_key --password <span class="s2">&#34;</span><span class="k">$(</span>cat <span class="o">{</span>gcr key<span class="o">}</span><span class="k">)</span><span class="s2">&#34;</span> --export-to-all-namespaces --yes -n tap-install


tanzu package repository add tanzu-tap-repository <span class="se">\
</span><span class="se"></span>  --url <span class="si">${</span><span class="nv">INSTALL_REGISTRY_HOSTNAME</span><span class="si">}</span>/main-tokenizer-343509/tap-packages:<span class="nv">$TAP_VERSION</span> <span class="se">\
</span><span class="se"></span>  --namespace tap-install 

<span class="c1">## Repository가 생성이 되었으면 설치 가능한 packages를 확인</span>
tanzu package available list tap.tanzu.vmware.com --namespace tap-install
</code></pre></td></tr></table>
</div>
</div><p>권한 설정</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl annotate secret tap-registry -n tap-install secretgen.carvel.dev/image-pull-secret<span class="o">=</span><span class="s2">&#34;&#34;</span>

kubectl patch sa default -n tap-install --type <span class="s1">&#39;json&#39;</span> -p <span class="s1">&#39;[{&#34;op&#34;:&#34;add&#34;,&#34;path&#34;:&#34;/secrets&#34;,&#34;value&#34;:[&#34;name&#34;:&#34;registry-credentials&#34;,&#34;name&#34;:&#34;tap-registry&#34;]}]&#39;</span>
kubectl patch sa default -n tap-install --type <span class="s1">&#39;json&#39;</span> -p <span class="s1">&#39;[{&#34;op&#34;:&#34;add&#34;,&#34;path&#34;:&#34;/imagePullSecrets&#34;,&#34;value&#34;:[&#34;name&#34;:&#34;registry-credentials&#34;,&#34;name&#34;:&#34;tap-registry&#34;]}]&#39;</span>

cat <span class="s">&lt;&lt;EOF | kubectl -n tap-install apply -f -
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: RoleBinding
</span><span class="s">metadata:
</span><span class="s">  name: default-permit-deliverable
</span><span class="s">roleRef:
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">  kind: ClusterRole
</span><span class="s">  name: deliverable
</span><span class="s">subjects:
</span><span class="s">  - kind: ServiceAccount
</span><span class="s">    name: default
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: RoleBinding
</span><span class="s">metadata:
</span><span class="s">  name: default-permit-workload
</span><span class="s">roleRef:
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">  kind: ClusterRole
</span><span class="s">  name: workload
</span><span class="s">subjects:
</span><span class="s">  - kind: ServiceAccount
</span><span class="s">    name: default
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: RoleBinding
</span><span class="s">metadata:
</span><span class="s">  name: dev-permit-app-viewer
</span><span class="s">roleRef:
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">  kind: ClusterRole
</span><span class="s">  name: app-viewer
</span><span class="s">subjects:
</span><span class="s">  - kind: Group
</span><span class="s">    name: &#34;namespace-developers&#34;
</span><span class="s">    apiGroup: rbac.authorization.k8s.io
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: ClusterRoleBinding
</span><span class="s">metadata:
</span><span class="s">  name: namespace-dev-permit-app-viewer
</span><span class="s">roleRef:
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">  kind: ClusterRole
</span><span class="s">  name: app-viewer-cluster-access
</span><span class="s">subjects:
</span><span class="s">  - kind: Group
</span><span class="s">    name: &#34;namespace-developers&#34;
</span><span class="s">    apiGroup: rbac.authorization.k8s.io
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>TAP 1.1.0 설치</p>
<p>GCR에서 키값을 json으로 다운로드 받은 후 service_account_key[변수] 저장</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu secret registry add registry-credentials --server gcr.io --username _json_key --password <span class="s2">&#34;</span><span class="k">$(</span>cat main-xxxx-xxx-xxxx.json<span class="k">)</span><span class="s2">&#34;</span> --namespace tap-install
<span class="nv">service_account_key</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>cat main-xxxx-xxx-xxxx.json<span class="k">)</span><span class="s2">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>실행 파일 설정</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;EOF &gt; gcr-tap-values.yaml
</span><span class="s">profile: full
</span><span class="s">ceip_policy_disclosed: true # The value must be true for installation to succeed
</span><span class="s">
</span><span class="s">buildservice:
</span><span class="s">  kp_default_repository: &#34;gcr.io/{Registry ID}/build-service&#34;
</span><span class="s">  kp_default_repository_username: _json_key
</span><span class="s">  kp_default_repository_password: &#39;$(echo $service_account_key)&#39;
</span><span class="s">  tanzunet_username: &#34;&#34;                             ## Tanzu Network ID
</span><span class="s">  tanzunet_password: &#34;&#34;                             ## Tanzu Network Password
</span><span class="s">  descriptor_name: &#34;full&#34;
</span><span class="s">  enable_automatic_dependency_updates: true
</span><span class="s">
</span><span class="s">supply_chain: basic
</span><span class="s">
</span><span class="s">cnrs:
</span><span class="s">  domain_name: tkg.io
</span><span class="s">
</span><span class="s">accelerator:
</span><span class="s">  server:
</span><span class="s">    service_type: &#34;ClusterIP&#34;
</span><span class="s">
</span><span class="s">ootb_supply_chain_basic:
</span><span class="s">  registry:
</span><span class="s">    server: &#34;gcr.io&#34;
</span><span class="s">    repository: &#34;{Registry ID}/supply_chain&#34;
</span><span class="s">  gitops:
</span><span class="s">    #repository_prefix: git@github.com:vmware-tanzu/
</span><span class="s">    #branch: main
</span><span class="s">    #user_name: supplychain
</span><span class="s">    #user_email: supplychain
</span><span class="s">    #commit_message: supplychain@cluster.local
</span><span class="s">    #ssh_secret: git-ssh  
</span><span class="s">    ssh_secret: &#34;&#34;
</span><span class="s">  cluster_builder: default
</span><span class="s">  service_account: default
</span><span class="s">
</span><span class="s">learningcenter:
</span><span class="s">  ingressDomain: &#34;tkg.io&#34;
</span><span class="s">  ingressClass: contour
</span><span class="s">  ingressSecret:
</span><span class="s">    secretName: workshops.example.com-tls
</span><span class="s">
</span><span class="s">contour:
</span><span class="s">  envoy:
</span><span class="s">    service:
</span><span class="s">      type: LoadBalancer
</span><span class="s">
</span><span class="s">tap_gui:
</span><span class="s">  service_type: ClusterIP
</span><span class="s">  ingressEnabled: &#34;true&#34;
</span><span class="s">  ingressDomain: &#34;tkg.io&#34;
</span><span class="s">  app_config:
</span><span class="s">    app:
</span><span class="s">      baseUrl: http://tap-gui.tkg.io
</span><span class="s">      support:
</span><span class="s">        url: https://tanzu.vmware.com/support
</span><span class="s">        items:
</span><span class="s">          - title: Contact Support
</span><span class="s">            icon: email
</span><span class="s">            links:
</span><span class="s">              - url: https://tanzu.vmware.com/support
</span><span class="s">                title: Tanzu Support Page
</span><span class="s">          - title: Documentation
</span><span class="s">            icon: docs
</span><span class="s">            links:
</span><span class="s">              - url: https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/index.html
</span><span class="s">                title: Tanzu Application Platform Documentation
</span><span class="s">    integrations:
</span><span class="s">      github: # Other integrations available see NOTE below
</span><span class="s">        - host: github.com
</span><span class="s">          token: &#34;{GIT TOKEN}&#34;
</span><span class="s">
</span><span class="s">    catalog:
</span><span class="s">      locations:
</span><span class="s">        - type: url
</span><span class="s">          target: https://github.com/huntedhappy/tanzu-java-web-app/catalog-info.yaml
</span><span class="s">
</span><span class="s">    backend:
</span><span class="s">      baseUrl: http://tap-gui.tkg.io
</span><span class="s">      cors:
</span><span class="s">        origin: http://tap-gui.tkg.io
</span><span class="s">
</span><span class="s">#    ##Existing values file above (OIDC)
</span><span class="s">#    auth:
</span><span class="s">#      allowGuestAccess: true
</span><span class="s">#      environment: development
</span><span class="s">#      loginPage:
</span><span class="s">#        github:
</span><span class="s">#          title: Github Login
</span><span class="s">#          message: Enter with your GitHub account
</span><span class="s">#      providers:
</span><span class="s">#        github:
</span><span class="s">#          development:
</span><span class="s">#            clientId: 
</span><span class="s">#            clientSecret: 
</span><span class="s">#            ## uncomment if using GitHub Enterprise
</span><span class="s">#            # enterpriseInstanceUrl:
</span><span class="s">
</span><span class="s">metadata_store:
</span><span class="s">  app_service_type: LoadBalancer # (optional) Defaults to LoadBalancer. Change to NodePort for distributions that don&#39;t support LoadBalancer
</span><span class="s">
</span><span class="s">grype:
</span><span class="s">  namespace: &#34;tap-install&#34; # (optional) Defaults to default namespace.
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>TANZU 설치</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu package install tap -p tap.tanzu.vmware.com -v <span class="nv">$TAP_VERSION</span> --values-file gcr-tap-values.yaml -n tap-install
</code></pre></td></tr></table>
</div>
</div><h3 id="31-multicluster">3.1. MultiCluster</h3>
<figure><figcaption>
            <h4>MultiCluster</h4>
        </figcaption>
</figure>

<p>3개의 클러스터를 생성한다. 여기서는 아래와 같이 구성 하였다.</p>
<ul>
<li>
<p>tkgm01-tkc-dev02 = build</p>
</li>
<li>
<p>tkgm02-tkc-dev03 = run</p>
</li>
<li>
<p>tkgm03-tkc-dev04 = view</p>
</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>이미지를 Repository에 저장한다.<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">INSTALL_REGISTRY_HOSTNAME</span><span class="o">=</span>gcr.io
<span class="nb">export</span> <span class="nv">TAP_VERSION</span><span class="o">=</span>1.1.0

<span class="c1">## Tanzu Network에 로그인을 한다.</span>
docker login registry.tanzu.vmware.com -u <span class="o">{</span>ID<span class="o">}</span> --password-stdin &lt; ./password.txt

<span class="c1">## GCR에 로그인을 한다.</span>
docker login -u _json_key --password-stdin https://gcr.io &lt; <span class="o">{</span>togken<span class="o">}}</span>.json

<span class="c1">## 이미지를 GCR에 복사 한다.</span>
imgpkg copy -b registry.tanzu.vmware.com/tanzu-application-platform/tap-packages:<span class="si">${</span><span class="nv">TAP_VERSION</span><span class="si">}</span> --to-repo <span class="si">${</span><span class="nv">INSTALL_REGISTRY_HOSTNAME</span><span class="si">}</span>/main-tokenizer-343509/tap-packages
</code></pre></td></tr></table>
</div>
</div><ul>
<li>모든 이미지가 GCR에 저장이 완료 되면 Repository를 각각의 클러스터에 등록 해준다.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## Cluster 변경</span>
kubectl use-context <span class="o">{</span>cluster context<span class="o">}</span>
<span class="c1">## NameSpace 생성</span>
kubectl create ns tap-install
<span class="c1">## GCR 접속 Secret 생성</span>
tanzu secret registry add tap-registry --server gcr.io --username _json_key --password <span class="s2">&#34;</span><span class="k">$(</span>cat <span class="o">{</span>gcr-key<span class="o">}</span>.json<span class="k">)</span><span class="s2">&#34;</span>  --export-to-all-namespaces --yes -n tap-install


tanzu secret registry add registry-credentials --server gcr.io --username _json_key --password <span class="s2">&#34;</span><span class="k">$(</span>cat <span class="o">{</span>gcr-key<span class="o">}</span>.json<span class="k">)</span><span class="s2">&#34;</span> --export-to-all-namespaces --yes -n tap-install

<span class="c1">## Tanzu Package Repository 추가</span>
tanzu package repository add tanzu-tap-repository <span class="se">\
</span><span class="se"></span>  --url <span class="si">${</span><span class="nv">INSTALL_REGISTRY_HOSTNAME</span><span class="si">}</span>/main-tokenizer-343509/tap-packages:<span class="nv">$TAP_VERSION</span> <span class="se">\
</span><span class="se"></span>  --namespace tap-install 

<span class="c1">## Tanzu Package Repository 확인</span>
tanzu package repository list -n tap-install

</code></pre></td></tr></table>
</div>
</div><ul>
<li>각각의 클러스터의 맞는 tap을 설치 해준다.</li>
<li>build-tap-values.yaml</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt; EOF | tee build-tap-values.yaml
</span><span class="s">profile: build
</span><span class="s">ceip_policy_disclosed: true
</span><span class="s">buildservice:
</span><span class="s">  kp_default_repository: &#34;gcr.io/{gcr project}/tap-packages&#34;
</span><span class="s">  kp_default_repository_username: _json_key
</span><span class="s">  kp_default_repository_password: {gcr key}
</span><span class="s">  tanzunet_username: &#34;&#34;                             ## Tanzu Network ID
</span><span class="s">  tanzunet_password: &#34;&#34;                                     ## Tanzu Network Password
</span><span class="s">  descriptor_name: &#34;full&#34;
</span><span class="s">  enable_automatic_dependency_updates: true
</span><span class="s">
</span><span class="s">supply_chain: basic
</span><span class="s">
</span><span class="s">ootb_supply_chain_basic:
</span><span class="s">  registry:
</span><span class="s">    server: &#34;gcr.io&#34;
</span><span class="s">    repository: &#34;{gcr project}/supply_chain&#34;
</span><span class="s">  gitops:
</span><span class="s">    ssh_secret: &#34;&#34;
</span><span class="s">  cluster_builder: default
</span><span class="s">  service_account: default
</span><span class="s">
</span><span class="s">
</span><span class="s">grype:
</span><span class="s">  namespace: &#34;tap-install&#34; # (optional) Defaults to default namespace.
</span><span class="s">  targetImagePullSecret: tap-registry
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>run-tap-values.yaml</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt; EOF | tee run-tap-values.yaml
</span><span class="s">profile: run
</span><span class="s">ceip_policy_disclosed: true # Installation fails if this is not set to true. Not a string.
</span><span class="s">supply_chain: basic
</span><span class="s">
</span><span class="s">cnrs:
</span><span class="s">  domain_name: tkg.io
</span><span class="s">
</span><span class="s">contour:
</span><span class="s">  envoy:
</span><span class="s">    service:
</span><span class="s">      type: LoadBalancer #NodePort can be used if your Kubernetes cluster doesn&#39;t support LoadBalancing
</span><span class="s">
</span><span class="s">appliveview_connector:
</span><span class="s">  backend:
</span><span class="s">    sslDisabled: &#34;true&#34;
</span><span class="s">    host: appliveview.tkg.io
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>클러스터를 변경 하면서 TAP을 설치 해준다.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl use-context <span class="o">{</span>TAP 클러스터<span class="o">}</span>

tanzu package install tap -p tap.tanzu.vmware.com -v 1.1.0 -f build-tap-values.yaml -n tap-install

tanzu package install tap -p tap.tanzu.vmware.com -v 1.1.0 -f run-tap-values.yaml -n tap-install
</code></pre></td></tr></table>
</div>
</div><ul>
<li>build 와 run 클러스터에 TAP 설치가 완료 되었다면 클러스터의 URL 과 TOKEN을 확인한다.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">CLUSTER_URL</span><span class="o">=</span><span class="k">$(</span>kubectl config view --minify -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">&#39;{.clusters[0].cluster.server}&#39;</span><span class="k">)</span>
<span class="nv">CLUSTER_TOKEN</span><span class="o">=</span><span class="k">$(</span>kubectl -n tap-gui get secret <span class="k">$(</span>kubectl -n tap-gui get sa tap-gui-viewer -o<span class="o">=</span>json <span class="se">\
</span><span class="se"></span><span class="p">|</span> jq -r <span class="s1">&#39;.secrets[0].name&#39;</span><span class="k">)</span> -o<span class="o">=</span>json <span class="se">\
</span><span class="se"></span><span class="p">|</span> jq -r <span class="s1">&#39;.data[&#34;token&#34;]&#39;</span> <span class="se">\
</span><span class="se"></span><span class="p">|</span> base64 --decode<span class="k">)</span>

<span class="nb">echo</span> CLUSTER_URL: <span class="nv">$CLUSTER_URL</span>
<span class="nb">echo</span> CLUSTER_TOKEN: <span class="nv">$CLUSTER_TOKEN</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>view-tap-values.yaml</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt; EOF | tee view-tap-values.yaml
</span><span class="s">profile: view
</span><span class="s">ceip_policy_disclosed: true # Installation fails if this is not set to true. Not a string.
</span><span class="s">
</span><span class="s">contour:
</span><span class="s">  envoy:
</span><span class="s">    service:
</span><span class="s">      type: LoadBalancer #NodePort can be used if your Kubernetes cluster doesn&#39;t support LoadBalancing
</span><span class="s">
</span><span class="s">learningcenter:
</span><span class="s">  ingressDomain: &#34;tkg.io&#34;
</span><span class="s">
</span><span class="s">tap_gui:
</span><span class="s">  service_type: ClusterIP
</span><span class="s">  ingressEnabled: &#34;true&#34;
</span><span class="s">  ingressDomain: &#34;tkg.io&#34;
</span><span class="s">  app_config:
</span><span class="s">    app:
</span><span class="s">      baseUrl: http://tap-gui.tkg.io
</span><span class="s">    catalog:
</span><span class="s">      locations:
</span><span class="s">        - type: url
</span><span class="s">          target: https://GIT-CATALOG-URL/catalog-info.yaml
</span><span class="s">    backend:
</span><span class="s">      baseUrl: http://tap-gui.tkg.io
</span><span class="s">      cors:
</span><span class="s">        origin: http://tap-gui.tkg.io
</span><span class="s">    kubernetes:
</span><span class="s">      serviceLocatorMethod:
</span><span class="s">        type: &#39;multiTenant&#39;
</span><span class="s">      clusterLocatorMethods:
</span><span class="s">        - type: &#39;config&#39;
</span><span class="s">          clusters:
</span><span class="s">            - url: https://10.253.125.252:6443
</span><span class="s">              name: tkgm01-tkc-dev02
</span><span class="s">              authProvider: serviceAccount
</span><span class="s">              skipTLSVerify: true
</span><span class="s">              serviceAccountToken: eyJhbGciOiJSUzI1NiIsImtpZCI6InZ4S25KYi1SVW96UmJmdnVXc2lSODlza1NTV0RBRkd1aG1acHI5Qy0xdjAifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXAtZ3VpIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6InRhcC1ndWktdmlld2VyLXRva2VuLTk1c3EyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InRhcC1ndWktdmlld2VyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNzJhOTY2ZGEtYzA2ZS00OTIyLTk5Y2YtM2ZjYTMwNmNkNWM5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OnRhcC1ndWk6dGFwLWd1aS12aWV3ZXIifQ.Vit66qxirDMNcZlUHaDaNXJAWpU-J0o5wfBXK8U2kVnoP3RMcAGrSTodoZ3fnsNtTlPKSCMlw9I7m591Kcly1HL8CPLwkLH-P2Ew26eurQHvVb-NGQUFAIRSdrN6Ig6J5Xg09D5D8wGMJTk7egSud8cj5A1z1bT1ctLCX1N2WrqO3Hrcu0o8XHgSoiogTP_ELU8B2E93kHqdCPeh0xbY9pkTEvXRQun9PTeag6jepd7eNUgCXMab4jYxsEXDbJ3PPbDusuleY2LpcObYaWuuYMyRc5QSVG5EBlEKfaXnEvslTNxdohdEQwQOHwABKC4Au-KBYbzy2s_MI40g2K79iw
</span><span class="s">            - url: https://10.253.125.253:6443
</span><span class="s">              name: tkgm01-tkc-dev03
</span><span class="s">              authProvider: serviceAccount
</span><span class="s">              skipTLSVerify: true
</span><span class="s">              serviceAccountToken: eyJhbGciOiJSUzI1NiIsImtpZCI6Ii0tYzNpVm9HbXdfTkxqREZhU1ZXeEY0RXJCY29Sc0lwWkl5WW9XdENsYzgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXAtZ3VpIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6InRhcC1ndWktdmlld2VyLXRva2VuLWs0aHQ2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InRhcC1ndWktdmlld2VyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNTBiNjMxYjktYjRlOS00ZjhhLThmZDgtNDAwMDE3ZWZkOTJmIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OnRhcC1ndWk6dGFwLWd1aS12aWV3ZXIifQ.DL4nTskvqSvEXwi0HN2rNk61UD3DquvCnRxrFZZT2cM7L7WznTlqdXFxXsqlabE9zcS3nTLQ2NWDjx2qrJEdiAzqr6rOGXkFzYeyuE9kvzcTnVbHYYlagA8UMCjeQUAw0DtTGip3UFqPoXUGdwlZHYR7e1VQcaSmdnFc0UVTrDlpDdGQgJujDvyiU18-pa7BeizBkPJbKPVOgn0sP5M_zZh5Rtzb4-PKc1pYiAG7lg_05U7w_5rfMeoaLFN0H36BKUpGHb7inakGjnR3Z7_6iPe7x4FUR4zK-WZFCT4LbckfR0NKaDGHCaGoMSqQ-W2j6GFdK1wRVGhnortD8mC4ww
</span><span class="s">
</span><span class="s">metadata_store:
</span><span class="s">  app_service_type: LoadBalancer # (optional) Defaults to LoadBalancer. Change to NodePort for distributions that don&#39;t support LoadBalancer
</span><span class="s">
</span><span class="s">appliveview:
</span><span class="s">  ingressEnabled: &#34;true&#34;
</span><span class="s">  ingressDomain: tkg.io
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>view 클러스터에 TAP 설치</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu package install tap -p tap.tanzu.vmware.com -v 1.1.0 -f view-tap-values.yaml -n tap-install
</code></pre></td></tr></table>
</div>
</div><ul>
<li>설치 완료 후 build 와 run cluster에 권한 부여</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f - <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: v1
</span><span class="s">kind: Namespace
</span><span class="s">metadata:
</span><span class="s">  name: tap-gui
</span><span class="s">---
</span><span class="s">apiVersion: v1
</span><span class="s">kind: ServiceAccount
</span><span class="s">metadata:
</span><span class="s">  namespace: tap-gui
</span><span class="s">  name: tap-gui-viewer
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: ClusterRoleBinding
</span><span class="s">metadata:
</span><span class="s">  name: tap-gui-read-k8s
</span><span class="s">subjects:
</span><span class="s">- kind: ServiceAccount
</span><span class="s">  namespace: tap-gui
</span><span class="s">  name: tap-gui-viewer
</span><span class="s">roleRef:
</span><span class="s">  kind: ClusterRole
</span><span class="s">  name: k8s-reader
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: ClusterRole
</span><span class="s">metadata:
</span><span class="s">  name: k8s-reader
</span><span class="s">rules:
</span><span class="s">- apiGroups: [&#39;&#39;]
</span><span class="s">  resources: [&#39;pods&#39;, &#39;services&#39;, &#39;configmaps&#39;]
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;apps&#39;]
</span><span class="s">  resources: [&#39;deployments&#39;, &#39;replicasets&#39;]
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;autoscaling&#39;]
</span><span class="s">  resources: [&#39;horizontalpodautoscalers&#39;]
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;networking.k8s.io&#39;]
</span><span class="s">  resources: [&#39;ingresses&#39;]
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;networking.internal.knative.dev&#39;]
</span><span class="s">  resources: [&#39;serverlessservices&#39;]
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [ &#39;autoscaling.internal.knative.dev&#39; ]
</span><span class="s">  resources: [ &#39;podautoscalers&#39; ]
</span><span class="s">  verbs: [ &#39;get&#39;, &#39;watch&#39;, &#39;list&#39; ]
</span><span class="s">- apiGroups: [&#39;serving.knative.dev&#39;]
</span><span class="s">  resources:
</span><span class="s">  - configurations
</span><span class="s">  - revisions
</span><span class="s">  - routes
</span><span class="s">  - services
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;carto.run&#39;]
</span><span class="s">  resources:
</span><span class="s">  - clusterconfigtemplates
</span><span class="s">  - clusterdeliveries
</span><span class="s">  - clusterdeploymenttemplates
</span><span class="s">  - clusterimagetemplates
</span><span class="s">  - clusterruntemplates
</span><span class="s">  - clustersourcetemplates
</span><span class="s">  - clustersupplychains
</span><span class="s">  - clustertemplates
</span><span class="s">  - deliverables
</span><span class="s">  - runnables
</span><span class="s">  - workloads
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;source.toolkit.fluxcd.io&#39;]
</span><span class="s">  resources:
</span><span class="s">  - gitrepositories
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;source.apps.tanzu.vmware.com&#39;]
</span><span class="s">  resources:
</span><span class="s">  - imagerepositories
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;conventions.apps.tanzu.vmware.com&#39;]
</span><span class="s">  resources:
</span><span class="s">  - podintents
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;kpack.io&#39;]
</span><span class="s">  resources:
</span><span class="s">  - images
</span><span class="s">  - builds
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;scanning.apps.tanzu.vmware.com&#39;]
</span><span class="s">  resources:
</span><span class="s">  - sourcescans
</span><span class="s">  - imagescans
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;tekton.dev&#39;]
</span><span class="s">  resources:
</span><span class="s">  - taskruns
</span><span class="s">  - pipelineruns
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">- apiGroups: [&#39;kappctrl.k14s.io&#39;]
</span><span class="s">  resources:
</span><span class="s">  - apps
</span><span class="s">  verbs: [&#39;get&#39;, &#39;watch&#39;, &#39;list&#39;]
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>모든 클러스터에 개발자의 대한 권한을 부여</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl annotate secret tap-registry -n tap-install secretgen.carvel.dev/image-pull-secret<span class="o">=</span><span class="s2">&#34;&#34;</span>

kubectl patch sa default -n tap-install --type <span class="s1">&#39;json&#39;</span> -p <span class="s1">&#39;[{&#34;op&#34;:&#34;add&#34;,&#34;path&#34;:&#34;/secrets&#34;,&#34;value&#34;:[&#34;name&#34;:&#34;registry-credentials&#34;,&#34;name&#34;:&#34;tap-registry&#34;]}]&#39;</span>
kubectl patch sa default -n tap-install --type <span class="s1">&#39;json&#39;</span> -p <span class="s1">&#39;[{&#34;op&#34;:&#34;add&#34;,&#34;path&#34;:&#34;/imagePullSecrets&#34;,&#34;value&#34;:[&#34;name&#34;:&#34;registry-credentials&#34;,&#34;name&#34;:&#34;tap-registry&#34;]}]&#39;</span>

kubectl apply -f - -n tap-install <span class="s">&lt;&lt; EOF
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: RoleBinding
</span><span class="s">metadata:
</span><span class="s">  name: default-permit-deliverable
</span><span class="s">roleRef:
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">  kind: ClusterRole
</span><span class="s">  name: deliverable
</span><span class="s">subjects:
</span><span class="s">  - kind: ServiceAccount
</span><span class="s">    name: default
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: RoleBinding
</span><span class="s">metadata:
</span><span class="s">  name: default-permit-workload
</span><span class="s">roleRef:
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">  kind: ClusterRole
</span><span class="s">  name: workload
</span><span class="s">subjects:
</span><span class="s">  - kind: ServiceAccount
</span><span class="s">    name: default
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: RoleBinding
</span><span class="s">metadata:
</span><span class="s">  name: dev-permit-app-viewer
</span><span class="s">roleRef:
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">  kind: ClusterRole
</span><span class="s">  name: app-viewer
</span><span class="s">subjects:
</span><span class="s">  - kind: Group
</span><span class="s">    name: &#34;namespace-developers&#34;
</span><span class="s">    apiGroup: rbac.authorization.k8s.io
</span><span class="s">---
</span><span class="s">apiVersion: rbac.authorization.k8s.io/v1
</span><span class="s">kind: ClusterRoleBinding
</span><span class="s">metadata:
</span><span class="s">  name: namespace-dev-permit-app-viewer
</span><span class="s">roleRef:
</span><span class="s">  apiGroup: rbac.authorization.k8s.io
</span><span class="s">  kind: ClusterRole
</span><span class="s">  name: app-viewer-cluster-access
</span><span class="s">subjects:
</span><span class="s">  - kind: Group
</span><span class="s">    name: &#34;namespace-developers&#34;
</span><span class="s">    apiGroup: rbac.authorization.k8s.io
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>Build Cluster로 컨텍스트 변경 후 App을 배포한다.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">DEVELOPER_NAMESPACE</span><span class="o">=</span>tap-install

tanzu apps workload create tanzu-java-web-app <span class="se">\
</span><span class="se"></span> --git-repo https://github.com/huntedhappy/tanzu-java-web-app <span class="se">\
</span><span class="se"></span> --git-branch main <span class="se">\
</span><span class="se"></span> --type web <span class="se">\
</span><span class="se"></span> --label app.kubernetes.io/part-of<span class="o">=</span>tanzu-java-web-app <span class="se">\
</span><span class="se"></span> --yes <span class="se">\
</span><span class="se"></span> -n <span class="si">${</span><span class="nv">DEVELOPER_NAMESPACE</span><span class="si">}</span>
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<figure><figcaption>
            <h4>app workload 상태 확인</h4>
        </figcaption>
</figure>

<ul>
<li>진행 상태 확인</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">tanzu apps workload tail tanzu-java-web-app --since 10m --timestamp -n <span class="si">${</span><span class="nv">DEVELOPER_NAMESPACE</span><span class="si">}</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>app workload 진행 상태 확인</h4>
        </figcaption>
</figure>

<ul>
<li>
<p>생성이 완료 되면 GUI에서 확인
<figure><figcaption>
            <h4>supply chain 확인</h4>
        </figcaption>
</figure>
</p>
</li>
<li>
<p>deliverable이 되었는지 확인 한다. build 클러스터에서는 false로 나오는 것을 우선 확인 할 수 있다.</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl get deliverable -n <span class="si">${</span><span class="nv">DEVELOPER_NAMESPACE</span><span class="si">}</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>deliverable 실패 확인</h4>
        </figcaption>
</figure>

<ul>
<li>deliverable를 yaml파일로 저장한다.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl get deliverable tanzu-java-web-app -n <span class="si">${</span><span class="nv">DEVELOPER_NAMESPACE</span><span class="si">}</span> -oyaml &gt; deliverable.yaml
</code></pre></td></tr></table>
</div>
</div><ul>
<li>저장된 파일에서 ownerReferences와 status 부분을 삭제 한다. 그럼 아래와 비슷할 것이다.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">apiVersion: carto.run/v1alpha1
kind: Deliverable
metadata:
  creationTimestamp: <span class="s2">&#34;2022-04-19T07:56:37Z&#34;</span>
  generation: <span class="m">1</span>
  labels:
    app.kubernetes.io/component: deliverable
    app.kubernetes.io/part-of: tanzu-java-web-app
    app.tanzu.vmware.com/deliverable-type: web
    apps.tanzu.vmware.com/workload-type: web
    carto.run/cluster-template-name: deliverable-template
    carto.run/resource-name: deliverable
    carto.run/supply-chain-name: source-to-url
    carto.run/template-kind: ClusterTemplate
    carto.run/workload-name: tanzu-java-web-app
    carto.run/workload-namespace: tap-install
  name: tanzu-java-web-app
  namespace: tap-install
  resourceVersion: <span class="s2">&#34;1451190&#34;</span>
  uid: 23c2d202-0186-4c62-b497-baaa961e3698
spec:
  source:
    image: <span class="o">{</span>image<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>run cluster로 변경 후 저장한 deliverable파일을 실행 해준다.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## RUN Cluster로 변경</span>
kubectl config use-context <span class="o">{</span>run cluster<span class="o">}</span>
kubectl apply -f deliverable.yaml -n <span class="si">${</span><span class="nv">DEVELOPER_NAMESPACE</span><span class="si">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>확인을 하면 성공한 것을 확인 할 수 있다.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl get deliverables -n <span class="si">${</span><span class="nv">DEVELOPER_NAMESPACE</span><span class="si">}</span>
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>deliverable 상태 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>deliverable gui 상태 확인</h4>
        </figcaption>
</figure>
</p>
<h2 id="4-visual-studio">4. Visual Studio</h2>
<p>IDE를 Visual Studio를 사용하여 동작, 현재는 Visual studio만 지원 하고 있음</p>
<h3 id="41-extenstion-설정">4.1. Extenstion 설정</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">apt search openjdk

apt install openjdk-11-jdk -y
java --version
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s2">&#34;allow_k8s_contexts(&#39;</span><span class="k">$(</span>kubectl config current-context<span class="k">)</span><span class="s2">&#39;)&#34;</span> &gt;&gt; /var/tmp/tap/tanzu-java-web-app/Tiltfile

<span class="c1">## 맨아래 해당 context가 들어가 있는 것을 확인 할 수 있다.</span>
cat /var/tmp/tap/tanzu-java-web-app/Tiltfile

ctrl + <span class="nb">shift</span> + p
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>VS 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>VS 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>VS 설정</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>VS 설정</h4>
        </figcaption>
</figure>
</p>
<h3 id="42-live-update-start">4.2. Live Update Start</h3>
<p>해당 부분을 수정 하면 자동으로 GIT에 업데이트가 되면서 바뀌는것을 볼수 있다.
<figure><figcaption>
            <h4>수정#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>수정#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>수정#3</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>수정#4</h4>
        </figcaption>
</figure>
</p>
]]></description>
</item><item>
    <title>The Documentation NSXT and Ansible</title>
    <link>https://huntedhappy.github.io/ko/nsxt/</link>
    <pubDate>Wed, 19 Jan 2022 09:27:33 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/nsxt/</guid>
    <description><![CDATA[<h2 id="1-ansible을-통한-nsxt-구성">1. Ansible을 통한 NSXT 구성</h2>
<p>NSXT를 Ansible로 구성.</p>
<p>Ansible의 대한 보충 설명을 할 수 있으면 추후에 진행 하기로 하고 우선 설정의 대해서 설명을 먼저 하겠다.</p>
<p>먼저.. 이 부분을 블로그로 쓰는게 맞을까라는 고민을 좀 했다.</p>
<p>이유는 우선 Ansible로 구성이 되어 있기 때문에 코드가 들어가 있다. 그래서 NSXT Ansible Module을 다운로드 받고 나서 추가 된 부분을 Git Hub에 올려 두었다.</p>
<h2 id="2-설치">2. 설치</h2>
<h3 id="21-파이썬-설치">2.1. 파이썬 설치</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">yum update -y

rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

yum install epel-release yum-utils python3-pip -y

pip3 install --upgrade pip setuptools ansible pyvmomi pyvim requests ruamel.yaml

dnf install libnsl -y
</code></pre></td></tr></table>
</div>
</div><p>파이썬을 설치 후 버전을 변경 하고 싶으면 아래 처럼 구성</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sudo rm /usr/bin/python
sudo update-alternatives --install /usr/bin/python python /usr/bin/python<span class="o">(</span>TAB<span class="o">)</span> <span class="c1">## 설치되어 있는 버전을 확인 할 수 있다.</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>파이썬 버전 확인</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 <span class="m">1</span>
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 <span class="m">2</span>

sudo update-alternatives --config python
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>파이썬 버전 선택</h4>
        </figcaption>
</figure>

<h3 id="22-ovf-tool">2.2. OVF Tool</h3>
<p>OVF Tool 다운로드</p>
<p><a href="https://developer.vmware.com/web/tool/4.4.0/ovf" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> OVF Tool 다운로드 링크</a></p>
<figure><figcaption>
            <h4>원하는 버전으로 다운로드 받는다.</h4>
        </figcaption>
</figure>

<h3 id="23-nsxt-ansible-download">2.3. NSXT Ansible Download</h3>
<p>제공한 버전은 3.1 기준으로 구성을 하였다.</p>
<figure><figcaption>
            <h4>원하는 버전으로 다운로드 받는다.</h4>
        </figcaption>
</figure>

<h3 id="24-ansible-실행">2.4. Ansible 실행</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">ovftool -v 에러가 나오면 dnf install libnsl 설치
ansible-playbook 01_deploy_first_node.yml -vvv
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>에러 발생시 dnf install libnsl 설치.</h4>
        </figcaption>
</figure>

<h3 id="25-github">2.5. Github</h3>
<p>다운로드 NSXT Ansible Module을 압축을 해제 하면 되는대, 그 부분을 별도로 github에 올려두었다.</p>
<p>추가적으로 vars라는 폴더와, 00 ~ 10 번 , answerfile,yml이 추가 된 것을 확인 할 수 있다.</p>
<p>코드를 하나 하나 설명을 하기에는.. 좀 벅찬 느낌이 든다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git clone https://github.com/huntedhappy/nsxt3.1
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>The Documentation NAP</title>
    <link>https://huntedhappy.github.io/ko/nap/</link>
    <pubDate>Thu, 13 Jan 2022 18:10:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/nap/</guid>
    <description><![CDATA[<h2 id="1-nap">1. NAP?</h2>
<p>NAP(NGINX App Protect)은 WAF and DoS Protection을 제공 한다. NGINX Plus에서 제공을 하며 컨테이너 환경에서 App을 보호 하기 위한 솔루션이다. 대부분 컨테이너 환경에서 Ingress를 NGINX로 많이 사용 할 것이다. NGINX PLUS 라이센스를 구매 하면 NAP을 사용 할 수 있다.</p>
<h2 id="2-사전-구성">2. 사전 구성</h2>
<ul>
<li>Docker v18.09+</li>
<li>GNU Make</li>
<li>git</li>
<li>Helm3</li>
<li>OpenSSL</li>
<li><a href="https://github.com/OpenVPN/easy-rsa.git" target="_blank" rel="noopener noreffer">https://github.com/OpenVPN/easy-rsa.git</a></li>
<li>apt install git \  make \ make-guile</li>
</ul>
<h2 id="3-설치">3. 설치</h2>
<p>Namespace 생성 후 easy-rsa git clone</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create ns ingress-nginx

git clone https://github.com/OpenVPN/easy-rsa.git
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>easy rsa</h4>
        </figcaption>
</figure>

<p>인증서 생성 (인증서 생성은 반드시 이렇게 하지 않아도 된다.)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> easy-rsa/easyrsa3/

./easyrsa init-pki
./easyrsa build-ca
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>easy rsa 구성#1</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">./easyrsa gen-req wildcard

./easyrsa sign-req server wildcard
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>easy rsa 구성#2</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">openssl rsa -in /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard.key -out /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard-unencrypted.key

<span class="c1">## 인증서 Secret 생성</span>
kubectl create -n ingress-nginx secret tls wildcard-tls --key /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard-unencrypted.key --cert /var/tmp/easy-rsa/easyrsa3/pki/issued/wildcard.crt

<span class="c1">## 안지워도된다.</span>
rm /var/tmp/easy-rsa/easyrsa3/pki/private/wildcard-unencrypted.key
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>ssl 인증서 secret 생성</h4>
        </figcaption>
</figure>

<p>secret 인증서 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl get secret -n ingress-nginx
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>secret 확인</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp

<span class="c1">## nap을 위한 yaml파일 다운로드</span>
git clone https://github.com/nginxinc/kubernetes-ingress/

<span class="c1">## nap을 위한 helm repo 주소 추가</span>
helm repo add nginx-stable https://helm.nginx.com/stable
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>git clone</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp/kubernetes-ingress/deployments/helm-chart
git checkout v1.11.3
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>git checkout</h4>
        </figcaption>
</figure>

<p>라이센스 발급 30일 trial을 받을 수 있다. 가입 필요
<a href="https://www.nginx.com/free-trial-request-nginx-ingress-controller/" target="_blank" rel="noopener noreffer"><i class="far fa-file-archive fa-fw"></i>&nbsp;NAP 발급 링크</a></p>
<p>미리 Harbor에 ingress-nginx project 생성이 되어 있어야함</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">REGISTRY</span><span class="o">=</span>&lt;registry IP or FQDN&gt;
<span class="nv">NS</span><span class="o">=</span>&lt;your namespace&gt;
<span class="nv">REGISTRY</span><span class="o">=</span>10.253.110.4
<span class="nv">NS</span><span class="o">=</span>ingress-nginx
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Harbor 확인</h4>
        </figcaption>
</figure>

<p>발급 받은 라이센스를 복사</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mkdir -p /var/tmp/kubernetes-ingress
cp nginx-repo.key nginx-repo.crt  /var/tmp/kubernetes-ingress
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>라이센스 복사</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp/kubernetes-ingress

make debian-image-nap-plus <span class="nv">PREFIX</span><span class="o">=</span><span class="nv">$REGISTRY</span>/<span class="nv">$NS</span>/nginx-plus-ingress <span class="nv">TARGET</span><span class="o">=</span>container
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Docker Pull</h4>
        </figcaption>
</figure>

<p>docker image 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">docker images
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Docker Image 확인</h4>
        </figcaption>
</figure>

<p>Harbor에 Push</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">docker image tag 18a49497920c <span class="nv">$REGISTRY</span>/<span class="nv">$NS</span>/nginx-plus-ingress:1.11.3

docker login &lt;harbor IP&gt;
make push <span class="nv">PREFIX</span><span class="o">=</span><span class="nv">$REGISTRY</span>/<span class="nv">$NS</span>/nginx-plus-ingress
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>Harbor push#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Harbor push#2</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Harbor push#3</h4>
        </figcaption>
</figure>
</p>
<p>Helm Value 복사 (원본을 건드리지 않게 하기 위해 별도로 복사를 한다.)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> deployments/helm-chart
cp values-plus.yaml values-plus.yaml.orig
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Helm Value 복사</h4>
        </figcaption>
</figure>

<p>복사한 파일을 열어 보면 아래와 같이 되어 있는대 수정해줘야 하는 부분을 수정 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## vi 편집</span>
vi values-plus.yaml 

<span class="c1">## 내용 (imagePullSecretName의 경우 Harbor에 Public으로 만들었으면 상관 없음)</span>
controller:
  replicaCount: <span class="m">1</span>
  nginxplus: <span class="nb">true</span>
  image:
    repository: 10.253.106.46/ingress-nginx/nginx-plus-ingress
    tag: <span class="s2">&#34;1.11.3&#34;</span>
  service:
    externalTrafficPolicy: Cluster
  appprotect:
    <span class="c1">## Enable the App Protect module in the Ingress Controller.</span>
    enable: <span class="nb">true</span>
  wildcardTLS:
    <span class="c1">## The base64-encoded TLS certificate for every Ingress host that has TLS enabled but no secret specified.</span>
    <span class="c1">## If the parameter is not set, for such Ingress hosts NGINX will break any attempt to establish a TLS connection.</span>
    cert: <span class="s2">&#34;&#34;</span>

    <span class="c1">## The base64-encoded TLS key for every Ingress host that has TLS enabled but no secret specified.</span>
    <span class="c1">## If the parameter is not set, for such Ingress hosts NGINX will break any attempt to establish a TLS connection.</span>
    key: <span class="s2">&#34;&#34;</span>

    <span class="c1">## The secret with a TLS certificate and key for every Ingress host that has TLS enabled but no secret specified.</span>
    <span class="c1">## The value must follow the following format: `&lt;namespace&gt;/&lt;name&gt;`.</span>
    <span class="c1">## Used as an alternative to specifying a certificate and key using `controller.wildcardTLS.cert` and `controller.wildcardTLS.key` parameters.</span>
    <span class="c1">## Format: &lt;namespace&gt;/&lt;secret_name&gt;</span>
    secret: ingress-nginx/wildcard-tls
  serviceAccount:
    <span class="c1">## The name of the service account of the Ingress controller pods. Used for RBAC.</span>
    <span class="c1">## Autogenerated if not set or set to &#34;&#34;.</span>
    name: ingress-nginx
    <span class="c1">## The name of the secret containing docker registry credentials.</span>
    <span class="c1">## Secret must exist in the same namespace as the helm release.</span>
    imagePullSecretName: <span class="s2">&#34;regcred&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>PSP를 혀용하기 위해 해당 파일을 실행 해준다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/nginx-psp.yaml
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>psp 허용</h4>
        </figcaption>
</figure>

<p>HELM 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl create secret generic regcred --from-file<span class="o">=</span>.dockerconfigjson<span class="o">=</span><span class="nv">$HOME</span>/.docker/config.json --type<span class="o">=</span>kubernetes.io/dockerconfigjson -n ingress-nginx

helm install nap nginx-stable/nginx-ingress -f values-plus.yaml -n ingress-nginx
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>helm으로 nap 설치</h4>
        </figcaption>
</figure>

<p>설치 확인</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">watch -n <span class="m">1</span> kubectl -n ingress-nginx get all
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>설치 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>L4 확인</h4>
        </figcaption>
</figure>
</p>
<h2 id="4-waf">4. WAF</h2>
<p>WAF TEST를 위해 웹 구성</p>
<h3 id="41-test-web-구성">4.1. TEST WEB 구성</h3>
<p>TEST를 하기 위해 제공하는 Manifest를 다운로드 한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe-rbac.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe-ingress.yaml

kubectl apply -f cafe-rbac.yaml -n <span class="nb">test</span>
kubectl apply -f cafe.yaml -n <span class="nb">test</span>

vi cafe-ingress.yaml <span class="o">(</span>인증서 만들었던 Domain으로 변경<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Domain을 변경 한다.</h4>
        </figcaption>
</figure>

<p>Domain 변경 후 실행</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f cafe-ingress.yaml -n <span class="nb">test</span>
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Ingress 확인.</h4>
        </figcaption>
</figure>

<p>POSTMAN으로 접속이 되는지 확인
<figure><figcaption>
            <h4>POSTMAN 확인.</h4>
        </figcaption>
</figure>
</p>
<h3 id="42-waf-구성">4.2. WAF 구성</h3>
<p>ELK를 구성 하기 위해 syslog pod를 구성한다.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/syslog-rbac.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/syslog.yaml

kubectl apply -f syslog-rbac.yaml -n ingress-nginx
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl apply -f syslog.yaml -n ingress-nginx
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/ap-apple-uds.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/ap-dataguard-alarm-policy.yaml
wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/ap-logconf.yaml

kubectl apply -f  ap-apple-uds.yaml -n <span class="nb">test</span>
kubeclt apply -f  ap-dataguard-alarm-policy.yaml -n <span class="nb">test</span>
kubectl apply -f  ap-logconf.yaml -n <span class="nb">test</span>
</code></pre></td></tr></table>
</div>
</div><p>ingress에 annotation을 설정</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/f5devcentral/f5-bd-tanzu-tkg-nginxplus/main/cafe-ingress-ap.yaml
kubectl get pod -n ingress-nginx -o wide

<span class="c1">## vi 편집 실행</span>
vi cafe-ingress-ap.yaml

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: cafe-ingress
  annotations:
    appprotect.f5.com/app-protect-policy: <span class="s2">&#34;test/dataguard-alarm&#34;</span>
    appprotect.f5.com/app-protect-enable: <span class="s2">&#34;True&#34;</span>
    appprotect.f5.com/app-protect-security-log-enable: <span class="s2">&#34;True&#34;</span>
    appprotect.f5.com/app-protect-security-log: <span class="s2">&#34;test/logconf&#34;</span>
    appprotect.f5.com/app-protect-security-log-destination: <span class="s2">&#34;syslog:server=SYSLOG:514&#34;</span>
spec:
  ingressClassName: nginx <span class="c1"># use only with k8s version &gt;= 1.18.0</span>
  tls:  - hosts:
    - cafe.vcf.local  <span class="c1">## 인증서와 동일한 도메인으로 변경</span>
  rules:
  - host: cafe.vcf.local <span class="c1">## 인증서와 동일한 도메인으로 변경</span>
    http:
      paths:
      - path: /tea
        backend:
          serviceName: tea-svc
          servicePort: <span class="m">80</span>
      - path: /coffee
        backend:
          serviceName: coffee-svc
          servicePort: <span class="m">80</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">## syslog service ip</span>
<span class="nv">SYSLOG_IP</span><span class="o">=</span>10.101.182.155
vi cafe-ingress-ap.yaml

sed -e <span class="s2">&#34;s/SYSLOG/</span><span class="nv">$SYSLOG_IP</span><span class="s2">/&#34;</span> cafe-ingress-ap.yaml &gt; cafe-ingress-ap-syslog.yaml
kubectl apply -n <span class="nb">test</span> -f cafe-ingress-ap-syslog.yaml

kubectl get ingress -n <span class="nb">test</span>

<span class="c1">## 아래 명령어로 annotation을 확인 할 수 있다.</span>
kubrectl get ingress cafe-ingress -n <span class="nb">test</span> -o yaml
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>Annotation 확인.</h4>
        </figcaption>
</figure>

<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">kubectl get pod -n ingress-nginx

LOG 확인
kubectl -n ingress-nginx <span class="nb">exec</span> -it syslog-65d847447d-ghbvq -- tail -f /var/log/messages
</code></pre></td></tr></table>
</div>
</div><p><figure><figcaption>
            <h4>syslog pod 확인.</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>PostMan 요청 후 REJECT확인.</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>Pod 로그 확인시 Attack 확인.</h4>
        </figcaption>
</figure>
</p>
<h2 id="5-elk">5. ELK</h2>
<p>LOG를 좀 가시적이게 표현하기 위해 ELK를 구성</p>
<h3 id="51-elastic-연동">5.1. Elastic 연동</h3>
<p>logstach를 5144로 구성한 이유는 Logstach 구성시 514가 well-known 포트라 5144로 변경
logstash yaml 파일, <a href="/ko/nap/logstash_test.yaml" rel=""><i class="far fa-file-archive fa-fw"></i>&nbsp;logstash_test.yaml</a>.</p>
<figure><figcaption>
            <h4>logstach 확인.</h4>
        </figcaption>
</figure>

<p>ingress 설정에서 syslog server 를 logstash cluster IP로 설정
<figure><figcaption>
            <h4>annotation에서 logstach로 syslog IP 변경 .</h4>
        </figcaption>
</figure>
</p>
<p>해당 파일을 다운로드 받는다.</p>
<p><a href="https://github.com/f5devcentral/f5-waf-elk-dashboards" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Dashboard 링크 </a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mkdir /var/tmp/kibana
<span class="nb">cd</span> /var/tmp/kibana
cp false-positives-dashboards.ndjson overview-dashboard.ndjson /var/tmp/kibana
</code></pre></td></tr></table>
</div>
</div><figure><figcaption>
            <h4>파일 다운로드</h4>
        </figcaption>
</figure>

<p>대쉬보드 업로드</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /var/tmp

<span class="nv">KIBANA_URL</span><span class="o">=</span> <span class="o">{</span>FQDN or IP<span class="o">}</span>
<span class="nv">KIBANA_URL</span><span class="o">=</span>http://kibana.vcf.local:5601

jq -s . kibana/overview-dashboard.ndjson <span class="p">|</span> jq <span class="s1">&#39;{&#34;objects&#34;: . }&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>curl -k --location --request POST <span class="s2">&#34;</span><span class="nv">$KIBANA_URL</span><span class="s2">/api/kibana/dashboards/import&#34;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;kbn-xsrf: true&#39;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;Content-Type: text/plain&#39;</span> -d @- <span class="se">\
</span><span class="se"></span><span class="p">|</span> jq

jq -s . kibana/false-positives-dashboards.ndjson <span class="p">|</span> jq <span class="s1">&#39;{&#34;objects&#34;: . }&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>curl -k --location --request POST <span class="s2">&#34;</span><span class="nv">$KIBANA_URL</span><span class="s2">/api/kibana/dashboards/import&#34;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;kbn-xsrf: true&#39;</span> <span class="se">\
</span><span class="se"></span>--header <span class="s1">&#39;Content-Type: text/plain&#39;</span> -d @- <span class="se">\
</span><span class="se"></span><span class="p">|</span> jq
</code></pre></td></tr></table>
</div>
</div><p>kibana접속 후 index patterns에 waf-logs-* 확인
<figure><figcaption>
            <h4>kibana 확인</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>kibana 대시보드 확인</h4>
        </figcaption>
</figure>
</p>
<p><a href="https://devcentral.f5.com/s/articles/Deploying-NGINXplus-with-AppProtect-in-Tanzu-Kubernetes-Grid" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> 참고문헌 </a></p>
]]></description>
</item><item>
    <title>The Documentation CICD</title>
    <link>https://huntedhappy.github.io/ko/cicd/</link>
    <pubDate>Tue, 11 Jan 2022 23:46:01 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/cicd/</guid>
    <description><![CDATA[<p>간단하게 CICD의 대해 구성 하는 것을 기술 할 예정
사용자가 VS를 사용하여 Docker 내용을 수정 후 Git에 Push를 하면 Jenkins에서 5분에 한번씩 Polling을 하여 Git에 변화가 있으면 Pipeline이 동작 하면서 자동으로 Docker Build를 수행 후 Harbor에 이미지를 Push 후 새로운 이미지의 대한 Version을 Manifest의 변경 하여 다시 Git에 Push, 이후 3분에 한번씩 Argo가 Git의 내용의 변화가 있는지 확인 후 변화가 있으면 K8S의 환경의 Manifest를 적용</p>
]]></description>
</item><item>
    <title>The Documentation K8s</title>
    <link>https://huntedhappy.github.io/ko/k8s/</link>
    <pubDate>Sat, 08 Jan 2022 14:32:33 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/k8s/</guid>
    <description><![CDATA[<p>아래 내용을 작성 하는 이유
같이 일했던 동료가 다른 곳으로 회사를 이직 하고 나서 컨테이너를 해야 되는거 같았다. 같이 일을 했기 때문에 L4 / L7을 잘 했던 친구 였다. 그런대 뜬금없이 L4를 연동 하면 어떻게 컨테이너로 트래픽을 전달하냐라고 물어본적이 있었다. 
그래서 혹시 모르는 사람을 위해서 간략하게 적어 내려 간다.</p>
<h2 id="1-service-type">1. Service Type</h2>
<p>컨테이너를 하기 위해서는 우선 Deploy , STS등으로 Pod를 생성한다. 그럼 일반적으로 테스트를 하기 위해서 아래와 같이 명령어를 칠 것이다.</p>
<ul>
<li>kubectl create deploy nginx &ndash;image=nginx -n nginx</li>
</ul>
<p>그러면 deploy를 통해 pod가 생성 된 것을 확인 할 수 있다. 그리고 나서 서비스를 연동 할 것이다. 그럼 아래와 같은 명령어를 칠 것이다.</p>
<ul>
<li>kubectl expose deploy nginx &ndash;port=80 &ndash;target-port=80 &ndash;type=ClusterIP -n nginx</li>
</ul>
<p>ClusterIP는 그럼 아래와 같은 정보를 보게 될 것이다.</p>
<figure><figcaption>
            <h4>svc ClusterIP상태</h4>
        </figcaption>
</figure>

<p>NodePort는 아래처럼 정보를 보게 된다.</p>
<ul>
<li>kubectl expose deploy nginx &ndash;port=80 &ndash;target-port=80 &ndash;type=NodePort -n nginx</li>
</ul>
<figure><figcaption>
            <h4>svc NodePort상태</h4>
        </figcaption>
</figure>

<p>그럼 보는바와 같이 차이가 좀 있는 것을 알 수 있다.
NodePort를 하게 될 경우 아래와 같이 30000대의 Port를 확인 할 수 있을 것이다.</p>
<h2 id="l4연동-후-nodeport">L4연동 후 NodePort</h2>
<p>그럼 만약에 L4장비와 연결을 하게 되면 어떻게 보이게 될까? 아래 그림으로 한번 확인을 해보자</p>
<ul>
<li>kubectl expose deploy nginx &ndash;port=80 &ndash;target-port=80 &ndash;type=LoadBalancer -n nginx</li>
</ul>
<figure><figcaption>
            <h4>svc LoadBalancer상태#1</h4>
        </figcaption>
</figure>

<figure><figcaption>
            <h4>svc LoadBalancer상태#2</h4>
        </figcaption>
</figure>

<p>위에 AVI에 설정된 서버가 실제적인 K8S의 Node인것을 확인 할 수 있다.</p>
<figure><figcaption>
            <h4>svc LoadBalancer상태#3</h4>
        </figcaption>
</figure>

<p>보는 것과 같이 실제 노드IP에 32676번 (30000번대의 포트를 할당 받음) 포트가 연동 되어 있는것을 확인 할 수 있다.</p>
<p>그럼 실제적으로 클라이언트가 접속을 하게 되면 Node:Port(32767)의 연결된 노드로 트래픽이 가게 되고 노드는 트래픽이 들어오면 해당하는 EndPoint로 접속 하게 되는 것이다.</p>
<ul>
<li>Source &gt; L4 &gt; Node:Port &gt; Container</li>
</ul>
<p>그럼 아래와 같이 SVC와 그의 대한 Endpoint가 어떻게 연결되어 있는지 알 수 있다.
<figure><figcaption>
            <h4>svc LoadBalancer상태#4</h4>
        </figcaption>
</figure>
</p>
<p>아래와 같이 접속이 되는 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>svc LoadBalancer상태#5</h4>
        </figcaption>
</figure>
</p>
<h2 id="l4연동-후-clusterip">L4연동 후 ClusterIP</h2>
<p>그런대 여기서 의문점이 들 것이다. 그럼 ClusterIP는 지원이 안되는건가? 그건 연동하는 L4에서 지원을 하면 가능 하다. 그럼 어떻게 나오는지 한번 확인 해보자.</p>
<p>특별하게 설정 할 것은 없고, AVI를 NodePort를 지원하는 것에서 ClusterIP로 변경 후 상태를 확인 해보면 실제 Pod의 IP로 맵핑이 된 것을 확인 할 수 있다.
<figure><figcaption>
            <h4>svc LoadBalancer상태#6</h4>
        </figcaption>
</figure>
</p>
<h2 id="결과">결과</h2>
<p>위에서 보듯이 NodePort와 ClusterIP의 차이점을 확인해 볼 수 있을 거 같다.</p>
]]></description>
</item><item>
    <title>The Documentation Minio</title>
    <link>https://huntedhappy.github.io/ko/minio/</link>
    <pubDate>Thu, 06 Jan 2022 23:47:23 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/minio/</guid>
    <description><![CDATA[<p>MiniO는 Minimal Object Storage를 의미 하며, 오픈소스 형태로 제공 하는 오브젝트 스토리지이다.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Object Storage?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">오브젝트 스토리지는 이미지, 오디오 파일, 스프레드시트 또는 바이너리 실행 코드등 문서 처럼 한줄 한문자 바꾸는 형식이 아니라 하나의 파일이 다 바뀌는 것으로 이해하면 쉬울 거 같다.</div>
        </div>
    </div>
<p>MiniO는 3가지 형태로 도구를 제공 한다.</p>
<ul>
<li>MiniO Console / Server - UI / Cloud Storage Server를 구성 할 수 있다.</li>
<li>MiniO Client(mc,admin) - Minio Server, AWS S3, GCS등등 연결하여 파일 업로드 및 관리등을 할 수 있다.</li>
<li>MiniO gateway - Minio는 스토리지 Gateway도 지원한다. 예를들어 miniO게이트웨이를 구성 하면 가상머신등에서 Nas를 통해 파일 또는 파일공유 지점으로 miniO안 객체에 엑세스 할 수 있다.</li>
</ul>
<p>MiniO는 2가지의 배포 형식을 제공 한다.</p>
<ul>
<li>독립형 배포: 단일 스토리지 볼륨 또는 폴더가 있는 단일 MiniO 서버</li>
<li>분산 배포: 모든 서버에 총 스토리지 볼륨이 4개 이상인 하나 이상의 MiniO서버</li>
</ul>
<p>위의 내용은 Kasten 설치 후 백업 스토리지를 MiniO로 구성하기 위해 간단하게 MiniO가 무엇인지의 대한 설명</p>
<p>아래 내용은 Kasten으로 백업 스토리지를 MiniO로 구성시 Erasure Coding 및 Immutability가 되어야 하는대 이 부분의 대해서 설명 하고자 한다.</p>
<h2 id="1-erasure-coding">1. Erasure Coding</h2>
<p>Erasure Coding은 클러스터의 여러개 디스크 드라이브 중 몇개가 손실이 발생 하더라도 자동으로 복구 를 할 수 있게 해주는 데이터 중복성 및 가용성 기능이다. Erasure Coding은 RAID 또는 복제와 같은 기술보다 적은 오버헤드로 복구를 제공한다.</p>
<h3 id="11-erasure-coding-동작">1.1. Erasure Coding 동작</h3>
<p>Erasure Coding은 원본 데이터를 가져와서 데이터가 필요할 때 원본 정보를 재생성하기 위해 부분 집합만 필요로 하는 방식으로 인코딩을 한다. 예를들어 개체 또는 데이터의 원래 값이 95라고 가정하고 x=9 및 y=5가 되도록 나눈다. 인코딩 프로세스는 일련의 방정식을 생성 한다.</p>
<p>이 경우 다음과 같은 방적식을 생성한다고 가정 합니다.</p>
<ul>
<li>x + y = 14</li>
<li>x - y = 4</li>
<li>2x + y = 23</li>
</ul>
<p>객체를 재생성 하려면 이 세 방정식 중 두가지가 필요 하므로 디코딩 할 수 있습니다. 따라서 방정식을 풀면 x와 y에 대한 값을 얻을 수 있습니다.</p>
<p>3개의 방정식이 있지만 그 중 2개에서 원래 정보를 얻을 수 있기 때문에 데이터를 조각으로 나누고 인코딩하여 여러위치에 저장하는 데이터 보호 체계 입니다.</p>
<p>요약하자면, Erasure Code를 활용하여 데이터를 인코딩 하고, 데이터 손실시 디코딩 과정을 거쳐 원본 데이터를 복구하는 데이터 복구 기법중 하나</p>
<figure><figcaption>
            <h4>Decode / Encode</h4>
        </figcaption>
</figure>

<p>자세한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.min.io/minio/baremetal/concepts/erasure-coding.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Minio Erasure Coding</a></p>
<p>참고링크#1 <a href="https://stonefly.com/blog/understanding-erasure-coding" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> 참고링크#1</a></p>
<h3 id="12-erasure-coding-vs-raid">1.2. Erasure Coding vs RAID?</h3>
<p>RAID로 구성시 데이터를 다른 위치에 저장할 수 있으며 드라이브 오류로부터 보호, Erasure Coding은 데이터가 부분적으로 분할된 다음 확장되고 인코딩이 된다. 그 후 세그먼트는 여러 위치에 보관하도록 구성이 된다. 
RAID는 무결성 위협으로 부터 데이터 보호를 용이 하게 할 수 있으며, Erasure Coding은 스토리지 소모를 덜 할 수 있게 해준다. 
상황에 따라 RAID 및 Erasure Coding 모두 적합 할 수 있다.</p>
<p>Erasure Coding의 현재 사용 사례 중 하나는 객체 기반 클라우드 스토리지입니다. Erasure Coding은 높은 CPU 사용률을 요구하고 대기 시간이 발생하므로 애플리케이션 보관에 적합합니다. 또한 Erasure Coding은 데이터 무결성 위협으로부터 보호할 수 없기 때문에 기본 워크로드에 적합하지 않습니다.</p>
<h3 id="13-erasure-coding의-이점">1.3. Erasure Coding의 이점</h3>
<p>Erasure Coding은 고급 데이터 보호 및 재해 복구 방법을 제공합니다 .</p>
<ul>
<li>저장 공간 활용도: Erasure Coding은 소비되는 공간을 줄이고 동일한 수준의 중복성을 제공하여 더 나은 저장 활용률을 제공(복사본 3개). Erasure Coding을 활용하면 최대 50% 더 많은 공간을 절약할 수 있습니다.</li>
<li>신뢰성 향상:  데이터 조각은 독립적인 오류 더미 로 조각화됩니다 . 이렇게 하면 종속되거나 상관된 오류가 발생하지 않습니다.</li>
<li>적합성: Erasure Coding은 모든 파일 크기에 사용할 수 있습니다. KiloBytes의 작은 블록 크기에서 PetaBytes의 큰 블록 크기에 이르기까지 다양합니다.</li>
<li>Suitability: 데이터를 복구하는 데 데이터의 Suitability만 필요합니다. 원본 데이터가 필요하지 않습니다.</li>
<li>유연성: 시스템을 오프라인으로 전환하지 않고도 편리할 때 고장난 구성 요소를 교체할 수 있습니다.</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Suitablility?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Suitablility란 더 큰 집합에서의 부분적인 집합.</div>
        </div>
    </div>
<h3 id="14-minio-erasure-code-계산기">1.4. MiniO Erasure Code 계산기</h3>
<blockquote>
<p><a href="https://min.io/product/erasure-code-calculator?utm_term=erasure%20coding&amp;utm_campaign=Erasure&#43;Coding&#43;1.4&amp;utm_source=adwords&amp;utm_medium=ppc&amp;hsa_acc=8976569894&amp;hsa_cam=13884673572&amp;hsa_grp=127699937027&amp;hsa_ad=533469681242&amp;hsa_src=g&amp;hsa_tgt=kwd-314402742856&amp;hsa_kw=erasure%20coding&amp;hsa_mt=p&amp;hsa_net=adwords&amp;hsa_ver=3&amp;gclid=Cj0KCQiAip-PBhDVARIsAPP2xc2nLMVBzYtNdDYlETP-3UjGr3ZqD7sA-IPzfhNnxWhzes03cq62ViUaAtprEALw_wcB" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> 계산기 LINK</a></p>
</blockquote>
<h2 id="2-immutability">2. Immutability</h2>
<p>MiniO 서버는 특정 개체에 대해 WORM을 허용하거나 모든 객체에 기본 보존 모드 및 보존기간을 적용하는 객체 잠금 구성으로 버킷을 구성하여 WORM을 허용합니다. 이렇게 하면 버킷의 객체를 변경 할 수 없습니다. 즉, 버킷의 객체 잠금 구성 또는 객체 보존에 지정된 만료일 까지 버전 삭제가 허용 되지 않습니다.</p>
<p>객체 잠금을 사용하려면 버킷 생성시 잠금을 활성화해야 하며, 객체 잠금도 버킷의 버전 관리를 자동으로 활성화 합니다. 또는 버킷에서 생성된 객체에 적용할 기본 보존 기간 및 보존 모드를 버킷에 구성 할 수 있습니다.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>WORM?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Read Many(WORM)</div>
        </div>
    </div>
<h3 id="21-개념">2.1. 개념</h3>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Immutability 개념<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>객체가 법적 보존 상태에 있는 경우 해당 버전ID에 대한 법적 보존이 명시적으로 제거되지 않는 한 삭제 할 수 없다. 그렇지 않으면 DeleteObjectVersio()이 실패 한다.</li>
<li>Compliance모드 에서는 해당 버전 ID의 보존기간이 만료될 때때가지 누구도 객체를 삭제 할 수 없다. 사용자에게 필요한 거버넌스 우회 권한이 있는 경우 Compliance모드 에서 개체의 보존 날짜를 연장 할 수 있다.</li>
<li>객체 잠금 구성이 버킷으로 설정되면</li>
</ul>
<blockquote>
<ul>
<li>새 객체는 버킷 객체 잠금 구성의 보존 설정을 자동으로 상속한다.</li>
<li>개체를 업로드할 때 보존 헤더를 선택적으로 설정 할 수 있다.</li>
<li>개체에서 명시적으로 PutObjectRetention API 호출을 할 수 있다.</li>
</ul>
</blockquote>
<ul>
<li>MINIO_NTP_SERVER환경 변수는 보존하는 날짜를 시스템시간으로 설정이 필요하지 않는 경우 원격 NTP 서버를 구성 할 수 있다.</li>
<li>객체잠금 기능은 삭제 코드 및 분산 삭제 코드 설정에서만 사용 할 수 있다.</li>
</ul>
</div>
        </div>
    </div>
<p>자세한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.min.io/docs/minio-bucket-object-lock-guide.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Minio Immutability</a></p>
<h3 id="카스텐-설정시-minio로-backup-storage-구성-링크-참조-i-classfas-fa-linki-kasten-minio-installhttpshuntedhappygithubiokok10">카스텐 설정시 MiniO로 Backup Storage 구성 링크 참조. <a href="https://huntedhappy.github.io/ko/k10/" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> Kasten MiniO Install</a></h3>
]]></description>
</item><item>
    <title>The Documentation Tanzu</title>
    <link>https://huntedhappy.github.io/ko/tanzu/</link>
    <pubDate>Sat, 01 Jan 2022 17:50:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://huntedhappy.github.io/ko/tanzu/</guid>
    <description><![CDATA[<h2 id="1-vmware-tanzu">1. VMware TANZU?</h2>
<p>2019년 8월 VMware에서 처음으로 TANZU 포트 폴리오를 발표 했다. VM웨어의 대표 제품군인 ‘브이스피어(vSphere)’를 쿠버네티스 네이티브 플랫폼으로 바꾸겠다고 선언했다. 이를 위해 VM웨어는 ‘프로젝트 퍼시픽(Project Pacific)’을 진행했다.</p>
<blockquote>
<figure><figcaption>
            <h4>Tanzu Portfolio</h4>
        </figcaption>
</figure>

</blockquote>
<p>처음에는 VCF(VMware Cloud Foundation)라는 솔루션을 같이 설치 하면서 배포 해야 되었던 vsphere with tanzu가 현재는 VCF를 구성하지 않아도 설치가 가능하도록 변하게 되었다.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>VCF(VMware Cloud Foundation)?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">VMware 제품군을 자동으로 설치 해주는 솔루션이다. Excel, JSON파일을 읽어 드려 vSphere, vCenter, vSAN 그리고 NSX-T를 한번에 배포 해주는 솔루션</div>
        </div>
    </div>
<h3 id="11-vsphere-with-tanzu">1.1. vsphere with tanzu?</h3>
<p>vsphere with tanzu는 말그대로 vsphere 에서 컨테이너를 바로 올리는 컨셉으로 나왔다. 용어로 TKGS라고도 불린다. Tanzu를 서비스형태로 올릴 수 있다고 해서 TKGS라고 불리며, 말그대로 vCenter에서 서비스 형태로 설치를 할 수 있기 때문이다. 하지만 vCenter에 종속이 되버리기 때문에 vCenter가 업그레이드가 되어야 K8S의 버전을 올릴수 있다. 정확히 말하면 vsphere위에 올릴 경우는 이벤트 형식으로 올리고, 프로덕션의 경우 TKC위에다가 POD를 올리는 것이 낫지 않을까 싶다.</p>
<p>그래서 컨셉은 아래와 같다.</p>
<blockquote>
<figure><figcaption>
            <h4>TKGS</h4>
        </figcaption>
</figure>

</blockquote>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>TKC(Tanzu Kubernetes Cluster)?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">TKC는 별도로 클러스터를 배포 하는 것이다. vmware에서 배포되는 Supervisor가 관리를 하게 되며, 네임스페이스에 TKC를 배포 하여 사용 할 수 있다.</div>
        </div>
    </div>
<p>자세한 TKGS의 대한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.vmware.com/kr/VMware-vSphere/7.0/vmware-vsphere-with-tanzu/GUID-4D0D375F-C001-4F1D-AAB1-1789C5577A94.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> VMware TKGS</a></p>
<h3 id="12-tanzu-kubernetes-grid">1.2. Tanzu Kubernetes Grid?</h3>
<p>TKGM이라고 하며, 예전 Pivotal에서 PKS가 이렇게 변한 것이 아닐까 싶다. 예전 Pivotal에서는 bosh라는 관리 솔루션을 통해 PKS를 배포 하여 클러스터를 구성 하였다. 그렇다고 TKG가 기존에 없었던 솔루션은 아니다 6.7에서 이미 TKG는 있었지만 많은 사람들이 사용하지는 않았다. 그리고 Pivotal이 VMware로 인수 되면서 Tanzu로 변화하고 있는 것으로 알고 있다. TKGM은 TKGS와는 다른게 별도로 관리 클러스터를 배포해야 한다. TKGS같은 경우에는 Supervisor가 그 역할을 하였다.
그리고 TKC를 배포하는 형식이다.</p>
<p>자세한 TKG의 대한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.vmware.com/en/VMware-Tanzu-Kubernetes-Grid/1.4/vmware-tanzu-kubernetes-grid-14/GUID-tkg-concepts.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> VMware TKG</a></p>
<h3 id="13-tanzu-kubernetes-integrated">1.3. Tanzu Kubernetes Integrated?</h3>
<p>기존 Pivotal에서 Bosh로 배포한 PKS라고 보면 될거 같다. 현재는 사용하지 않을 것 같으므로 설명은 패스 하겠다.</p>
<p>자세한 TKGI의 대한 설명은 링크를 걸어 두도록 하겠다. <a href="https://docs.vmware.com/en/VMware-Tanzu-Kubernetes-Grid-Integrated-Edition/index.html" target="_blank" rel="noopener noreffer"><i class="fas fa-link"></i> VMware TKGI</a></p>
]]></description>
</item></channel>
</rss>
